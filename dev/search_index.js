var documenterSearchIndex = {"docs":
[{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"DocTestSetup = quote\n    using Yao\n    using Yao: YaoBase, YaoBlocks, YaoArrayRegister\n    using YaoBase\n    using YaoBlocks\n    using YaoArrayRegister\nend","category":"page"},{"location":"man/blocks.html#Blocks","page":"Blocks","title":"Blocks","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Blocks are the basic building blocks of a quantum circuit in Yao. It simply means a quantum operator, thus, all the blocks have matrices in principal and one can get its matrix by mat. The basic blocks required to build an arbitrary quantum circuit is defined in the component package YaoBlocks.","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Block Tree serves as an intermediate representation for Yao to analysis, optimize the circuit, then it will be lowered to instructions like for simulations, blocks will be lowered to instruct! calls.","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"The structure of blocks is the same with a small type system, it consists of two basic kinds of blocks: CompositeBlock (like composite types), and PrimitiveBlock (like primitive types). By combining these two kinds of blocks together, we'll be able to construct a quantum circuit and represent it in a tree data structure.","category":"page"},{"location":"man/blocks.html#Primitive-Blocks","page":"Blocks","title":"Primitive Blocks","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Primitive blocks are subtypes of PrimitiveBlock, they are the leaf nodes in a block tree, thus primitive types do not have subtypes.","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"We provide the following primitive blocks:","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Modules = [YaoBlocks]\nFilter = t ->(t isa Type && t <: YaoBlocks.PrimitiveBlock)","category":"page"},{"location":"man/blocks.html#YaoBlocks.GeneralMatrixBlock","page":"Blocks","title":"YaoBlocks.GeneralMatrixBlock","text":"GeneralMatrixBlock{M, N, MT} <: PrimitiveBlock{N}\n\nGeneral matrix gate wraps a matrix operator to quantum gates. This is the most general form of a quantum gate. M is the hilbert dimension (first dimension), N is the hilbert dimension (second dimension) of current quantum state. For most quantum gates, we have M = N.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.IdentityGate","page":"Blocks","title":"YaoBlocks.IdentityGate","text":"IdentityGate{N} <: TrivialGate{N}\n\nThe identity gate.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.Measure","page":"Blocks","title":"YaoBlocks.Measure","text":"Measure{N, K, OT, LT, PT, RNG} <: PrimitiveBlock{N}\nMeasure(n::Int; rng=Random.GLOBAL_RNG, operator=ComputationalBasis(), locs=1:n, resetto=nothing, remove=false)\n\nMeasure operator.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.Measure-Union{Tuple{Int64}, Tuple{RNG}, Tuple{LT}, Tuple{OT}} where {OT, LT, RNG}","page":"Blocks","title":"YaoBlocks.Measure","text":"Measure(n::Int; rng=Random.GLOBAL_RNG, operator=ComputationalBasis(), locs=AllLocs(), resetto=nothing, remove=false)\n\nCreate a Measure block with number of qubits n.\n\nExample\n\nYou can create a Measure block on given basis (default is the computational basis).\n\njulia> Measure(4)\nMeasure(4)\n\nOr you could specify which qubits you are going to measure\n\njulia> Measure(4; locs=1:3)\nMeasure(4;locs=(1, 2, 3))\n\nby default this will collapse the current register to measure results.\n\njulia> r = normalize!(ArrayReg(bit\"000\") + ArrayReg(bit\"111\"))\nArrayReg{1, ComplexF64, Array...}\n    active qubits: 3/3\n\njulia> state(r)\n8×1 Matrix{ComplexF64}:\n 0.7071067811865475 + 0.0im\n                0.0 + 0.0im\n                0.0 + 0.0im\n                0.0 + 0.0im\n                0.0 + 0.0im\n                0.0 + 0.0im\n                0.0 + 0.0im\n 0.7071067811865475 + 0.0im\n\njulia> r |> Measure(3)\nArrayReg{1, ComplexF64, Array...}\n    active qubits: 3/3\n\njulia> state(r)\n8×1 Matrix{ComplexF64}:\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 1.0 + 0.0im\n\nBut you can also specify the target bit configuration you want to collapse to with keyword resetto.\n\n```jldoctest; setup=:(using YaoBlocks; using BitBasis) julia> m = Measure(4; resetto=bit\"0101\") Measure(4;postprocess=ResetTo{BitStr{4,Int64}}(0101 ₍₂₎))\n\njulia> m.postprocess ResetTo{BitStr{4,Int64}}(0101 ₍₂₎)```\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.PhaseGate","page":"Blocks","title":"YaoBlocks.PhaseGate","text":"PhiGate\n\nGlobal phase gate.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.RotationGate","page":"Blocks","title":"YaoBlocks.RotationGate","text":"RotationGate{N, T, GT <: AbstractBlock{N, Complex{T}}} <: PrimitiveBlock{N, Complex{T}}\n\nRotationGate, with GT both hermitian and isreflexive.\n\nDefinition\n\nmathbfI cos(θ  2) - im sin(θ  2) * mat(U)\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.ShiftGate","page":"Blocks","title":"YaoBlocks.ShiftGate","text":"ShiftGate <: PrimitiveBlock\n\nPhase shift gate.\n\nDefinition\n\nbeginpmatrix\n1  0\n0  e^(im θ)\nendpmatrix\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.TimeEvolution","page":"Blocks","title":"YaoBlocks.TimeEvolution","text":"TimeEvolution{N, TT, GT} <: PrimitiveBlock{N}\n\nTimeEvolution, where GT is block type. input matrix should be hermitian.\n\n!!!note:     TimeEvolution contructor check hermicity of the input block by default, but sometimes it can be slow. Turn off the check manually by specifying optional parameter check_hermicity = false.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#Composite-Blocks","page":"Blocks","title":"Composite Blocks","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Composite blocks are subtypes of CompositeBlock, they are the composition of blocks.","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"We provide the following composite blocks:","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Modules = [YaoBlocks]\nFilter = t -> t isa Type && t <: YaoBlocks.CompositeBlock","category":"page"},{"location":"man/blocks.html#YaoBlocks.Add","page":"Blocks","title":"YaoBlocks.Add","text":"Add{N} <: CompositeBlock{N}\nAdd{N}(iterable) -> Add\nAdd(blocks::AbstractBlock{N}...) -> Add\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.CachedBlock","page":"Blocks","title":"YaoBlocks.CachedBlock","text":"CachedBlock{ST, BT, N} <: TagBlock{BT, N}\n\nA label type that tags an instance of type BT. It forwards every methods of the block it contains, except mat and apply!, it will cache the matrix form whenever the program has.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.ChainBlock","page":"Blocks","title":"YaoBlocks.ChainBlock","text":"ChainBlock{N} <: CompositeBlock{N}\n\nChainBlock is a basic construct tool to create user defined blocks horizontically. It is a Vector like composite type.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.Daggered","page":"Blocks","title":"YaoBlocks.Daggered","text":"Daggered{BT, N} <: TagBlock{N}\n\nWrapper block allowing to execute the inverse of a block of quantum circuit.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.Daggered-Union{Tuple{BT}, Tuple{N}} where {N, BT<:AbstractBlock{N}}","page":"Blocks","title":"YaoBlocks.Daggered","text":"Daggered(x)\n\nCreate a Daggered block with given block x.\n\nExample\n\nThe inverse QFT is not hermitian, thus it will be tagged with a Daggered block.\n\njulia> A(i, j) = control(i, j=>shift(2π/(1<<(i-j+1))));\n\njulia> B(n, i) = chain(n, i==j ? put(i=>H) : A(j, i) for j in i:n);\n\njulia> qft(n) = chain(B(n, i) for i in 1:n);\n\njulia> struct QFT{N} <: PrimitiveBlock{N} end\n\njulia> QFT(n) = QFT{n}();\n\njulia> circuit(::QFT{N}) where N = qft(N);\n\njulia> YaoBlocks.mat(x::QFT) = mat(circuit(x));\n\njulia> QFT(2)'\n [†]QFT{2}\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.KronBlock","page":"Blocks","title":"YaoBlocks.KronBlock","text":"KronBlock{N, T, MT<:AbstractBlock} <: CompositeBlock{N, T}\n\ncomposite block that combine blocks by kronecker product.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.PutBlock","page":"Blocks","title":"YaoBlocks.PutBlock","text":"PutBlock <: AbstractContainer\n\nType for putting a block at given locations.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.RepeatedBlock","page":"Blocks","title":"YaoBlocks.RepeatedBlock","text":"RepeatedBlock <: AbstractContainer\n\nRepeat the same block on given locations.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.Scale","page":"Blocks","title":"YaoBlocks.Scale","text":"Scale{S <: Union{Number, Val}, N, BT <: AbstractBlock{N}} <: TagBlock{BT, N}\n\nScale a block with scalar. it can be either a Number or a compile time Val.\n\nExample\n\njulia> 2 * X\n[scale: 2] X\n\njulia> im * Z\n[+im] Z\n\njulia> -im * Z\n[-im] Z\n\njulia> -Z\n[-] Z\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.Subroutine","page":"Blocks","title":"YaoBlocks.Subroutine","text":"Subroutine{N, T, BT <: AbstractBlock} <: AbstractContainer{BT, N, T}\n\nSubroutine node on given locations. This allows you to shoehorn a smaller circuit to a larger one.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.UnitaryChannel","page":"Blocks","title":"YaoBlocks.UnitaryChannel","text":"UnitaryChannel(operators[, weights])\n\nCreate a unitary channel, optionally weighted from an list of weights. The unitary channel is defined as below in Kraus representation\n\nϕ(ρ) = sum_i U_i ρ U_i^\n\nnote: Note\nUnitary channel will only normalize the weights when calculating the matrix form, thus you should be careful when you need this condition for other purpose.\n\nnote: Note\nwhen applying a UnitaryChannel on the register, a unitary will be sampled uniformly or optionally from given weights, then this unitary will be applied to the register. \n\nExample\n\njulia> UnitaryChannel([X, Y, Z])\nnqubits: 1\nunitary_channel\n├─ [1.0] X\n├─ [1.0] Y\n└─ [1.0] Z\n\nOr with weights\n\njulia> UnitaryChannel([X, Y, Z], [0.1, 0.2, 0.7])\nnqubits: 1\nunitary_channel\n├─ [0.1] X\n├─ [0.2] Y\n└─ [0.7] Z\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#APIs","page":"Blocks","title":"APIs","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Modules = [YaoBlocks]\nOrder = [:function, :macro]","category":"page"},{"location":"man/blocks.html#Base.:|>-Tuple{AbstractRegister, AbstractBlock}","page":"Blocks","title":"Base.:|>","text":"|>(register, blk)\n\nPipe operator for quantum circuits.\n\nExample\n\njulia> ArrayReg(bit\"0\") |> X |> Y\n\nwarning: Warning\n|> is equivalent to apply!, which means it has side effects. You need to copy original register, if you do not want to change it in-place.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#Base.kron-Tuple{Int64, Vararg{Pair{<:Any, <:AbstractBlock}}}","page":"Blocks","title":"Base.kron","text":"kron(n, blocks::Pair{<:Any, <:AbstractBlock}...)\n\nReturn a KronBlock, with total number of qubits n and pairs of blocks.\n\nExample\n\nUse kron to construct a KronBlock, it will put an X gate on the 1st qubit, and a Y gate on the 3rd qubit.\n\njulia> kron(4, 1=>X, 3=>Y)\nnqubits: 4\nkron\n├─ 1=>X\n└─ 3=>Y\n\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#Base.kron-Tuple{Vararg{AbstractBlock}}","page":"Blocks","title":"Base.kron","text":"kron(blocks::AbstractBlock...)\nkron(n, itr)\n\nReturn a KronBlock, with total number of qubits n, and blocks should use all the locations on n wires in quantum circuits.\n\nExample\n\nYou can use kronecker product to composite small blocks to a large blocks.\n\njulia> kron(X, Y, Z, Z)\nnqubits: 4\nkron\n├─ 1=>X\n├─ 2=>Y\n├─ 3=>Z\n└─ 4=>Z\n\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#Base.kron-Tuple{Vararg{Pair{<:Any, <:AbstractBlock}}}","page":"Blocks","title":"Base.kron","text":"kron(blocks...) -> f(n)\nkron(itr) -> f(n)\n\nReturn a lambda, which will take the total number of qubits as input.\n\nExample\n\nIf you don't know the number of qubit yet, or you are just too lazy, it is fine.\n\njulia> kron(put(1=>X) for _ in 1:2)\n(n -> kron(n, (n  ->  put(n, 1 => X)), (n  ->  put(n, 1 => X))))\n\njulia> kron(X for _ in 1:2)\nnqubits: 2\nkron\n├─ 1=>X\n└─ 2=>X\n\njulia> kron(1=>X, 3=>Y)\n(n -> kron(n, 1 => X, 3 => Y))\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#Base.repeat-Tuple{AbstractBlock, Any}","page":"Blocks","title":"Base.repeat","text":"repeat(x::AbstractBlock, locs)\n\nLazy curried version of repeat.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#Base.repeat-Tuple{Int64, AbstractBlock, Vararg{Int64}}","page":"Blocks","title":"Base.repeat","text":"repeat(n, x::AbstractBlock[, locs]) -> RepeatedBlock{n}\n\nCreate a RepeatedBlock with total number of qubits n and the block to repeat on given location or on all the locations.\n\nExample\n\nThis will create a repeat block which puts 4 X gates on each location.\n\njulia> repeat(4, X)\nnqubits: 4\nrepeat on (1, 2, 3, 4)\n└─ X\n\nYou can also specify the location\n\njulia> repeat(4, X, (1, 2))\nnqubits: 4\nrepeat on (1, 2)\n└─ X\n\nBut repeat won't copy the gate, thus, if it is a gate with parameter, e.g a phase(0.1), the parameter will change simultaneously.\n\njulia> g = repeat(4, phase(0.1))\nnqubits: 4\nrepeat on (1, 2, 3, 4)\n└─ phase(0.1)\n\njulia> g.content\nphase(0.1)\n\njulia> g.content.theta = 0.2\n0.2\n\njulia> g\nnqubits: 4\nrepeat on (1, 2, 3, 4)\n└─ phase(0.2)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.apply!-Tuple{AbstractRegister, AbstractBlock}","page":"Blocks","title":"YaoAPI.apply!","text":"apply!(register, block)\n\nApply a block (of quantum circuit) to a quantum register.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.chcontent-Tuple{AbstractContainer, Any}","page":"Blocks","title":"YaoAPI.chcontent","text":"chcontent(x, blk)\n\nCreate a similar block of x and change its content to blk.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.chsubblocks-Tuple{AbstractBlock, Any}","page":"Blocks","title":"YaoAPI.chsubblocks","text":"chsubblocks(composite_block, itr)\n\nChange the sub-blocks of a CompositeBlock with given iterator itr.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.content-Tuple{AbstractContainer}","page":"Blocks","title":"YaoAPI.content","text":"content(x)\n\nReturns the content of x.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.dispatch!-Tuple{Union{Nothing, Function}, AbstractBlock, Any}","page":"Blocks","title":"YaoAPI.dispatch!","text":"dispatch!(x::AbstractBlock, collection)\n\nDispatch parameters in collection to block tree x.\n\nnote: Note\nit will try to dispatch the parameters in collection first.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.expect-Union{Tuple{B}, Tuple{AbstractBlock, DensityMatrix{B, T, MT} where {T, MT<:AbstractArray{T, 3}}}} where B","page":"Blocks","title":"YaoAPI.expect","text":"expect(op::AbstractBlock, reg) -> Vector\nexpect(op::AbstractBlock, reg => circuit) -> Vector\nexpect(op::AbstractBlock, density_matrix) -> Vector\n\nGet the expectation value of an operator, the second parameter can be a register reg or a pair of input register and circuit reg => circuit.\n\nexpect'(op::AbstractBlock, reg=>circuit) -> Pair expect'(op::AbstractBlock, reg) -> AbstracRegister\n\nObtain the gradient with respect to registers and circuit parameters. For pair input, the second return value is a pair of gψ=>gparams, with gψ the gradient of input state and gparams the gradients of circuit parameters. For register input, the return value is a register.\n\nnote: Note\nFor batched register, expect(op, reg=>circuit) returns a vector of size number of batch as output. However, one can not differentiate over a vector loss, so expect'(op, reg=>circuit) accumulates the gradient over batch, rather than returning a batched gradient of parameters.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.getiparams-Tuple{AbstractBlock}","page":"Blocks","title":"YaoAPI.getiparams","text":"getiparams(block)\n\nReturns the intrinsic parameters of node block, default is an empty tuple.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.iparams_eltype-Tuple{AbstractBlock}","page":"Blocks","title":"YaoAPI.iparams_eltype","text":"iparams_eltype(block)\n\nReturn the element type of getiparams.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.mat-Tuple{AbstractBlock}","page":"Blocks","title":"YaoAPI.mat","text":"mat([T=ComplexF64], blk)\n\nReturns the matrix form of given block.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.mat-Tuple{GeneralMatrixBlock}","page":"Blocks","title":"YaoAPI.mat","text":"mat(A::GeneralMatrixBlock)\n\nReturn the matrix of general matrix block.\n\n!!!warn\n\nInstead of converting it to the default data type `ComplexF64`,\nthis will return its contained matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.occupied_locs-Tuple{AbstractBlock}","page":"Blocks","title":"YaoAPI.occupied_locs","text":"occupied_locs(x)\n\nReturn a tuple of occupied locations of x.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.operator_fidelity-Tuple{AbstractBlock, AbstractBlock}","page":"Blocks","title":"YaoAPI.operator_fidelity","text":"operator_fidelity(b1::AbstractBlock, b2::AbstractBlock) -> Number\n\nOperator fidelity defined as\n\nF^2 = frac1d^2leftrm Tr(b1^dagger b2)right\n\nHere, d is the size of the Hilbert space. Note this quantity is independant to global phase. See arXiv: 0803.2940v2, Equation (2) for reference.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.parameters-Tuple{AbstractBlock}","page":"Blocks","title":"YaoAPI.parameters","text":"parameters(block)\n\nReturns all the parameters contained in block tree with given root block.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.parameters_eltype-Tuple{AbstractBlock}","page":"Blocks","title":"YaoAPI.parameters_eltype","text":"parameters_eltype(x)\n\nReturn the element type of parameters.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.setiparams!","page":"Blocks","title":"YaoAPI.setiparams!","text":"setiparams!([f], block, itr)\nsetiparams!([f], block, params...)\n\nSet the parameters of block. When f is provided, set parameters of block to the value in collection mapped by f. iter can be an iterator or a symbol, the symbol can be :zero, :random.\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoAPI.subblocks-Tuple{AbstractBlock}","page":"Blocks","title":"YaoAPI.subblocks","text":"subblocks(x)\n\nReturns an iterator of the sub-blocks of a composite block. Default is empty.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.Rx-Tuple{Any}","page":"Blocks","title":"YaoBlocks.Rx","text":"Rx(theta)\n\nReturn a RotationGate on X axis.\n\nExample\n\njulia> Rx(0.1)\nrot(X, 0.1)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.Ry-Tuple{Any}","page":"Blocks","title":"YaoBlocks.Ry","text":"Ry(theta)\n\nReturn a RotationGate on Y axis.\n\nExample\n\njulia> Ry(0.1)\nrot(Y, 0.1)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.Rz-Tuple{Any}","page":"Blocks","title":"YaoBlocks.Rz","text":"Rz(theta)\n\nReturn a RotationGate on Z axis.\n\nExample\n\njulia> Rz(0.1)\nrot(Z, 0.1)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.apply-Tuple{AbstractRegister, Any}","page":"Blocks","title":"YaoBlocks.apply","text":"apply(register, block)\n\nThe non-inplace version of applying a block (of quantum circuit) to a quantum register. Check apply! for the faster inplace version.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.applymatrix-Tuple{Any, AbstractBlock}","page":"Blocks","title":"YaoBlocks.applymatrix","text":"applymatrix(g::AbstractBlock) -> Matrix\n\nTransform the apply! function of specific block to dense matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.cache","page":"Blocks","title":"YaoBlocks.cache","text":"cache(x[, level=1; recursive=false])\n\nCreate a CachedBlock with given block x, which will cache the matrix of x for the first time it calls mat, and use the cached matrix in the following calculations.\n\nExample\n\njulia> cache(control(3, 1, 2=>X))\nnqubits: 3\n[cached] control(1)\n   └─ (2,) X\n\n\njulia> chain(cache(control(3, 1, 2=>X)), repeat(H))\nnqubits: 3\nchain\n├─ [cached] control(1)\n│     └─ (2,) X\n└─ repeat on (1, 2, 3)\n   └─ H\n\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.cache_key-Tuple{AbstractBlock}","page":"Blocks","title":"YaoBlocks.cache_key","text":"cache_key(block)\n\nReturns the key that identify the matrix cache of this block. By default, we use the returns of parameters as its key.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.cache_type-Tuple{Type{<:AbstractBlock}}","page":"Blocks","title":"YaoBlocks.cache_type","text":"cache_type(::Type) -> DataType\n\nReturn the element type that a CacheFragment will use.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.chain-Tuple{Int64}","page":"Blocks","title":"YaoBlocks.chain","text":"chain(n)\n\nReturn an empty ChainBlock which can be used like a list of blocks.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.chain-Tuple{}","page":"Blocks","title":"YaoBlocks.chain","text":"chain()\n\nReturn an lambda n->chain(n).\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.chain-Union{Tuple{Vararg{AbstractBlock{N}}}, Tuple{N}} where N","page":"Blocks","title":"YaoBlocks.chain","text":"chain(blocks...)\n\nReturn a ChainBlock which chains a list of blocks with same nqubits. If there is lazy evaluated block in blocks, chain can infer the number of qubits and create an instance itself.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.chmeasureoperator-Union{Tuple{N}, Tuple{Measure{N, K} where K, AbstractBlock}} where N","page":"Blocks","title":"YaoBlocks.chmeasureoperator","text":"chmeasureoperator(m::Measure, op::AbstractBlock)\n\nchange the measuring operator. It will also discard existing measuring results.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.cnot-Tuple{Int64, Any, Int64}","page":"Blocks","title":"YaoBlocks.cnot","text":"cnot([n, ]ctrl_locs, location)\n\nReturn a speical ControlBlock, aka CNOT gate with number of active qubits n and locs of control qubits ctrl_locs, and location of X gate.\n\nExample\n\njulia> cnot(3, (2, 3), 1)\nnqubits: 3\ncontrol(2, 3)\n└─ (1,) X\n\njulia> cnot(2, 1)\n(n -> cnot(n, 2, 1))\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.collect_blocks-Union{Tuple{T}, Tuple{Type{T}, AbstractBlock}} where T<:AbstractBlock","page":"Blocks","title":"YaoBlocks.collect_blocks","text":"collect_blocks(block_type, root)\n\nReturn a ChainBlock with all block of block_type in root.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.control-Tuple{Any, Pair}","page":"Blocks","title":"YaoBlocks.control","text":"control(ctrl_locs, target) -> f(n)\n\nReturn a lambda that takes the number of total active qubits as input. See also control.\n\nExample\n\njulia> control((2, 3), 1=>X)\n(n -> control(n, (2, 3), 1 => X))\n\njulia> control(2, 1=>X)\n(n -> control(n, 2, 1 => X))\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.control-Tuple{Int64, Any, Pair}","page":"Blocks","title":"YaoBlocks.control","text":"control(n, ctrl_locs, target)\n\nReturn a ControlBlock with number of active qubits n and control locs ctrl_locs, and control target in Pair.\n\nExample\n\njulia> control(4, (1, 2), 3=>X)\nnqubits: 4\ncontrol(1, 2)\n└─ (3,) X\n\njulia> control(4, 1, 3=>X)\nnqubits: 4\ncontrol(1)\n└─ (3,) X\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.control-Tuple{Pair}","page":"Blocks","title":"YaoBlocks.control","text":"control(target) -> f(ctrl_locs)\n\nReturn a lambda that takes a Tuple of control qubits locs as input. See also control.\n\nExample\n\njulia> control(1=>X)\n(ctrl_locs -> control(ctrl_locs, 1 => X))\n\njulia> control((2, 3) => YaoBlocks.ConstGate.CNOT)\n(ctrl_locs -> control(ctrl_locs, (2, 3) => CNOT))\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.control-Tuple{Vararg{Int64}}","page":"Blocks","title":"YaoBlocks.control","text":"control(ctrl_locs::Int...) -> f(target)\n\nReturn a lambda that takes a Pair of control target as input. See also control.\n\nExample\n\njulia> control(1, 2)\n(target -> control((1, 2), target))\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.cunmat","page":"Blocks","title":"YaoBlocks.cunmat","text":"cunmat(nbit::Int, cbits::NTuple{C, Int}, cvals::NTuple{C, Int}, U0::AbstractMatrix, locs::NTuple{M, Int}) where {C, M} -> AbstractMatrix\n\ncontrol-unitary matrix\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.cz-Tuple{Int64, Any, Int64}","page":"Blocks","title":"YaoBlocks.cz","text":"cz([n, ]ctrl_locs, location)\n\nReturn a speical ControlBlock, aka CZ gate with number of active qubits n and locs of control qubits ctrl_locs, and location of Z gate. See also cnot.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.decode_sign-Tuple{Vararg{Int64}}","page":"Blocks","title":"YaoBlocks.decode_sign","text":"decode_sign(ctrls...)\n\nDecode signs into control sequence on control or inversed control.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.dispatch-Tuple{Union{Nothing, Function}, AbstractBlock, Any}","page":"Blocks","title":"YaoBlocks.dispatch","text":"dispatch(x::AbstractBlock, collection)\n\nDispatch parameters in collection to block tree x, the generic non-inplace version.\n\nnote: Note\nit will try to dispatch the parameters in collection first.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.dump_gate","page":"Blocks","title":"YaoBlocks.dump_gate","text":"dump_gate(blk::AbstractBlock) -> Expr\n\nconvert a gate to a YaoScript expression for serization. The fallback is GateTypeName(fields...)\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.eigenbasis-Union{Tuple{AbstractBlock{N}}, Tuple{N}} where N","page":"Blocks","title":"YaoBlocks.eigenbasis","text":"eigenbasis(op::AbstractBlock{N})\n\nReturn the eigenvalue and eigenvectors of target operator. By applying eigenvector' to target state, one can swith the basis to the eigenbasis of this operator. However, eigenvalues does not have a specific form.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.gate_expr-Union{Tuple{G}, Tuple{Val{G}, Any, Any}} where G","page":"Blocks","title":"YaoBlocks.gate_expr","text":"gate_expr(::Val{G}, args, info)\n\nObtain the gate constructior from its YaoScript expression. G is a symbol for the gate type, the default constructor is G(args...). info contains the informations about the number of qubit and Yao version.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.getcol-Tuple{LuxurySparse.SDSparseMatrixCSC, Int64}","page":"Blocks","title":"YaoBlocks.getcol","text":"getcol(csc::SDparseMatrixCSC, icol::Int) -> (View, View)\n\nget specific col of a CSC matrix, returns a slice of (rowval, nzval)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.igate-Tuple{Int64}","page":"Blocks","title":"YaoBlocks.igate","text":"igate(n::Int)\n\nThe constructor for identity gate.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.map_address","page":"Blocks","title":"YaoBlocks.map_address","text":"map_address(block::AbstractBlock, info::AddressInfo) -> AbstractBlock\n\nmap the locations in block to target locations.\n\nExample\n\nmap_address can be used to embed a sub-circuit to a larger one.\n\njulia> c = chain(5, repeat(H, 1:5), put(2=>X), kron(1=>X, 3=>Y))\nnqubits: 5\nchain\n├─ repeat on (1, 2, 3, 4, 5)\n│  └─ H\n├─ put on (2)\n│  └─ X\n└─ kron\n   ├─ 1=>X\n   └─ 3=>Y\n\n\njulia> map_address(c, AddressInfo(10, [6,7,8,9,10]))\nnqubits: 10\nchain\n├─ repeat on (6, 7, 8, 9, 10)\n│  └─ H\n├─ put on (7)\n│  └─ X\n└─ kron\n   ├─ 6=>X\n   └─ 8=>Y\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.matblock-Tuple{AbstractBlock}","page":"Blocks","title":"YaoBlocks.matblock","text":"matblock(m::AbstractMatrix)\n\nCreate a GeneralMatrixBlock with a matrix m.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.matblock-Tuple{AbstractMatrix}","page":"Blocks","title":"YaoBlocks.matblock","text":"matblock(m::AbstractMatrix)\n\nCreate a GeneralMatrixBlock with a matrix m.\n\nExample\n\njulia> matblock(ComplexF64[0 1;1 0])\nmatblock(...)\n\n!!!warn\n\nInstead of converting it to the default data type `ComplexF64`,\nthis will return its contained matrix when calling `mat`.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.num_nonzero","page":"Blocks","title":"YaoBlocks.num_nonzero","text":"num_nonzero(nbits, nctrls, U, [N])\n\nReturn number of nonzero entries of the matrix form of control-U gate. nbits is the number of qubits, and nctrls is the number of control qubits.\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.parameters!-Tuple{Any, AbstractBlock}","page":"Blocks","title":"YaoBlocks.parameters!","text":"parameters!(out, block)\n\nAppend all the parameters contained in block tree with given root block to out.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.parameters_range-Tuple{AbstractBlock}","page":"Blocks","title":"YaoBlocks.parameters_range","text":"parameters_range(block)\n\nReturn the range of real parameters present in block.\n\nnote: Note\nIt may not be the case that length(parameters_range(block)) == nparameters(block).\n\nExample\n\njulia> parameters_range(RotationGate(X, 0.1))\nERROR: UndefVarError: parameters_range not defined\nStacktrace:\n [1] top-level scope\n   @ none:1\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.parse_block","page":"Blocks","title":"YaoBlocks.parse_block","text":"parse_block(n, ex)\n\nThis function parse the julia object ex to a quantum block, it defines the syntax of high level interfaces. ex can be a function takes number of qubits n as input or it can be a pair.\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.phase-Tuple{Real}","page":"Blocks","title":"YaoBlocks.phase","text":"phase(theta)\n\nReturns a global phase gate. Defined with following matrix form:\n\ne^iθ mathbfI\n\nExample\n\nYou can create a global phase gate with a phase (a real number).\n\njulia> phase(0.1)\nphase(0.1)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.popdispatch!-Tuple{AbstractBlock, Vector}","page":"Blocks","title":"YaoBlocks.popdispatch!","text":"popdispatch!(block, list)\n\nPop the first nparameters parameters of list, then dispatch them to the block tree block. See also dispatch!.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.popdispatch!-Tuple{Function, AbstractBlock, Vector}","page":"Blocks","title":"YaoBlocks.popdispatch!","text":"popdispatch!(f, block, list)\n\nPop the first nparameters parameters of list, map them with a function f, then dispatch them to the block tree block. See also dispatch!.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.postwalk-Tuple{Union{Function, Type}, AbstractBlock}","page":"Blocks","title":"YaoBlocks.postwalk","text":"postwalk(f, src::AbstractBlock)\n\nWalk the tree and call f after the children are visited.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.prewalk-Tuple{Union{Function, Type}, AbstractBlock}","page":"Blocks","title":"YaoBlocks.prewalk","text":"prewalk(f, src::AbstractBlock)\n\nWalk the tree and call f once the node is visited.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.print_annotation-Tuple{IO, Any, Any, Any, Any}","page":"Blocks","title":"YaoBlocks.print_annotation","text":"print_annotation(io, root, node, child, k)\n\nPrint the annotation of k-th child of node, aka the k-th element of subblocks(node).\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.print_prefix-Tuple{IO, Any, Any, Any}","page":"Blocks","title":"YaoBlocks.print_prefix","text":"print_prefix(io, depth, charset, active_levels)\n\nprint prefix of a tree node in a single line.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.print_subtypetree","page":"Blocks","title":"YaoBlocks.print_subtypetree","text":"print_subtypetree(::Type[, level=1, indent=4])\n\nPrint subtype tree, level specify the depth of the tree.\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.print_title-Tuple{IO, AbstractBlock}","page":"Blocks","title":"YaoBlocks.print_title","text":"print_title(io, block)\n\nPrint the title of given block of an AbstractBlock.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.print_tree","page":"Blocks","title":"YaoBlocks.print_tree","text":"print_tree(io, root, node[, depth=1, active_levels=()]; kwargs...)\n\nPrint the block tree.\n\nKeywords\n\nmaxdepth: max tree depth to print\ncharset: default is ('├','└','│','─'). See also BlockTreeCharSet.\ntitle: control whether to print the title, true or false, default is true\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.print_tree-Tuple{Any}","page":"Blocks","title":"YaoBlocks.print_tree","text":"print_tree([io=stdout], root)\n\nPrint the block tree.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.projector-Tuple{Any}","page":"Blocks","title":"YaoBlocks.projector","text":"projector(x)\n\nReturn projector on 0 or projector on 1.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.pswap-Tuple{Int64, Int64, Int64, Real}","page":"Blocks","title":"YaoBlocks.pswap","text":"pswap(n::Int, i::Int, j::Int, α::Real)\npswap(i::Int, j::Int, α::Real) -> f(n)\n\nparametrized swap gate.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.put-Tuple{Pair}","page":"Blocks","title":"YaoBlocks.put","text":"put(pair) -> f(n)\n\nLazy curried version of put.\n\nExample\n\njulia> put(1=>X)\n(n -> put(n, 1 => X))\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.put-Union{Tuple{M}, Tuple{Int64, Pair{Tuple{Vararg{Int64, M}}, <:AbstractBlock}}} where M","page":"Blocks","title":"YaoBlocks.put","text":"put(total::Int, pair)\n\nCreate a PutBlock with total number of active qubits, and a pair of location and block to put on.\n\nExample\n\njulia> put(4, 1=>X)\nnqubits: 4\nput on (1)\n└─ X\n\nIf you want to put a multi-qubit gate on specific locations, you need to write down all possible locations.\n\njulia> put(4, (1, 3)=>kron(X, Y))\nnqubits: 4\nput on (1, 3)\n└─ kron\n   ├─ 1=>X\n   └─ 2=>Y\n\nThe outter locations creates a scope which make it seems to be a contiguous two qubits for the block inside PutBlock.\n\ntips: Tips\nIt is better to use subroutine instead of put for large blocks, since put will use the matrix of its contents directly instead of making use of what's in it. put is more efficient for small blocks.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.rmlines-Tuple{Expr}","page":"Blocks","title":"YaoBlocks.rmlines","text":"rmlines(ex)\n\nRemove LineNumberNode from an Expr.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.rot-Tuple{AbstractBlock, Any}","page":"Blocks","title":"YaoBlocks.rot","text":"rot(U, theta)\n\nReturn a RotationGate on U axis.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.setcol!-Tuple{SparseArrays.SparseMatrixCSC, Int64, AbstractVector, Any}","page":"Blocks","title":"YaoBlocks.setcol!","text":"setcol!(csc::SparseMatrixCSC, icol::Int, rowval::AbstractVector, nzval) -> SparseMatrixCSC\n\nset specific col of a CSC matrix\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.setiparams","page":"Blocks","title":"YaoBlocks.setiparams","text":"setiparams([f], block, itr)\nsetiparams([f], block, params...)\n\nSet the parameters of block, the non-inplace version. When f is provided, set parameters of block to the value in collection mapped by f. iter can be an iterator or a symbol, the symbol can be :zero, :random.\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.shift-Tuple{Any}","page":"Blocks","title":"YaoBlocks.shift","text":"shift(θ)\n\nCreate a ShiftGate with phase θ.\n\nExample\n\njulia> shift(0.1)\nshift(0.1)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.simple_commute_eachother-Union{Tuple{Vector{<:AbstractBlock{N}}}, Tuple{N}} where N","page":"Blocks","title":"YaoBlocks.simple_commute_eachother","text":"Return true if operators commute to each other.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.subroutine-Tuple{AbstractBlock, Any}","page":"Blocks","title":"YaoBlocks.subroutine","text":"subroutine(block, locs) -> f(n)\n\nLazy curried version of subroutine.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.subroutine-Tuple{Int64, AbstractBlock, Any}","page":"Blocks","title":"YaoBlocks.subroutine","text":"subroutine(n, block, locs)\n\nCreate a Subroutine block with total number of current active qubits n, which concentrates given wire location together to length(locs) active qubits, and relax the concentration afterwards.\n\nExample\n\nSubroutine is equivalent to put a block on given position mathematically, but more efficient and convenient for large blocks.\n\njulia> r = rand_state(3)\nArrayReg{1, ComplexF64, Array...}\n    active qubits: 3/3\n\njulia> apply!(copy(r), subroutine(X, 1)) ≈ apply!(copy(r), put(1=>X))\ntrue\n\nIt works for in-contigious locs as well\n\njulia> r = rand_state(4)\nArrayReg{1, ComplexF64, Array...}\n    active qubits: 4/4\n\njulia> cc = subroutine(4, kron(X, Y), (1, 3))\nnqubits: 4\nSubroutine: (1, 3)\n└─ kron\n   ├─ 1=>X\n   └─ 2=>Y\n\njulia> pp = chain(4, put(1=>X), put(3=>Y))\nnqubits: 4\nchain\n├─ put on (1)\n│  └─ X\n└─ put on (3)\n   └─ Y\n\njulia> apply!(copy(r), cc) ≈ apply!(copy(r), pp)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.swap-Tuple{Int64, Int64, Int64}","page":"Blocks","title":"YaoBlocks.swap","text":"swap(n, loc1, loc2)\n\nCreate a n-qubit Swap gate which swap loc1 and loc2.\n\nExample\n\njulia> swap(4, 1, 2)\nnqubits: 4\nput on (1, 2)\n└─ SWAP\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.swap-Tuple{Int64, Int64}","page":"Blocks","title":"YaoBlocks.swap","text":"swap(loc1, loc2) -> f(n)\n\nCreate a lambda that takes the total number of active qubits as input. Lazy curried version of swap(n, loc1, loc2). See also Swap.\n\nExample\n\njulia> swap(1, 2)\n(n -> swap(n, 1, 2))\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.time_evolve-Tuple{AbstractBlock, Any}","page":"Blocks","title":"YaoBlocks.time_evolve","text":"TimeEvolution(H, dt[; tol::Real=1e-7])\n\nCreate a TimeEvolution block with Hamiltonian H and time step dt. The TimeEvolution block will use Krylove based expv to calculate time propagation.\n\nOptional keywords are tolerance tol (default is 1e-7) TimeEvolution block can also be used for imaginary time evolution if dt is complex.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.u1ij!","page":"Blocks","title":"YaoBlocks.u1ij!","text":"u1ij!(target, i, j, a, b, c, d)\n\nsingle u1 matrix into a target matrix.\n\nnote: Note\nFor coo, we take an additional parameter     * ptr: starting position to store new data.\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.unmat-Tuple{Int64, AbstractMatrix, Tuple{Vararg{T, N}} where {N, T}}","page":"Blocks","title":"YaoBlocks.unmat","text":"unmat(nbit::Int, U::AbstractMatrix, locs::NTuple) -> AbstractMatrix\n\nReturn the matrix representation of putting matrix at locs.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.@yao_str-Tuple{String}","page":"Blocks","title":"YaoBlocks.@yao_str","text":"@yao_str\nyao\"...\"\n\nThe mark up language for quantum circuit.\n\n\n\n\n\n","category":"macro"},{"location":"generated/quick-start/5.shor-9-code/index.html","page":"Shor's 9 qubit code","title":"Shor's 9 qubit code","text":"EditURL = \"https://github.com/QuantumBFS/Yao.jl/blob/master/docs/src/quick-start/5.shor-9-code/main.jl\"","category":"page"},{"location":"generated/quick-start/5.shor-9-code/index.html","page":"Shor's 9 qubit code","title":"Shor's 9 qubit code","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"generated/quick-start/5.shor-9-code/index.html#Shor's-9-qubit-code","page":"Shor's 9 qubit code","title":"Shor's 9 qubit code","text":"","category":"section"},{"location":"generated/quick-start/5.shor-9-code/index.html","page":"Shor's 9 qubit code","title":"Shor's 9 qubit code","text":"The well-known Shor's 9 qubit code can correct any single Pauli error, but it can also correct some other kinds of errors. Its circuit is shown as below (Image: shor-9-circuit) which can be constructed by the following code","category":"page"},{"location":"generated/quick-start/5.shor-9-code/index.html","page":"Shor's 9 qubit code","title":"Shor's 9 qubit code","text":"using Yao\nusing SymEngine\n\nshor(E) = chain(9,\n    # encode circuit\n    cnot(1, 4), cnot(1, 7),\n    put(1=>H), put(4=>H), put(7=>H),\n    cnot(1,2), cnot(1,3), cnot(4,5), cnot(4,6), cnot(7,8), cnot(7,9),\n    E, # the error\n    # decode circuit\n    cnot(1,2), cnot(1,3), cnot((2, 3), 1),\n    cnot(4,5), cnot(4,6), cnot((5, 6), 4),\n    cnot(7,8), cnot(7,9), cnot((8, 9), 7),\n    put(1=>H), put(4=>H), put(7=>H), cnot(1, 4), cnot(1, 7), cnot((4, 7), 1)\n)","category":"page"},{"location":"generated/quick-start/5.shor-9-code/index.html","page":"Shor's 9 qubit code","title":"Shor's 9 qubit code","text":"shor (generic function with 1 method)","category":"page"},{"location":"generated/quick-start/5.shor-9-code/index.html","page":"Shor's 9 qubit code","title":"Shor's 9 qubit code","text":"Now we can check whether it can correct a given error by doing symbolic computation on an arbitrary 1-qubit pure quantum state α0 + β1 and a specific weight-9 error.","category":"page"},{"location":"generated/quick-start/5.shor-9-code/index.html","page":"Shor's 9 qubit code","title":"Shor's 9 qubit code","text":"@vars α β\ns = α * ket\"0\" + β * ket\"1\" |> addbits!(8)\nE = kron(1=>X, 2=>Z, 3=>Z, 4=>X, 5=>Z, 6=>Z, 7=>X, 8=>Z, 9=>Z);\ns |> shor(E) |> partial_tr(2:9) |> expand","category":"page"},{"location":"generated/quick-start/5.shor-9-code/index.html","page":"Shor's 9 qubit code","title":"Shor's 9 qubit code","text":"(1.0 + 0.0*im)*α|0⟩ + (1.0 + 0.0*im)*β|1⟩","category":"page"},{"location":"generated/quick-start/5.shor-9-code/index.html","page":"Shor's 9 qubit code","title":"Shor's 9 qubit code","text":"","category":"page"},{"location":"generated/quick-start/5.shor-9-code/index.html","page":"Shor's 9 qubit code","title":"Shor's 9 qubit code","text":"This page was generated using Literate.jl.","category":"page"},{"location":"man/symbolic.html","page":"Symbolic Computation","title":"Symbolic Computation","text":"CurrentModule = YaoSym\nDocTestSetup = quote\n    using Yao\n    using Yao: YaoBase, YaoBlocks, YaoArrayRegister, YaoSym\n    using YaoBase\n    using YaoBlocks\n    using YaoArrayRegister\n    using YaoSym\nend","category":"page"},{"location":"man/symbolic.html#Symbolic-Computation","page":"Symbolic Computation","title":"Symbolic Computation","text":"","category":"section"},{"location":"man/symbolic.html","page":"Symbolic Computation","title":"Symbolic Computation","text":"Symbolic Computation support for Yao","category":"page"},{"location":"man/symbolic.html","page":"Symbolic Computation","title":"Symbolic Computation","text":"@ket_str\n@bra_str\n@vars\nszero_state","category":"page"},{"location":"man/symbolic.html#YaoSym.@ket_str","page":"Symbolic Computation","title":"YaoSym.@ket_str","text":"@ket_str\n\nCreate a ket register. See also @bra_str.\n\nExample\n\na symbolic quantum state can be created simply by\n\njulia> ket\"110\" + 2ket\"111\"\n|110⟩ + 2|111⟩\n\nqubits can be partially actived by focus!\n\njulia> ket\"100\" + ket\"111\" |> focus!(1:2)\n|100⟩ + |111⟩\n\n\n\n\n\n","category":"macro"},{"location":"man/symbolic.html#YaoSym.@bra_str","page":"Symbolic Computation","title":"YaoSym.@bra_str","text":"@bra_str\n\nCreate a bra register. See also @ket_str.\n\nExample\n\nSimilar to @ket_str literal, a symbolic quantum state can be created by\n\njulia> bra\"111\" + 2bra\"101\"\n2⟨101| + ⟨111|\n\njulia> bra\"111\" * (ket\"101\" + ket\"111\")\n1\n\n\n\n\n\n","category":"macro"},{"location":"man/symbolic.html#YaoSym.szero_state","page":"Symbolic Computation","title":"YaoSym.szero_state","text":"szero_state(n; nbatch=1)\n\nCreate a symbolic zero state, same as ket\"000\", but allows you use an integer.\n\n\n\n\n\n","category":"function"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"EditURL = \"<unknown>/docs/src/quick-start/1.prepare-ghz-state/main.jl\"","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html#example-ghz","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"","category":"section"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"First, you have to use this package in Julia.","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"using Yao","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"Now, we just define the circuit according to the circuit image below: (Image: ghz)","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"circuit = chain(\n    4,\n    put(1=>X),\n    repeat(H, 2:4),\n    control(2, 1=>X),\n    control(4, 3=>X),\n    control(3, 1=>X),\n    control(4, 3=>X),\n    repeat(H, 1:4),\n)","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"nqubits: 4\nchain\n├─ put on (1)\n│  └─ X\n├─ repeat on (2, 3, 4)\n│  └─ H\n├─ control(2)\n│  └─ (1,) X\n├─ control(4)\n│  └─ (3,) X\n├─ control(3)\n│  └─ (1,) X\n├─ control(4)\n│  └─ (3,) X\n└─ repeat on (1, 2, 3, 4)\n   └─ H\n","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"Let me explain what happens here.","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html#Put-single-qubit-gate-X-to-location-1","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Put single qubit gate X to location 1","text":"","category":"section"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"we have an X gate applied to the first qubit. We need to tell Yao to put this gate on the first qubit by","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"put(4, 1=>X)","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"nqubits: 4\nput on (1)\n└─ X","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"We use Julia's Pair to denote the gate and its location in the circuit, for two-qubit gate, you could also use a tuple of locations:","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"put(4, (1, 2)=>swap(2, 1, 2))","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"nqubits: 4\nput on (1, 2)\n└─ put on (1, 2)\n   └─ SWAP\n","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"But, wait, why there's no 4 in the definition above? This is because all the functions in Yao that requires to input the number of qubits as its first arguement could be lazy (curried), and let other constructors to infer the total number of qubits later, e.g","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"put(1=>X)","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"(n -> put(n, 1 => X))","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"which will return a lambda that ask for a single arguement n.","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"put(1=>X)(4)","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"nqubits: 4\nput on (1)\n└─ X","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html#Apply-the-same-gate-on-different-locations","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Apply the same gate on different locations","text":"","category":"section"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"next we should put Hadmard gates on all locations except the 1st qubits.","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"We provide repeat to apply the same block repeatly, repeat can take an iterator of desired locations, and like put, we can also leave the total number of qubits there.","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"repeat(H, 2:4)","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"(n -> repeat(n, H, 2:4...))","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html#Define-control-gates","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Define control gates","text":"","category":"section"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"In Yao, we could define controlled gates by feeding a gate to control","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"control(4, 2, 1=>X)","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"nqubits: 4\ncontrol(2)\n└─ (1,) X","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"Like many others, you could leave the number of total qubits there, and infer it later.","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"control(2, 1=>X)","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"(n -> control(n, 2, 1 => X))","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html#Composite-each-part-together","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Composite each part together","text":"","category":"section"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"This will create a ControlBlock, the concept of block in Yao basically just means quantum operators, since the quantum circuit itself is a quantum operator, we could create a quantum circuit by composite each part of.","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"Here, we use chain to chain each part together, a chain of quantum operators means to apply each operators one by one in the chain. This will create a ChainBlock.","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"circuit = chain(\n    4,\n    put(1=>X),\n    repeat(H, 2:4),\n    control(2, 1=>X),\n    control(4, 3=>X),\n    control(3, 1=>X),\n    control(4, 3=>X),\n    repeat(H, 1:4),\n)","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"nqubits: 4\nchain\n├─ put on (1)\n│  └─ X\n├─ repeat on (2, 3, 4)\n│  └─ H\n├─ control(2)\n│  └─ (1,) X\n├─ control(4)\n│  └─ (3,) X\n├─ control(3)\n│  └─ (1,) X\n├─ control(4)\n│  └─ (3,) X\n└─ repeat on (1, 2, 3, 4)\n   └─ H\n","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"You can check the type of it with typeof","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"typeof(circuit)","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"ChainBlock{4}","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html#Construct-GHZ-state-from-00...00","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Construct GHZ state from 00...00","text":"","category":"section"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"For simulation, we provide a builtin register type called ArrayReg, we will use the simulated register in this example.","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"First, let's create 0000, you can create it with zero_state","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"zero_state(4)","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"ArrayReg{1, ComplexF64, Array...}\n    active qubits: 4/4","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"Or we also provide bit string literals to create arbitrary eigen state","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"ArrayReg(bit\"0000\")","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"ArrayReg{1, ComplexF64, Array...}\n    active qubits: 4/4","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"They will both create a register with Julia's builtin Array as storage.","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html#Feed-Registers-to-Circuits","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Feed Registers to Circuits","text":"","category":"section"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"Circuits can be applied to registers with apply!","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"apply!(zero_state(4), circuit)","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"ArrayReg{1, ComplexF64, Array...}\n    active qubits: 4/4","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"or you can use pipe operator |>, when you want to chain several operations together, here we measure the state right after the circuit for 1000 times","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"results = zero_state(4) |> circuit |> r->measure(r, nshots=1000)\n\nusing StatsBase, Plots\n\nhist = fit(Histogram, Int.(results), 0:16)\nbar(hist.edges[1] .- 0.5, hist.weights, legend=:none)","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip750\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip750)\" d=\"\nM0 1600 L2400 1600 L2400 0 L0 0  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip751\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip750)\" d=\"\nM172.015 1486.45 L2352.76 1486.45 L2352.76 47.2441 L172.015 47.2441  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip752\">\n    <rect x=\"172\" y=\"47\" width=\"2182\" height=\"1440\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  341.095,1486.45 341.095,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  955.289,1486.45 955.289,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1569.48,1486.45 1569.48,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  2183.68,1486.45 2183.68,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  172.015,1486.45 2352.76,1486.45 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  341.095,1486.45 341.095,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  955.289,1486.45 955.289,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1569.48,1486.45 1569.48,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  2183.68,1486.45 2183.68,1467.55 \n  \"/>\n<path clip-path=\"url(#clip750)\" d=\"M341.095 1517.37 Q337.484 1517.37 335.655 1520.93 Q333.85 1524.47 333.85 1531.6 Q333.85 1538.71 335.655 1542.27 Q337.484 1545.82 341.095 1545.82 Q344.729 1545.82 346.535 1542.27 Q348.363 1538.71 348.363 1531.6 Q348.363 1524.47 346.535 1520.93 Q344.729 1517.37 341.095 1517.37 M341.095 1513.66 Q346.905 1513.66 349.961 1518.27 Q353.039 1522.85 353.039 1531.6 Q353.039 1540.33 349.961 1544.94 Q346.905 1549.52 341.095 1549.52 Q335.285 1549.52 332.206 1544.94 Q329.151 1540.33 329.151 1531.6 Q329.151 1522.85 332.206 1518.27 Q335.285 1513.66 341.095 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M945.566 1514.29 L963.923 1514.29 L963.923 1518.22 L949.849 1518.22 L949.849 1526.7 Q950.867 1526.35 951.886 1526.19 Q952.904 1526 953.923 1526 Q959.71 1526 963.089 1529.17 Q966.469 1532.34 966.469 1537.76 Q966.469 1543.34 962.997 1546.44 Q959.525 1549.52 953.205 1549.52 Q951.029 1549.52 948.761 1549.15 Q946.515 1548.78 944.108 1548.04 L944.108 1543.34 Q946.191 1544.47 948.414 1545.03 Q950.636 1545.58 953.113 1545.58 Q957.117 1545.58 959.455 1543.48 Q961.793 1541.37 961.793 1537.76 Q961.793 1534.15 959.455 1532.04 Q957.117 1529.94 953.113 1529.94 Q951.238 1529.94 949.363 1530.35 Q947.511 1530.77 945.566 1531.65 L945.566 1514.29 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1544.17 1544.91 L1551.81 1544.91 L1551.81 1518.55 L1543.5 1520.21 L1543.5 1515.95 L1551.76 1514.29 L1556.44 1514.29 L1556.44 1544.91 L1564.08 1544.91 L1564.08 1548.85 L1544.17 1548.85 L1544.17 1544.91 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1583.52 1517.37 Q1579.91 1517.37 1578.08 1520.93 Q1576.28 1524.47 1576.28 1531.6 Q1576.28 1538.71 1578.08 1542.27 Q1579.91 1545.82 1583.52 1545.82 Q1587.16 1545.82 1588.96 1542.27 Q1590.79 1538.71 1590.79 1531.6 Q1590.79 1524.47 1588.96 1520.93 Q1587.16 1517.37 1583.52 1517.37 M1583.52 1513.66 Q1589.33 1513.66 1592.39 1518.27 Q1595.47 1522.85 1595.47 1531.6 Q1595.47 1540.33 1592.39 1544.94 Q1589.33 1549.52 1583.52 1549.52 Q1577.71 1549.52 1574.63 1544.94 Q1571.58 1540.33 1571.58 1531.6 Q1571.58 1522.85 1574.63 1518.27 Q1577.71 1513.66 1583.52 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2158.86 1544.91 L2166.5 1544.91 L2166.5 1518.55 L2158.19 1520.21 L2158.19 1515.95 L2166.45 1514.29 L2171.13 1514.29 L2171.13 1544.91 L2178.77 1544.91 L2178.77 1548.85 L2158.86 1548.85 L2158.86 1544.91 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2188.26 1514.29 L2206.62 1514.29 L2206.62 1518.22 L2192.54 1518.22 L2192.54 1526.7 Q2193.56 1526.35 2194.58 1526.19 Q2195.6 1526 2196.62 1526 Q2202.4 1526 2205.78 1529.17 Q2209.16 1532.34 2209.16 1537.76 Q2209.16 1543.34 2205.69 1546.44 Q2202.22 1549.52 2195.9 1549.52 Q2193.72 1549.52 2191.45 1549.15 Q2189.21 1548.78 2186.8 1548.04 L2186.8 1543.34 Q2188.88 1544.47 2191.11 1545.03 Q2193.33 1545.58 2195.81 1545.58 Q2199.81 1545.58 2202.15 1543.48 Q2204.49 1541.37 2204.49 1537.76 Q2204.49 1534.15 2202.15 1532.04 Q2199.81 1529.94 2195.81 1529.94 Q2193.93 1529.94 2192.06 1530.35 Q2190.2 1530.77 2188.26 1531.65 L2188.26 1514.29 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  172.015,1445.72 2352.76,1445.72 \n  \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  172.015,1176.32 2352.76,1176.32 \n  \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  172.015,906.93 2352.76,906.93 \n  \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  172.015,637.537 2352.76,637.537 \n  \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  172.015,368.145 2352.76,368.145 \n  \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  172.015,98.752 2352.76,98.752 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  172.015,1486.45 172.015,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  172.015,1445.72 190.912,1445.72 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  172.015,1176.32 190.912,1176.32 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  172.015,906.93 190.912,906.93 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  172.015,637.537 190.912,637.537 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  172.015,368.145 190.912,368.145 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  172.015,98.752 190.912,98.752 \n  \"/>\n<path clip-path=\"url(#clip750)\" d=\"M124.07 1431.51 Q120.459 1431.51 118.631 1435.08 Q116.825 1438.62 116.825 1445.75 Q116.825 1452.86 118.631 1456.42 Q120.459 1459.96 124.07 1459.96 Q127.705 1459.96 129.51 1456.42 Q131.339 1452.86 131.339 1445.75 Q131.339 1438.62 129.51 1435.08 Q127.705 1431.51 124.07 1431.51 M124.07 1427.81 Q129.881 1427.81 132.936 1432.42 Q136.015 1437 136.015 1445.75 Q136.015 1454.48 132.936 1459.08 Q129.881 1463.67 124.07 1463.67 Q118.26 1463.67 115.182 1459.08 Q112.126 1454.48 112.126 1445.75 Q112.126 1437 115.182 1432.42 Q118.26 1427.81 124.07 1427.81 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M54.5569 1189.67 L62.1958 1189.67 L62.1958 1163.3 L53.8856 1164.97 L53.8856 1160.71 L62.1495 1159.04 L66.8254 1159.04 L66.8254 1189.67 L74.4642 1189.67 L74.4642 1193.6 L54.5569 1193.6 L54.5569 1189.67 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M93.9086 1162.12 Q90.2975 1162.12 88.4688 1165.69 Q86.6632 1169.23 86.6632 1176.36 Q86.6632 1183.46 88.4688 1187.03 Q90.2975 1190.57 93.9086 1190.57 Q97.5428 1190.57 99.3483 1187.03 Q101.177 1183.46 101.177 1176.36 Q101.177 1169.23 99.3483 1165.69 Q97.5428 1162.12 93.9086 1162.12 M93.9086 1158.42 Q99.7187 1158.42 102.774 1163.02 Q105.853 1167.61 105.853 1176.36 Q105.853 1185.08 102.774 1189.69 Q99.7187 1194.27 93.9086 1194.27 Q88.0984 1194.27 85.0197 1189.69 Q81.9642 1185.08 81.9642 1176.36 Q81.9642 1167.61 85.0197 1163.02 Q88.0984 1158.42 93.9086 1158.42 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M124.07 1162.12 Q120.459 1162.12 118.631 1165.69 Q116.825 1169.23 116.825 1176.36 Q116.825 1183.46 118.631 1187.03 Q120.459 1190.57 124.07 1190.57 Q127.705 1190.57 129.51 1187.03 Q131.339 1183.46 131.339 1176.36 Q131.339 1169.23 129.51 1165.69 Q127.705 1162.12 124.07 1162.12 M124.07 1158.42 Q129.881 1158.42 132.936 1163.02 Q136.015 1167.61 136.015 1176.36 Q136.015 1185.08 132.936 1189.69 Q129.881 1194.27 124.07 1194.27 Q118.26 1194.27 115.182 1189.69 Q112.126 1185.08 112.126 1176.36 Q112.126 1167.61 115.182 1163.02 Q118.26 1158.42 124.07 1158.42 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M57.7745 920.275 L74.0939 920.275 L74.0939 924.21 L52.1495 924.21 L52.1495 920.275 Q54.8115 917.52 59.3949 912.891 Q64.0013 908.238 65.1819 906.895 Q67.4272 904.372 68.3068 902.636 Q69.2096 900.877 69.2096 899.187 Q69.2096 896.433 67.2652 894.696 Q65.3439 892.96 62.2421 892.96 Q60.043 892.96 57.5893 893.724 Q55.1588 894.488 52.381 896.039 L52.381 891.317 Q55.2051 890.183 57.6588 889.604 Q60.1124 889.025 62.1495 889.025 Q67.5198 889.025 70.7142 891.71 Q73.9087 894.396 73.9087 898.886 Q73.9087 901.016 73.0985 902.937 Q72.3115 904.835 70.205 907.428 Q69.6263 908.099 66.5245 911.317 Q63.4226 914.511 57.7745 920.275 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M93.9086 892.729 Q90.2975 892.729 88.4688 896.294 Q86.6632 899.835 86.6632 906.965 Q86.6632 914.071 88.4688 917.636 Q90.2975 921.178 93.9086 921.178 Q97.5428 921.178 99.3483 917.636 Q101.177 914.071 101.177 906.965 Q101.177 899.835 99.3483 896.294 Q97.5428 892.729 93.9086 892.729 M93.9086 889.025 Q99.7187 889.025 102.774 893.632 Q105.853 898.215 105.853 906.965 Q105.853 915.692 102.774 920.298 Q99.7187 924.882 93.9086 924.882 Q88.0984 924.882 85.0197 920.298 Q81.9642 915.692 81.9642 906.965 Q81.9642 898.215 85.0197 893.632 Q88.0984 889.025 93.9086 889.025 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M124.07 892.729 Q120.459 892.729 118.631 896.294 Q116.825 899.835 116.825 906.965 Q116.825 914.071 118.631 917.636 Q120.459 921.178 124.07 921.178 Q127.705 921.178 129.51 917.636 Q131.339 914.071 131.339 906.965 Q131.339 899.835 129.51 896.294 Q127.705 892.729 124.07 892.729 M124.07 889.025 Q129.881 889.025 132.936 893.632 Q136.015 898.215 136.015 906.965 Q136.015 915.692 132.936 920.298 Q129.881 924.882 124.07 924.882 Q118.26 924.882 115.182 920.298 Q112.126 915.692 112.126 906.965 Q112.126 898.215 115.182 893.632 Q118.26 889.025 124.07 889.025 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M67.9133 636.183 Q71.2698 636.901 73.1448 639.169 Q75.0429 641.438 75.0429 644.771 Q75.0429 649.887 71.5244 652.688 Q68.0059 655.489 61.5245 655.489 Q59.3486 655.489 57.0338 655.049 Q54.7421 654.632 52.2884 653.776 L52.2884 649.262 Q54.2328 650.396 56.5477 650.975 Q58.8625 651.554 61.3856 651.554 Q65.7837 651.554 68.0754 649.817 Q70.3902 648.081 70.3902 644.771 Q70.3902 641.716 68.2374 640.003 Q66.1078 638.267 62.2884 638.267 L58.2606 638.267 L58.2606 634.424 L62.4735 634.424 Q65.9226 634.424 67.7513 633.058 Q69.58 631.669 69.58 629.077 Q69.58 626.415 67.6819 625.003 Q65.8069 623.568 62.2884 623.568 Q60.3671 623.568 58.168 623.984 Q55.969 624.401 53.3301 625.281 L53.3301 621.114 Q55.9921 620.373 58.3069 620.003 Q60.6449 619.632 62.705 619.632 Q68.0291 619.632 71.1309 622.063 Q74.2327 624.47 74.2327 628.591 Q74.2327 631.461 72.5892 633.452 Q70.9457 635.419 67.9133 636.183 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M93.9086 623.336 Q90.2975 623.336 88.4688 626.901 Q86.6632 630.443 86.6632 637.572 Q86.6632 644.679 88.4688 648.243 Q90.2975 651.785 93.9086 651.785 Q97.5428 651.785 99.3483 648.243 Q101.177 644.679 101.177 637.572 Q101.177 630.443 99.3483 626.901 Q97.5428 623.336 93.9086 623.336 M93.9086 619.632 Q99.7187 619.632 102.774 624.239 Q105.853 628.822 105.853 637.572 Q105.853 646.299 102.774 650.905 Q99.7187 655.489 93.9086 655.489 Q88.0984 655.489 85.0197 650.905 Q81.9642 646.299 81.9642 637.572 Q81.9642 628.822 85.0197 624.239 Q88.0984 619.632 93.9086 619.632 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M124.07 623.336 Q120.459 623.336 118.631 626.901 Q116.825 630.443 116.825 637.572 Q116.825 644.679 118.631 648.243 Q120.459 651.785 124.07 651.785 Q127.705 651.785 129.51 648.243 Q131.339 644.679 131.339 637.572 Q131.339 630.443 129.51 626.901 Q127.705 623.336 124.07 623.336 M124.07 619.632 Q129.881 619.632 132.936 624.239 Q136.015 628.822 136.015 637.572 Q136.015 646.299 132.936 650.905 Q129.881 655.489 124.07 655.489 Q118.26 655.489 115.182 650.905 Q112.126 646.299 112.126 637.572 Q112.126 628.822 115.182 624.239 Q118.26 619.632 124.07 619.632 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M66.5939 354.939 L54.7884 373.388 L66.5939 373.388 L66.5939 354.939 M65.367 350.865 L71.2466 350.865 L71.2466 373.388 L76.1772 373.388 L76.1772 377.277 L71.2466 377.277 L71.2466 385.425 L66.5939 385.425 L66.5939 377.277 L50.9921 377.277 L50.9921 372.763 L65.367 350.865 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M93.9086 353.943 Q90.2975 353.943 88.4688 357.508 Q86.6632 361.05 86.6632 368.179 Q86.6632 375.286 88.4688 378.851 Q90.2975 382.392 93.9086 382.392 Q97.5428 382.392 99.3483 378.851 Q101.177 375.286 101.177 368.179 Q101.177 361.05 99.3483 357.508 Q97.5428 353.943 93.9086 353.943 M93.9086 350.24 Q99.7187 350.24 102.774 354.846 Q105.853 359.429 105.853 368.179 Q105.853 376.906 102.774 381.513 Q99.7187 386.096 93.9086 386.096 Q88.0984 386.096 85.0197 381.513 Q81.9642 376.906 81.9642 368.179 Q81.9642 359.429 85.0197 354.846 Q88.0984 350.24 93.9086 350.24 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M124.07 353.943 Q120.459 353.943 118.631 357.508 Q116.825 361.05 116.825 368.179 Q116.825 375.286 118.631 378.851 Q120.459 382.392 124.07 382.392 Q127.705 382.392 129.51 378.851 Q131.339 375.286 131.339 368.179 Q131.339 361.05 129.51 357.508 Q127.705 353.943 124.07 353.943 M124.07 350.24 Q129.881 350.24 132.936 354.846 Q136.015 359.429 136.015 368.179 Q136.015 376.906 132.936 381.513 Q129.881 386.096 124.07 386.096 Q118.26 386.096 115.182 381.513 Q112.126 376.906 112.126 368.179 Q112.126 359.429 115.182 354.846 Q118.26 350.24 124.07 350.24 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M53.793 81.472 L72.1494 81.472 L72.1494 85.4072 L58.0754 85.4072 L58.0754 93.8793 Q59.0939 93.5321 60.1124 93.3701 Q61.131 93.1849 62.1495 93.1849 Q67.9365 93.1849 71.3161 96.3562 Q74.6957 99.5274 74.6957 104.944 Q74.6957 110.523 71.2235 113.625 Q67.7513 116.703 61.4319 116.703 Q59.256 116.703 56.9875 116.333 Q54.7421 115.963 52.3347 115.222 L52.3347 110.523 Q54.418 111.657 56.6402 112.213 Q58.8625 112.768 61.3393 112.768 Q65.3439 112.768 67.6819 110.662 Q70.0198 108.555 70.0198 104.944 Q70.0198 101.333 67.6819 99.2265 Q65.3439 97.1201 61.3393 97.1201 Q59.4643 97.1201 57.5893 97.5367 Q55.7375 97.9534 53.793 98.833 L53.793 81.472 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M93.9086 84.5507 Q90.2975 84.5507 88.4688 88.1155 Q86.6632 91.6571 86.6632 98.7867 Q86.6632 105.893 88.4688 109.458 Q90.2975 113 93.9086 113 Q97.5428 113 99.3483 109.458 Q101.177 105.893 101.177 98.7867 Q101.177 91.6571 99.3483 88.1155 Q97.5428 84.5507 93.9086 84.5507 M93.9086 80.847 Q99.7187 80.847 102.774 85.4534 Q105.853 90.0368 105.853 98.7867 Q105.853 107.514 102.774 112.12 Q99.7187 116.703 93.9086 116.703 Q88.0984 116.703 85.0197 112.12 Q81.9642 107.514 81.9642 98.7867 Q81.9642 90.0368 85.0197 85.4534 Q88.0984 80.847 93.9086 80.847 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M124.07 84.5507 Q120.459 84.5507 118.631 88.1155 Q116.825 91.6571 116.825 98.7867 Q116.825 105.893 118.631 109.458 Q120.459 113 124.07 113 Q127.705 113 129.51 109.458 Q131.339 105.893 131.339 98.7867 Q131.339 91.6571 129.51 88.1155 Q127.705 84.5507 124.07 84.5507 M124.07 80.847 Q129.881 80.847 132.936 85.4534 Q136.015 90.0368 136.015 98.7867 Q136.015 107.514 132.936 112.12 Q129.881 116.703 124.07 116.703 Q118.26 116.703 115.182 112.12 Q112.126 107.514 112.126 98.7867 Q112.126 90.0368 115.182 85.4534 Q118.26 80.847 124.07 80.847 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip752)\" d=\"\nM291.959 109.528 L291.959 1445.72 L390.23 1445.72 L390.23 109.528 L291.959 109.528 L291.959 109.528  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  291.959,109.528 291.959,1445.72 390.23,1445.72 390.23,109.528 291.959,109.528 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM414.798 1445.72 L414.798 1445.72 L513.069 1445.72 L513.069 1445.72 L414.798 1445.72 L414.798 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  414.798,1445.72 414.798,1445.72 513.069,1445.72 414.798,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM537.637 1445.72 L537.637 1445.72 L635.908 1445.72 L635.908 1445.72 L537.637 1445.72 L537.637 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  537.637,1445.72 537.637,1445.72 635.908,1445.72 537.637,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM660.476 1445.72 L660.476 1445.72 L758.747 1445.72 L758.747 1445.72 L660.476 1445.72 L660.476 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  660.476,1445.72 660.476,1445.72 758.747,1445.72 660.476,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM783.314 1445.72 L783.314 1445.72 L881.585 1445.72 L881.585 1445.72 L783.314 1445.72 L783.314 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  783.314,1445.72 783.314,1445.72 881.585,1445.72 783.314,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM906.153 1445.72 L906.153 1445.72 L1004.42 1445.72 L1004.42 1445.72 L906.153 1445.72 L906.153 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  906.153,1445.72 906.153,1445.72 1004.42,1445.72 906.153,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM1028.99 1445.72 L1028.99 1445.72 L1127.26 1445.72 L1127.26 1445.72 L1028.99 1445.72 L1028.99 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1028.99,1445.72 1028.99,1445.72 1127.26,1445.72 1028.99,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM1151.83 1445.72 L1151.83 1445.72 L1250.1 1445.72 L1250.1 1445.72 L1151.83 1445.72 L1151.83 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1151.83,1445.72 1151.83,1445.72 1250.1,1445.72 1151.83,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM1274.67 1445.72 L1274.67 1445.72 L1372.94 1445.72 L1372.94 1445.72 L1274.67 1445.72 L1274.67 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1274.67,1445.72 1274.67,1445.72 1372.94,1445.72 1274.67,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM1397.51 1445.72 L1397.51 1445.72 L1495.78 1445.72 L1495.78 1445.72 L1397.51 1445.72 L1397.51 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1397.51,1445.72 1397.51,1445.72 1495.78,1445.72 1397.51,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM1520.35 1445.72 L1520.35 1445.72 L1618.62 1445.72 L1618.62 1445.72 L1520.35 1445.72 L1520.35 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1520.35,1445.72 1520.35,1445.72 1618.62,1445.72 1520.35,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM1643.19 1445.72 L1643.19 1445.72 L1741.46 1445.72 L1741.46 1445.72 L1643.19 1445.72 L1643.19 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1643.19,1445.72 1643.19,1445.72 1741.46,1445.72 1643.19,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM1766.02 1445.72 L1766.02 1445.72 L1864.3 1445.72 L1864.3 1445.72 L1766.02 1445.72 L1766.02 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1766.02,1445.72 1766.02,1445.72 1864.3,1445.72 1766.02,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM1888.86 1445.72 L1888.86 1445.72 L1987.13 1445.72 L1987.13 1445.72 L1888.86 1445.72 L1888.86 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1888.86,1445.72 1888.86,1445.72 1987.13,1445.72 1888.86,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM2011.7 1445.72 L2011.7 1445.72 L2109.97 1445.72 L2109.97 1445.72 L2011.7 1445.72 L2011.7 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  2011.7,1445.72 2011.7,1445.72 2109.97,1445.72 2011.7,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM2134.54 87.9763 L2134.54 1445.72 L2232.81 1445.72 L2232.81 87.9763 L2134.54 87.9763 L2134.54 87.9763  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  2134.54,87.9763 2134.54,1445.72 2232.81,1445.72 2232.81,87.9763 2134.54,87.9763 \n  \"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"279.676\" cy=\"109.528\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"402.514\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"525.353\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"648.192\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"771.03\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"893.869\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1016.71\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1139.55\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1262.39\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1385.22\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1508.06\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1630.9\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1753.74\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1876.58\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1999.42\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"2122.26\" cy=\"87.9763\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"2245.1\" cy=\"109.528\" r=\"2\"/>\n</svg>\n","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"GHZ state will collapse to 0000 or 1111.","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"","category":"page"},{"location":"generated/quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"This page was generated using Literate.jl.","category":"page"},{"location":"dev/index.html#Developer-Notes","page":"Developer Notes","title":"Developer Notes","text":"","category":"section"},{"location":"dev/index.html#Overview-of-the-Architecture","page":"Developer Notes","title":"Overview of the Architecture","text":"","category":"section"},{"location":"dev/index.html","page":"Developer Notes","title":"Developer Notes","text":"The following is an overview of the entire ecosystem, where Yao and CuYao are two meta-packages.","category":"page"},{"location":"dev/index.html","page":"Developer Notes","title":"Developer Notes","text":"(Image: stack)","category":"page"},{"location":"dev/index.html#The-role-of-QBIR","page":"Developer Notes","title":"The role of QBIR","text":"","category":"section"},{"location":"dev/index.html","page":"Developer Notes","title":"Developer Notes","text":"Currently the main functionality is built on the Quantum Block Intermediate Representation (QBIR). A quantum program is defined by QBIR and then interpreted to different targets, such as different simulation backend or matrix representation.","category":"page"},{"location":"dev/index.html","page":"Developer Notes","title":"Developer Notes","text":"(Image: framework)","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"EditURL = \"<unknown>/docs/src/quick-start/1.prepare-ghz-state/main.jl\"","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html#example-ghz","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"","category":"section"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"First, you have to use this package in Julia.","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"using Yao","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"Now, we just define the circuit according to the circuit image below: (Image: ghz)","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"circuit = chain(\n    4,\n    put(1=>X),\n    repeat(H, 2:4),\n    control(2, 1=>X),\n    control(4, 3=>X),\n    control(3, 1=>X),\n    control(4, 3=>X),\n    repeat(H, 1:4),\n)","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"nqubits: 4\nchain\n├─ put on (1)\n│  └─ X\n├─ repeat on (2, 3, 4)\n│  └─ H\n├─ control(2)\n│  └─ (1,) X\n├─ control(4)\n│  └─ (3,) X\n├─ control(3)\n│  └─ (1,) X\n├─ control(4)\n│  └─ (3,) X\n└─ repeat on (1, 2, 3, 4)\n   └─ H\n","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"Let me explain what happens here.","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html#Put-single-qubit-gate-X-to-location-1","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Put single qubit gate X to location 1","text":"","category":"section"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"we have an X gate applied to the first qubit. We need to tell Yao to put this gate on the first qubit by","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"put(4, 1=>X)","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"nqubits: 4\nput on (1)\n└─ X","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"We use Julia's Pair to denote the gate and its location in the circuit, for two-qubit gate, you could also use a tuple of locations:","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"put(4, (1, 2)=>swap(2, 1, 2))","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"nqubits: 4\nput on (1, 2)\n└─ put on (1, 2)\n   └─ SWAP\n","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"But, wait, why there's no 4 in the definition above? This is because all the functions in Yao that requires to input the number of qubits as its first arguement could be lazy (curried), and let other constructors to infer the total number of qubits later, e.g","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"put(1=>X)","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"(n -> put(n, 1 => X))","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"which will return a lambda that ask for a single arguement n.","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"put(1=>X)(4)","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"nqubits: 4\nput on (1)\n└─ X","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html#Apply-the-same-gate-on-different-locations","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Apply the same gate on different locations","text":"","category":"section"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"next we should put Hadmard gates on all locations except the 1st qubits.","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"We provide repeat to apply the same block repeatly, repeat can take an iterator of desired locations, and like put, we can also leave the total number of qubits there.","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"repeat(H, 2:4)","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"(n -> repeat(n, H, 2:4...))","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html#Define-control-gates","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Define control gates","text":"","category":"section"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"In Yao, we could define controlled gates by feeding a gate to control","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"control(4, 2, 1=>X)","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"nqubits: 4\ncontrol(2)\n└─ (1,) X","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"Like many others, you could leave the number of total qubits there, and infer it later.","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"control(2, 1=>X)","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"(n -> control(n, 2, 1 => X))","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html#Composite-each-part-together","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Composite each part together","text":"","category":"section"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"This will create a ControlBlock, the concept of block in Yao basically just means quantum operators, since the quantum circuit itself is a quantum operator, we could create a quantum circuit by composite each part of.","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"Here, we use chain to chain each part together, a chain of quantum operators means to apply each operators one by one in the chain. This will create a ChainBlock.","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"circuit = chain(\n    4,\n    put(1=>X),\n    repeat(H, 2:4),\n    control(2, 1=>X),\n    control(4, 3=>X),\n    control(3, 1=>X),\n    control(4, 3=>X),\n    repeat(H, 1:4),\n)","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"nqubits: 4\nchain\n├─ put on (1)\n│  └─ X\n├─ repeat on (2, 3, 4)\n│  └─ H\n├─ control(2)\n│  └─ (1,) X\n├─ control(4)\n│  └─ (3,) X\n├─ control(3)\n│  └─ (1,) X\n├─ control(4)\n│  └─ (3,) X\n└─ repeat on (1, 2, 3, 4)\n   └─ H\n","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"You can check the type of it with typeof","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"typeof(circuit)","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"ChainBlock{4}","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html#Construct-GHZ-state-from-00...00","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Construct GHZ state from 00...00","text":"","category":"section"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"For simulation, we provide a builtin register type called ArrayReg, we will use the simulated register in this example.","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"First, let's create 0000, you can create it with zero_state","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"zero_state(4)","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"ArrayReg{1, ComplexF64, Array...}\n    active qubits: 4/4","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"Or we also provide bit string literals to create arbitrary eigen state","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"ArrayReg(bit\"0000\")","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"ArrayReg{1, ComplexF64, Array...}\n    active qubits: 4/4","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"They will both create a register with Julia's builtin Array as storage.","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html#Feed-Registers-to-Circuits","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Feed Registers to Circuits","text":"","category":"section"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"Circuits can be applied to registers with apply!","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"apply!(zero_state(4), circuit)","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"ArrayReg{1, ComplexF64, Array...}\n    active qubits: 4/4","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"or you can use pipe operator |>, when you want to chain several operations together, here we measure the state right after the circuit for 1000 times","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"results = zero_state(4) |> circuit |> r->measure(r, nshots=1000)\n\nusing StatsBase, Plots\n\nhist = fit(Histogram, Int.(results), 0:16)\nbar(hist.edges[1] .- 0.5, hist.weights, legend=:none)","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip750\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip750)\" d=\"\nM0 1600 L2400 1600 L2400 0 L0 0  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip751\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip750)\" d=\"\nM172.015 1486.45 L2352.76 1486.45 L2352.76 47.2441 L172.015 47.2441  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip752\">\n    <rect x=\"172\" y=\"47\" width=\"2182\" height=\"1440\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  341.095,1486.45 341.095,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  955.289,1486.45 955.289,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1569.48,1486.45 1569.48,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  2183.68,1486.45 2183.68,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  172.015,1486.45 2352.76,1486.45 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  341.095,1486.45 341.095,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  955.289,1486.45 955.289,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1569.48,1486.45 1569.48,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  2183.68,1486.45 2183.68,1467.55 \n  \"/>\n<path clip-path=\"url(#clip750)\" d=\"M341.095 1517.37 Q337.484 1517.37 335.655 1520.93 Q333.85 1524.47 333.85 1531.6 Q333.85 1538.71 335.655 1542.27 Q337.484 1545.82 341.095 1545.82 Q344.729 1545.82 346.535 1542.27 Q348.363 1538.71 348.363 1531.6 Q348.363 1524.47 346.535 1520.93 Q344.729 1517.37 341.095 1517.37 M341.095 1513.66 Q346.905 1513.66 349.961 1518.27 Q353.039 1522.85 353.039 1531.6 Q353.039 1540.33 349.961 1544.94 Q346.905 1549.52 341.095 1549.52 Q335.285 1549.52 332.206 1544.94 Q329.151 1540.33 329.151 1531.6 Q329.151 1522.85 332.206 1518.27 Q335.285 1513.66 341.095 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M945.566 1514.29 L963.923 1514.29 L963.923 1518.22 L949.849 1518.22 L949.849 1526.7 Q950.867 1526.35 951.886 1526.19 Q952.904 1526 953.923 1526 Q959.71 1526 963.089 1529.17 Q966.469 1532.34 966.469 1537.76 Q966.469 1543.34 962.997 1546.44 Q959.525 1549.52 953.205 1549.52 Q951.029 1549.52 948.761 1549.15 Q946.515 1548.78 944.108 1548.04 L944.108 1543.34 Q946.191 1544.47 948.414 1545.03 Q950.636 1545.58 953.113 1545.58 Q957.117 1545.58 959.455 1543.48 Q961.793 1541.37 961.793 1537.76 Q961.793 1534.15 959.455 1532.04 Q957.117 1529.94 953.113 1529.94 Q951.238 1529.94 949.363 1530.35 Q947.511 1530.77 945.566 1531.65 L945.566 1514.29 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1544.17 1544.91 L1551.81 1544.91 L1551.81 1518.55 L1543.5 1520.21 L1543.5 1515.95 L1551.76 1514.29 L1556.44 1514.29 L1556.44 1544.91 L1564.08 1544.91 L1564.08 1548.85 L1544.17 1548.85 L1544.17 1544.91 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1583.52 1517.37 Q1579.91 1517.37 1578.08 1520.93 Q1576.28 1524.47 1576.28 1531.6 Q1576.28 1538.71 1578.08 1542.27 Q1579.91 1545.82 1583.52 1545.82 Q1587.16 1545.82 1588.96 1542.27 Q1590.79 1538.71 1590.79 1531.6 Q1590.79 1524.47 1588.96 1520.93 Q1587.16 1517.37 1583.52 1517.37 M1583.52 1513.66 Q1589.33 1513.66 1592.39 1518.27 Q1595.47 1522.85 1595.47 1531.6 Q1595.47 1540.33 1592.39 1544.94 Q1589.33 1549.52 1583.52 1549.52 Q1577.71 1549.52 1574.63 1544.94 Q1571.58 1540.33 1571.58 1531.6 Q1571.58 1522.85 1574.63 1518.27 Q1577.71 1513.66 1583.52 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2158.86 1544.91 L2166.5 1544.91 L2166.5 1518.55 L2158.19 1520.21 L2158.19 1515.95 L2166.45 1514.29 L2171.13 1514.29 L2171.13 1544.91 L2178.77 1544.91 L2178.77 1548.85 L2158.86 1548.85 L2158.86 1544.91 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2188.26 1514.29 L2206.62 1514.29 L2206.62 1518.22 L2192.54 1518.22 L2192.54 1526.7 Q2193.56 1526.35 2194.58 1526.19 Q2195.6 1526 2196.62 1526 Q2202.4 1526 2205.78 1529.17 Q2209.16 1532.34 2209.16 1537.76 Q2209.16 1543.34 2205.69 1546.44 Q2202.22 1549.52 2195.9 1549.52 Q2193.72 1549.52 2191.45 1549.15 Q2189.21 1548.78 2186.8 1548.04 L2186.8 1543.34 Q2188.88 1544.47 2191.11 1545.03 Q2193.33 1545.58 2195.81 1545.58 Q2199.81 1545.58 2202.15 1543.48 Q2204.49 1541.37 2204.49 1537.76 Q2204.49 1534.15 2202.15 1532.04 Q2199.81 1529.94 2195.81 1529.94 Q2193.93 1529.94 2192.06 1530.35 Q2190.2 1530.77 2188.26 1531.65 L2188.26 1514.29 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  172.015,1445.72 2352.76,1445.72 \n  \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  172.015,1176.32 2352.76,1176.32 \n  \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  172.015,906.93 2352.76,906.93 \n  \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  172.015,637.537 2352.76,637.537 \n  \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  172.015,368.145 2352.76,368.145 \n  \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  172.015,98.752 2352.76,98.752 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  172.015,1486.45 172.015,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  172.015,1445.72 190.912,1445.72 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  172.015,1176.32 190.912,1176.32 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  172.015,906.93 190.912,906.93 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  172.015,637.537 190.912,637.537 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  172.015,368.145 190.912,368.145 \n  \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  172.015,98.752 190.912,98.752 \n  \"/>\n<path clip-path=\"url(#clip750)\" d=\"M124.07 1431.51 Q120.459 1431.51 118.631 1435.08 Q116.825 1438.62 116.825 1445.75 Q116.825 1452.86 118.631 1456.42 Q120.459 1459.96 124.07 1459.96 Q127.705 1459.96 129.51 1456.42 Q131.339 1452.86 131.339 1445.75 Q131.339 1438.62 129.51 1435.08 Q127.705 1431.51 124.07 1431.51 M124.07 1427.81 Q129.881 1427.81 132.936 1432.42 Q136.015 1437 136.015 1445.75 Q136.015 1454.48 132.936 1459.08 Q129.881 1463.67 124.07 1463.67 Q118.26 1463.67 115.182 1459.08 Q112.126 1454.48 112.126 1445.75 Q112.126 1437 115.182 1432.42 Q118.26 1427.81 124.07 1427.81 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M54.5569 1189.67 L62.1958 1189.67 L62.1958 1163.3 L53.8856 1164.97 L53.8856 1160.71 L62.1495 1159.04 L66.8254 1159.04 L66.8254 1189.67 L74.4642 1189.67 L74.4642 1193.6 L54.5569 1193.6 L54.5569 1189.67 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M93.9086 1162.12 Q90.2975 1162.12 88.4688 1165.69 Q86.6632 1169.23 86.6632 1176.36 Q86.6632 1183.46 88.4688 1187.03 Q90.2975 1190.57 93.9086 1190.57 Q97.5428 1190.57 99.3483 1187.03 Q101.177 1183.46 101.177 1176.36 Q101.177 1169.23 99.3483 1165.69 Q97.5428 1162.12 93.9086 1162.12 M93.9086 1158.42 Q99.7187 1158.42 102.774 1163.02 Q105.853 1167.61 105.853 1176.36 Q105.853 1185.08 102.774 1189.69 Q99.7187 1194.27 93.9086 1194.27 Q88.0984 1194.27 85.0197 1189.69 Q81.9642 1185.08 81.9642 1176.36 Q81.9642 1167.61 85.0197 1163.02 Q88.0984 1158.42 93.9086 1158.42 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M124.07 1162.12 Q120.459 1162.12 118.631 1165.69 Q116.825 1169.23 116.825 1176.36 Q116.825 1183.46 118.631 1187.03 Q120.459 1190.57 124.07 1190.57 Q127.705 1190.57 129.51 1187.03 Q131.339 1183.46 131.339 1176.36 Q131.339 1169.23 129.51 1165.69 Q127.705 1162.12 124.07 1162.12 M124.07 1158.42 Q129.881 1158.42 132.936 1163.02 Q136.015 1167.61 136.015 1176.36 Q136.015 1185.08 132.936 1189.69 Q129.881 1194.27 124.07 1194.27 Q118.26 1194.27 115.182 1189.69 Q112.126 1185.08 112.126 1176.36 Q112.126 1167.61 115.182 1163.02 Q118.26 1158.42 124.07 1158.42 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M57.7745 920.275 L74.0939 920.275 L74.0939 924.21 L52.1495 924.21 L52.1495 920.275 Q54.8115 917.52 59.3949 912.891 Q64.0013 908.238 65.1819 906.895 Q67.4272 904.372 68.3068 902.636 Q69.2096 900.877 69.2096 899.187 Q69.2096 896.433 67.2652 894.696 Q65.3439 892.96 62.2421 892.96 Q60.043 892.96 57.5893 893.724 Q55.1588 894.488 52.381 896.039 L52.381 891.317 Q55.2051 890.183 57.6588 889.604 Q60.1124 889.025 62.1495 889.025 Q67.5198 889.025 70.7142 891.71 Q73.9087 894.396 73.9087 898.886 Q73.9087 901.016 73.0985 902.937 Q72.3115 904.835 70.205 907.428 Q69.6263 908.099 66.5245 911.317 Q63.4226 914.511 57.7745 920.275 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M93.9086 892.729 Q90.2975 892.729 88.4688 896.294 Q86.6632 899.835 86.6632 906.965 Q86.6632 914.071 88.4688 917.636 Q90.2975 921.178 93.9086 921.178 Q97.5428 921.178 99.3483 917.636 Q101.177 914.071 101.177 906.965 Q101.177 899.835 99.3483 896.294 Q97.5428 892.729 93.9086 892.729 M93.9086 889.025 Q99.7187 889.025 102.774 893.632 Q105.853 898.215 105.853 906.965 Q105.853 915.692 102.774 920.298 Q99.7187 924.882 93.9086 924.882 Q88.0984 924.882 85.0197 920.298 Q81.9642 915.692 81.9642 906.965 Q81.9642 898.215 85.0197 893.632 Q88.0984 889.025 93.9086 889.025 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M124.07 892.729 Q120.459 892.729 118.631 896.294 Q116.825 899.835 116.825 906.965 Q116.825 914.071 118.631 917.636 Q120.459 921.178 124.07 921.178 Q127.705 921.178 129.51 917.636 Q131.339 914.071 131.339 906.965 Q131.339 899.835 129.51 896.294 Q127.705 892.729 124.07 892.729 M124.07 889.025 Q129.881 889.025 132.936 893.632 Q136.015 898.215 136.015 906.965 Q136.015 915.692 132.936 920.298 Q129.881 924.882 124.07 924.882 Q118.26 924.882 115.182 920.298 Q112.126 915.692 112.126 906.965 Q112.126 898.215 115.182 893.632 Q118.26 889.025 124.07 889.025 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M67.9133 636.183 Q71.2698 636.901 73.1448 639.169 Q75.0429 641.438 75.0429 644.771 Q75.0429 649.887 71.5244 652.688 Q68.0059 655.489 61.5245 655.489 Q59.3486 655.489 57.0338 655.049 Q54.7421 654.632 52.2884 653.776 L52.2884 649.262 Q54.2328 650.396 56.5477 650.975 Q58.8625 651.554 61.3856 651.554 Q65.7837 651.554 68.0754 649.817 Q70.3902 648.081 70.3902 644.771 Q70.3902 641.716 68.2374 640.003 Q66.1078 638.267 62.2884 638.267 L58.2606 638.267 L58.2606 634.424 L62.4735 634.424 Q65.9226 634.424 67.7513 633.058 Q69.58 631.669 69.58 629.077 Q69.58 626.415 67.6819 625.003 Q65.8069 623.568 62.2884 623.568 Q60.3671 623.568 58.168 623.984 Q55.969 624.401 53.3301 625.281 L53.3301 621.114 Q55.9921 620.373 58.3069 620.003 Q60.6449 619.632 62.705 619.632 Q68.0291 619.632 71.1309 622.063 Q74.2327 624.47 74.2327 628.591 Q74.2327 631.461 72.5892 633.452 Q70.9457 635.419 67.9133 636.183 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M93.9086 623.336 Q90.2975 623.336 88.4688 626.901 Q86.6632 630.443 86.6632 637.572 Q86.6632 644.679 88.4688 648.243 Q90.2975 651.785 93.9086 651.785 Q97.5428 651.785 99.3483 648.243 Q101.177 644.679 101.177 637.572 Q101.177 630.443 99.3483 626.901 Q97.5428 623.336 93.9086 623.336 M93.9086 619.632 Q99.7187 619.632 102.774 624.239 Q105.853 628.822 105.853 637.572 Q105.853 646.299 102.774 650.905 Q99.7187 655.489 93.9086 655.489 Q88.0984 655.489 85.0197 650.905 Q81.9642 646.299 81.9642 637.572 Q81.9642 628.822 85.0197 624.239 Q88.0984 619.632 93.9086 619.632 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M124.07 623.336 Q120.459 623.336 118.631 626.901 Q116.825 630.443 116.825 637.572 Q116.825 644.679 118.631 648.243 Q120.459 651.785 124.07 651.785 Q127.705 651.785 129.51 648.243 Q131.339 644.679 131.339 637.572 Q131.339 630.443 129.51 626.901 Q127.705 623.336 124.07 623.336 M124.07 619.632 Q129.881 619.632 132.936 624.239 Q136.015 628.822 136.015 637.572 Q136.015 646.299 132.936 650.905 Q129.881 655.489 124.07 655.489 Q118.26 655.489 115.182 650.905 Q112.126 646.299 112.126 637.572 Q112.126 628.822 115.182 624.239 Q118.26 619.632 124.07 619.632 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M66.5939 354.939 L54.7884 373.388 L66.5939 373.388 L66.5939 354.939 M65.367 350.865 L71.2466 350.865 L71.2466 373.388 L76.1772 373.388 L76.1772 377.277 L71.2466 377.277 L71.2466 385.425 L66.5939 385.425 L66.5939 377.277 L50.9921 377.277 L50.9921 372.763 L65.367 350.865 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M93.9086 353.943 Q90.2975 353.943 88.4688 357.508 Q86.6632 361.05 86.6632 368.179 Q86.6632 375.286 88.4688 378.851 Q90.2975 382.392 93.9086 382.392 Q97.5428 382.392 99.3483 378.851 Q101.177 375.286 101.177 368.179 Q101.177 361.05 99.3483 357.508 Q97.5428 353.943 93.9086 353.943 M93.9086 350.24 Q99.7187 350.24 102.774 354.846 Q105.853 359.429 105.853 368.179 Q105.853 376.906 102.774 381.513 Q99.7187 386.096 93.9086 386.096 Q88.0984 386.096 85.0197 381.513 Q81.9642 376.906 81.9642 368.179 Q81.9642 359.429 85.0197 354.846 Q88.0984 350.24 93.9086 350.24 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M124.07 353.943 Q120.459 353.943 118.631 357.508 Q116.825 361.05 116.825 368.179 Q116.825 375.286 118.631 378.851 Q120.459 382.392 124.07 382.392 Q127.705 382.392 129.51 378.851 Q131.339 375.286 131.339 368.179 Q131.339 361.05 129.51 357.508 Q127.705 353.943 124.07 353.943 M124.07 350.24 Q129.881 350.24 132.936 354.846 Q136.015 359.429 136.015 368.179 Q136.015 376.906 132.936 381.513 Q129.881 386.096 124.07 386.096 Q118.26 386.096 115.182 381.513 Q112.126 376.906 112.126 368.179 Q112.126 359.429 115.182 354.846 Q118.26 350.24 124.07 350.24 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M53.793 81.472 L72.1494 81.472 L72.1494 85.4072 L58.0754 85.4072 L58.0754 93.8793 Q59.0939 93.5321 60.1124 93.3701 Q61.131 93.1849 62.1495 93.1849 Q67.9365 93.1849 71.3161 96.3562 Q74.6957 99.5274 74.6957 104.944 Q74.6957 110.523 71.2235 113.625 Q67.7513 116.703 61.4319 116.703 Q59.256 116.703 56.9875 116.333 Q54.7421 115.963 52.3347 115.222 L52.3347 110.523 Q54.418 111.657 56.6402 112.213 Q58.8625 112.768 61.3393 112.768 Q65.3439 112.768 67.6819 110.662 Q70.0198 108.555 70.0198 104.944 Q70.0198 101.333 67.6819 99.2265 Q65.3439 97.1201 61.3393 97.1201 Q59.4643 97.1201 57.5893 97.5367 Q55.7375 97.9534 53.793 98.833 L53.793 81.472 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M93.9086 84.5507 Q90.2975 84.5507 88.4688 88.1155 Q86.6632 91.6571 86.6632 98.7867 Q86.6632 105.893 88.4688 109.458 Q90.2975 113 93.9086 113 Q97.5428 113 99.3483 109.458 Q101.177 105.893 101.177 98.7867 Q101.177 91.6571 99.3483 88.1155 Q97.5428 84.5507 93.9086 84.5507 M93.9086 80.847 Q99.7187 80.847 102.774 85.4534 Q105.853 90.0368 105.853 98.7867 Q105.853 107.514 102.774 112.12 Q99.7187 116.703 93.9086 116.703 Q88.0984 116.703 85.0197 112.12 Q81.9642 107.514 81.9642 98.7867 Q81.9642 90.0368 85.0197 85.4534 Q88.0984 80.847 93.9086 80.847 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M124.07 84.5507 Q120.459 84.5507 118.631 88.1155 Q116.825 91.6571 116.825 98.7867 Q116.825 105.893 118.631 109.458 Q120.459 113 124.07 113 Q127.705 113 129.51 109.458 Q131.339 105.893 131.339 98.7867 Q131.339 91.6571 129.51 88.1155 Q127.705 84.5507 124.07 84.5507 M124.07 80.847 Q129.881 80.847 132.936 85.4534 Q136.015 90.0368 136.015 98.7867 Q136.015 107.514 132.936 112.12 Q129.881 116.703 124.07 116.703 Q118.26 116.703 115.182 112.12 Q112.126 107.514 112.126 98.7867 Q112.126 90.0368 115.182 85.4534 Q118.26 80.847 124.07 80.847 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip752)\" d=\"\nM291.959 109.528 L291.959 1445.72 L390.23 1445.72 L390.23 109.528 L291.959 109.528 L291.959 109.528  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  291.959,109.528 291.959,1445.72 390.23,1445.72 390.23,109.528 291.959,109.528 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM414.798 1445.72 L414.798 1445.72 L513.069 1445.72 L513.069 1445.72 L414.798 1445.72 L414.798 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  414.798,1445.72 414.798,1445.72 513.069,1445.72 414.798,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM537.637 1445.72 L537.637 1445.72 L635.908 1445.72 L635.908 1445.72 L537.637 1445.72 L537.637 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  537.637,1445.72 537.637,1445.72 635.908,1445.72 537.637,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM660.476 1445.72 L660.476 1445.72 L758.747 1445.72 L758.747 1445.72 L660.476 1445.72 L660.476 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  660.476,1445.72 660.476,1445.72 758.747,1445.72 660.476,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM783.314 1445.72 L783.314 1445.72 L881.585 1445.72 L881.585 1445.72 L783.314 1445.72 L783.314 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  783.314,1445.72 783.314,1445.72 881.585,1445.72 783.314,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM906.153 1445.72 L906.153 1445.72 L1004.42 1445.72 L1004.42 1445.72 L906.153 1445.72 L906.153 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  906.153,1445.72 906.153,1445.72 1004.42,1445.72 906.153,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM1028.99 1445.72 L1028.99 1445.72 L1127.26 1445.72 L1127.26 1445.72 L1028.99 1445.72 L1028.99 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1028.99,1445.72 1028.99,1445.72 1127.26,1445.72 1028.99,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM1151.83 1445.72 L1151.83 1445.72 L1250.1 1445.72 L1250.1 1445.72 L1151.83 1445.72 L1151.83 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1151.83,1445.72 1151.83,1445.72 1250.1,1445.72 1151.83,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM1274.67 1445.72 L1274.67 1445.72 L1372.94 1445.72 L1372.94 1445.72 L1274.67 1445.72 L1274.67 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1274.67,1445.72 1274.67,1445.72 1372.94,1445.72 1274.67,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM1397.51 1445.72 L1397.51 1445.72 L1495.78 1445.72 L1495.78 1445.72 L1397.51 1445.72 L1397.51 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1397.51,1445.72 1397.51,1445.72 1495.78,1445.72 1397.51,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM1520.35 1445.72 L1520.35 1445.72 L1618.62 1445.72 L1618.62 1445.72 L1520.35 1445.72 L1520.35 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1520.35,1445.72 1520.35,1445.72 1618.62,1445.72 1520.35,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM1643.19 1445.72 L1643.19 1445.72 L1741.46 1445.72 L1741.46 1445.72 L1643.19 1445.72 L1643.19 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1643.19,1445.72 1643.19,1445.72 1741.46,1445.72 1643.19,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM1766.02 1445.72 L1766.02 1445.72 L1864.3 1445.72 L1864.3 1445.72 L1766.02 1445.72 L1766.02 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1766.02,1445.72 1766.02,1445.72 1864.3,1445.72 1766.02,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM1888.86 1445.72 L1888.86 1445.72 L1987.13 1445.72 L1987.13 1445.72 L1888.86 1445.72 L1888.86 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1888.86,1445.72 1888.86,1445.72 1987.13,1445.72 1888.86,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM2011.7 1445.72 L2011.7 1445.72 L2109.97 1445.72 L2109.97 1445.72 L2011.7 1445.72 L2011.7 1445.72  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  2011.7,1445.72 2011.7,1445.72 2109.97,1445.72 2011.7,1445.72 \n  \"/>\n<path clip-path=\"url(#clip752)\" d=\"\nM2134.54 87.9763 L2134.54 1445.72 L2232.81 1445.72 L2232.81 87.9763 L2134.54 87.9763 L2134.54 87.9763  Z\n  \" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  2134.54,87.9763 2134.54,1445.72 2232.81,1445.72 2232.81,87.9763 2134.54,87.9763 \n  \"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"279.676\" cy=\"109.528\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"402.514\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"525.353\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"648.192\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"771.03\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"893.869\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1016.71\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1139.55\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1262.39\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1385.22\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1508.06\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1630.9\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1753.74\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1876.58\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1999.42\" cy=\"1445.72\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"2122.26\" cy=\"87.9763\" r=\"2\"/>\n<circle clip-path=\"url(#clip752)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"2245.1\" cy=\"109.528\" r=\"2\"/>\n</svg>\n","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"GHZ state will collapse to 0000 or 1111.","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"","category":"page"},{"location":"quick-start/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"This page was generated using Literate.jl.","category":"page"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"CurrentModule = YaoArrayRegister\nDocTestSetup = quote\n    using Yao\n    using Yao: YaoBase, YaoBlocks, YaoArrayRegister\n    using YaoBase\n    using YaoBlocks\n    using YaoArrayRegister\nend","category":"page"},{"location":"man/array_registers.html#Array-Registers","page":"Array Registers","title":"Array Registers","text":"","category":"section"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"We provide ArrayReg as built in register type for simulations. It is a simple wrapper of a Julia array, e.g on CPU, we use Array by default and on CUDA devices we could use CuArray. You don't have to define your custom array type if the storage is array based.","category":"page"},{"location":"man/array_registers.html#Constructors","page":"Array Registers","title":"Constructors","text":"","category":"section"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"ArrayReg","category":"page"},{"location":"man/array_registers.html#YaoArrayRegister.ArrayReg","page":"Array Registers","title":"YaoArrayRegister.ArrayReg","text":"ArrayReg{B, T, MT <: AbstractMatrix{T}} <: AbstractRegister{B}\n\nSimulated full amplitude register type, it uses an array to represent corresponding one or a batch of quantum states. B is the batch size, T is the numerical type for each amplitude, it is ComplexF64 by default.\n\n\n\n\n\n","category":"type"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"We define some shortcuts to create simulated quantum states easier:","category":"page"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"product_state\nzero_state\nrand_state\nuniform_state\noneto\nrepeat","category":"page"},{"location":"man/array_registers.html#YaoArrayRegister.product_state","page":"Array Registers","title":"YaoArrayRegister.product_state","text":"product_state([T=ComplexF64], bit_str; nbatch=1)\n\nCreate an ArrayReg with bit string literal defined with @bit_str. See also zero_state, rand_state, uniform_state.\n\nExamples\n\njulia> product_state(bit\"100\"; nbatch=2)\nArrayReg{2, Complex{Float64}, Array...}\n    active qubits: 3/3\n\njulia> r1 = product_state(ComplexF32, bit\"100\"; nbatch=2)\nArrayReg{2, Complex{Float32}, Array...}\n    active qubits: 3/3\n\njulia> r2 = product_state(ComplexF32, [0, 0, 1]; nbatch=2)\nArrayReg{2, Complex{Float32}, Array...}\n    active qubits: 3/3\n\njulia> r1 ≈ r2   # because we read bit strings from right to left, vectors from left to right.\ntrue\n\n\n\n\n\nproduct_state([T=ComplexF64], total::Int, bit_config::Integer; nbatch=1, no_transpose_storage=false)\n\nCreate an ArrayReg with bit configuration bit_config, total number of bits total. See also zero_state, rand_state, uniform_state.\n\nExamples\n\njulia> product_state(4, 3; nbatch=2)\nArrayReg{2, Complex{Float64}, Array...}\n    active qubits: 4/4\n\njulia> product_state(4, 0b1001; nbatch=2)\nArrayReg{2, Complex{Float64}, Array...}\n    active qubits: 4/4\n\njulia> product_state(ComplexF32, 4, 0b101)\nArrayReg{1, Complex{Float32}, Array...}\n    active qubits: 4/4\n\nwarning: Warning\nThis interface will not check whether the number of required digits for the bit configuration matches the total number of bits.\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#YaoArrayRegister.zero_state","page":"Array Registers","title":"YaoArrayRegister.zero_state","text":"zero_state([T=ComplexF64], n::Int; nbatch::Int=1)\n\nCreate an ArrayReg with total number of bits n. See also product_state, rand_state, uniform_state.\n\nExamples\n\njulia> zero_state(4)\nArrayReg{1, Complex{Float64}, Array...}\n    active qubits: 4/4\n\njulia> zero_state(ComplexF32, 4)\nArrayReg{1, Complex{Float32}, Array...}\n    active qubits: 4/4\n\njulia> zero_state(ComplexF32, 4; nbatch=3)\nArrayReg{3, Complex{Float32}, Array...}\n    active qubits: 4/4\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#YaoArrayRegister.rand_state","page":"Array Registers","title":"YaoArrayRegister.rand_state","text":"rand_state([T=ComplexF64], n::Int; nbatch=1, no_transpose_storage=false)\n\nCreate a random ArrayReg with total number of qubits n.\n\nExamples\n\njulia> rand_state(4)\nArrayReg{1, Complex{Float64}, Array...}\n    active qubits: 4/4\n\njulia> rand_state(ComplexF64, 4)\nArrayReg{1, Complex{Float64}, Array...}\n    active qubits: 4/4\n\njulia> rand_state(ComplexF64, 4; nbatch=2)\nArrayReg{2, Complex{Float64}, Array...}\n    active qubits: 4/4\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#YaoArrayRegister.uniform_state","page":"Array Registers","title":"YaoArrayRegister.uniform_state","text":"uniform_state([T=ComplexF64], n; nbatch=1, no_transpose_storage=false)\n\nCreate a uniform state: frac12^n sum_k k. This state can also be created by applying H (Hadmard gate) on 0000 state.\n\nExample\n\njulia> uniform_state(4; nbatch=2)\nArrayReg{2, Complex{Float64}, Array...}\n    active qubits: 4/4\n\njulia> uniform_state(ComplexF32, 4; nbatch=2)\nArrayReg{2, Complex{Float64}, Array...}\n    active qubits: 4/4\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#YaoArrayRegister.oneto","page":"Array Registers","title":"YaoArrayRegister.oneto","text":"oneto(r::ArrayReg, n::Int=nqubits(r))\n\nReturns an ArrayReg with 1:n qubits activated.\n\n\n\n\n\noneto(n::Int) -> f(register)\n\nLike oneto(register, n), but the input register is delayed.\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#Base.repeat","page":"Array Registers","title":"Base.repeat","text":"repeat(n, x::AbstractBlock[, locs]) -> RepeatedBlock{n}\n\nCreate a RepeatedBlock with total number of qubits n and the block to repeat on given location or on all the locations.\n\nExample\n\nThis will create a repeat block which puts 4 X gates on each location.\n\njulia> repeat(4, X)\nnqubits: 4\nrepeat on (1, 2, 3, 4)\n└─ X\n\nYou can also specify the location\n\njulia> repeat(4, X, (1, 2))\nnqubits: 4\nrepeat on (1, 2)\n└─ X\n\nBut repeat won't copy the gate, thus, if it is a gate with parameter, e.g a phase(0.1), the parameter will change simultaneously.\n\njulia> g = repeat(4, phase(0.1))\nnqubits: 4\nrepeat on (1, 2, 3, 4)\n└─ phase(0.1)\n\njulia> g.content\nphase(0.1)\n\njulia> g.content.theta = 0.2\n0.2\n\njulia> g\nnqubits: 4\nrepeat on (1, 2, 3, 4)\n└─ phase(0.2)\n\n\n\n\n\nrepeat(x::AbstractBlock, locs)\n\nLazy curried version of repeat.\n\n\n\n\n\nrepeat(register, n)\n\nCreate an ArrayReg by copying the original register for n times on batch dimension.\n\nExample\n\njulia> repeat(ArrayReg{3}(bit\"101\"), 4)\nArrayReg{12, Complex{Float64}, Array...}\n    active qubits: 3/3\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#Properties","page":"Array Registers","title":"Properties","text":"","category":"section"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"You can access the storage of an ArrayReg with:","category":"page"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"state\nstatevec\nrelaxedvec\nhypercubic\nrank3","category":"page"},{"location":"man/array_registers.html#YaoArrayRegister.state","page":"Array Registers","title":"YaoArrayRegister.state","text":"state(register::ArrayReg) -> raw array\n\nReturns the raw array storage of register. See also statevec.\n\n\n\n\n\nstate(ρ::DensityMatrix)\n\nReturn the raw state of density matrix ρ.\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#YaoArrayRegister.statevec","page":"Array Registers","title":"YaoArrayRegister.statevec","text":"statevec(r::ArrayReg) -> array\n\nReturn a state matrix/vector by droping the last dimension of size 1. See also state.\n\nwarning: Warning\nstatevec is not type stable. It may cause performance slow down.\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#YaoArrayRegister.relaxedvec","page":"Array Registers","title":"YaoArrayRegister.relaxedvec","text":"relaxedvec(r::ArrayReg) -> AbstractArray\n\nReturn a matrix (vector) for B>1 (B=1) as a vector representation of state, with all qubits activated. See also state, statevec.\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#BitBasis.hypercubic","page":"Array Registers","title":"BitBasis.hypercubic","text":"hypercubic(A::Array) -> Array\n\nget the hypercubic representation for an array.\n\n\n\n\n\nhypercubic(r::ArrayReg) -> AbstractArray\n\nReturn the hypercubic form (high dimensional tensor) of this register, only active qubits are considered. See also rank3.\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#YaoArrayRegister.rank3","page":"Array Registers","title":"YaoArrayRegister.rank3","text":"rank3(r::ArrayReg)\n\nReturn the rank 3 tensor representation of state, the 3 dimensions are (activated space, remaining space, batch dimension). See also rank3.\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#Operations","page":"Array Registers","title":"Operations","text":"","category":"section"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"We defined basic arithmatics for ArrayReg, besides since we do not garantee normalization for some operations on ArrayReg for simulation, normalize! and  isnormalized is provided to check and normalize the simulated register.","category":"page"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"normalize!\nisnormalized","category":"page"},{"location":"man/array_registers.html#LinearAlgebra.normalize!","page":"Array Registers","title":"LinearAlgebra.normalize!","text":"normalize!(r::ArrayReg)\n\nNormalize the register r in-place by its 2-norm.\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#YaoArrayRegister.isnormalized","page":"Array Registers","title":"YaoArrayRegister.isnormalized","text":"isnormalized(r::ArrayReg) -> Bool\n\nCheck if the register is normalized.\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#Specialized-Instructions","page":"Array Registers","title":"Specialized Instructions","text":"","category":"section"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"We define some specialized instruction by specializing instruct! to improve the performance for simulation and dispatch them with multiple dispatch.","category":"page"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"Implemented instruct! is listed below:","category":"page"},{"location":"man/array_registers.html#Measurement","page":"Array Registers","title":"Measurement","text":"","category":"section"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"Simulation of measurement is mainly achieved by sampling and projection.","category":"page"},{"location":"man/array_registers.html#Sample","page":"Array Registers","title":"Sample","text":"","category":"section"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"Suppose we want to measure operational subspace, we can first get","category":"page"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"p(x) = langle xpsirangle^2 = sumlimits_y L(x y )^2","category":"page"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"Then we sample an asim p(x). If we just sample and don't really measure (change wave function), its over.","category":"page"},{"location":"man/array_registers.html#Projection","page":"Array Registers","title":"Projection","text":"","category":"section"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"psirangle = sum_y L(a y )sqrtp(a) arangle yrangle","category":"page"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"Good! then we can just remove the operational qubit space since x and y spaces are totally decoupled and x is known as in state a, then we get","category":"page"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"psirangle_r = sum_y l(0 y ) yrangle","category":"page"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"where l = L(a:a, :, :)/sqrt(p(a)).","category":"page"},{"location":"man/array_registers.html#Others","page":"Array Registers","title":"Others","text":"","category":"section"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"Modules = [YaoArrayRegister]\nOrder = [:function]","category":"page"},{"location":"man/array_registers.html#Base.join-Union{Tuple{Vararg{ArrayReg{B, T} where T}}, Tuple{B}} where B","page":"Array Registers","title":"Base.join","text":"join(regs...)\n\nconcat a list of registers regs to a larger register, each register should have the same batch size. See also repeat.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#Base.repeat-Union{Tuple{B}, Tuple{ArrayReg{B, T} where T, Int64}} where B","page":"Array Registers","title":"Base.repeat","text":"repeat(register, n)\n\nCreate an ArrayReg by copying the original register for n times on batch dimension.\n\nExample\n\njulia> repeat(ArrayReg{3}(bit\"101\"), 4)\nArrayReg{12, Complex{Float64}, Array...}\n    active qubits: 3/3\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#BitBasis.hypercubic-Tuple{ArrayRegOrAdjointArrayReg}","page":"Array Registers","title":"BitBasis.hypercubic","text":"hypercubic(r::ArrayReg) -> AbstractArray\n\nReturn the hypercubic form (high dimensional tensor) of this register, only active qubits are considered. See also rank3.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#LinearAlgebra.normalize!-Union{Tuple{ArrayReg{B, T} where T}, Tuple{B}} where B","page":"Array Registers","title":"LinearAlgebra.normalize!","text":"normalize!(r::ArrayReg)\n\nNormalize the register r in-place by its 2-norm.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoAPI.fidelity-Union{Tuple{B2}, Tuple{B1}, Tuple{ArrayReg{B1, T} where T, ArrayReg{B2, T} where T}} where {B1, B2}","page":"Array Registers","title":"YaoAPI.fidelity","text":"fidelity(r1::ArrayReg, r2::ArrayReg)\n\nCalcuate the fidelity between r1 and r2, if r1 or r2 is not pure state (nactive(r) != nqubits(r)), the fidelity is calcuated by purification. See also pure_state_fidelity, purification_fidelity.\n\nfidelity'(pair_or_reg1, pair_or_reg2) -> (g1, g2)\n\nObtain the gradient with respect to registers and circuit parameters. For pair input ψ=>circuit, the returned gradient is a pair of gψ=>gparams, with gψ the gradient of input state and gparams the gradients of circuit parameters. For register input, the return value is a register.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoAPI.probs-Union{Tuple{DensityMatrix{B, T, MT} where MT<:AbstractArray{T, 3}}, Tuple{T}, Tuple{B}} where {B, T}","page":"Array Registers","title":"YaoAPI.probs","text":"probs(ρ)\n\nReturns the probability distribution from a density matrix ρ.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.contiguous_shape_orders-Tuple{Any, Any}","page":"Array Registers","title":"YaoArrayRegister.contiguous_shape_orders","text":"contiguous_shape_orders(shape, orders)\n\nMerge the shape and orders if the orders are contiguous. Returns the new merged shape and order.\n\nExample\n\njulia> YaoArrayRegister.contiguous_shape_orders((2, 3, 4), (1, 2, 3))\n([24], [1])\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.datatype-Union{Tuple{ArrayReg{B, T, MT} where MT<:AbstractMatrix{T}}, Tuple{T}, Tuple{B}} where {B, T}","page":"Array Registers","title":"YaoArrayRegister.datatype","text":"datatype(register) -> Int\n\nReturns the numerical data type used by register.\n\nnote: Note\ndatatype is not the same with eltype, since AbstractRegister family is not exactly the same with AbstractArray, it is an iterator of several registers.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.exchange_sysenv-Union{Tuple{ArrayReg{B, T} where T}, Tuple{B}} where B","page":"Array Registers","title":"YaoArrayRegister.exchange_sysenv","text":"exchange_sysenv(reg::ArrayReg) -> ArrayReg\n\nExchange system (focused qubits) and environment (remaining qubits).\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.is_order_same-Tuple{Any}","page":"Array Registers","title":"YaoArrayRegister.is_order_same","text":"is_order_same(locs) -> Bool\n\nCheck if the order specified by locs is the same as current order.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.isnormalized-Tuple{ArrayReg}","page":"Array Registers","title":"YaoArrayRegister.isnormalized","text":"isnormalized(r::ArrayReg) -> Bool\n\nCheck if the register is normalized.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.matvec","page":"Array Registers","title":"YaoArrayRegister.matvec","text":"matvec(x::VecOrMat) -> MatOrVec\n\nReturn vector if a matrix is a column vector, else untouched.\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#YaoArrayRegister.move_ahead-Tuple{Any, Any}","page":"Array Registers","title":"YaoArrayRegister.move_ahead","text":"move_ahead(collection, orders)\n\nMove orders to the beginning of collection.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.mulcol!","page":"Array Registers","title":"YaoArrayRegister.mulcol!","text":"mulcol!(v::AbstractVector, i::Int, f) -> VecOrMat\n\nmultiply col i of v by f inplace.\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#YaoArrayRegister.mulrow!","page":"Array Registers","title":"YaoArrayRegister.mulrow!","text":"mulrow!(v::AbstractVector, i::Int, f) -> VecOrMat\n\nmultiply row i of v by f inplace.\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#YaoArrayRegister.oneto-Tuple{Int64}","page":"Array Registers","title":"YaoArrayRegister.oneto","text":"oneto(n::Int) -> f(register)\n\nLike oneto(register, n), but the input register is delayed.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.oneto-Union{Tuple{ArrayReg{B, T} where T}, Tuple{B}, Tuple{ArrayReg{B, T} where T, Int64}} where B","page":"Array Registers","title":"YaoArrayRegister.oneto","text":"oneto(r::ArrayReg, n::Int=nqubits(r))\n\nReturns an ArrayReg with 1:n qubits activated.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.product_state-Tuple{BitBasis.BitStr}","page":"Array Registers","title":"YaoArrayRegister.product_state","text":"product_state([T=ComplexF64], bit_str; nbatch=1)\n\nCreate an ArrayReg with bit string literal defined with @bit_str. See also zero_state, rand_state, uniform_state.\n\nExamples\n\njulia> product_state(bit\"100\"; nbatch=2)\nArrayReg{2, Complex{Float64}, Array...}\n    active qubits: 3/3\n\njulia> r1 = product_state(ComplexF32, bit\"100\"; nbatch=2)\nArrayReg{2, Complex{Float32}, Array...}\n    active qubits: 3/3\n\njulia> r2 = product_state(ComplexF32, [0, 0, 1]; nbatch=2)\nArrayReg{2, Complex{Float32}, Array...}\n    active qubits: 3/3\n\njulia> r1 ≈ r2   # because we read bit strings from right to left, vectors from left to right.\ntrue\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.product_state-Tuple{Int64, Integer}","page":"Array Registers","title":"YaoArrayRegister.product_state","text":"product_state([T=ComplexF64], total::Int, bit_config::Integer; nbatch=1, no_transpose_storage=false)\n\nCreate an ArrayReg with bit configuration bit_config, total number of bits total. See also zero_state, rand_state, uniform_state.\n\nExamples\n\njulia> product_state(4, 3; nbatch=2)\nArrayReg{2, Complex{Float64}, Array...}\n    active qubits: 4/4\n\njulia> product_state(4, 0b1001; nbatch=2)\nArrayReg{2, Complex{Float64}, Array...}\n    active qubits: 4/4\n\njulia> product_state(ComplexF32, 4, 0b101)\nArrayReg{1, Complex{Float32}, Array...}\n    active qubits: 4/4\n\nwarning: Warning\nThis interface will not check whether the number of required digits for the bit configuration matches the total number of bits.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.rand_state-Tuple{Int64}","page":"Array Registers","title":"YaoArrayRegister.rand_state","text":"rand_state([T=ComplexF64], n::Int; nbatch=1, no_transpose_storage=false)\n\nCreate a random ArrayReg with total number of qubits n.\n\nExamples\n\njulia> rand_state(4)\nArrayReg{1, Complex{Float64}, Array...}\n    active qubits: 4/4\n\njulia> rand_state(ComplexF64, 4)\nArrayReg{1, Complex{Float64}, Array...}\n    active qubits: 4/4\n\njulia> rand_state(ComplexF64, 4; nbatch=2)\nArrayReg{2, Complex{Float64}, Array...}\n    active qubits: 4/4\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.rank3-Union{Tuple{ArrayRegOrAdjointArrayReg{B}}, Tuple{B}} where B","page":"Array Registers","title":"YaoArrayRegister.rank3","text":"rank3(r::ArrayReg)\n\nReturn the rank 3 tensor representation of state, the 3 dimensions are (activated space, remaining space, batch dimension). See also rank3.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.relaxedvec-Union{Tuple{ArrayReg{B, T} where T}, Tuple{B}} where B","page":"Array Registers","title":"YaoArrayRegister.relaxedvec","text":"relaxedvec(r::ArrayReg) -> AbstractArray\n\nReturn a matrix (vector) for B>1 (B=1) as a vector representation of state, with all qubits activated. See also state, statevec.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.sort_unitary-Union{Tuple{N}, Tuple{AbstractMatrix, Tuple{Vararg{Int64, N}}}} where N","page":"Array Registers","title":"YaoArrayRegister.sort_unitary","text":"sort_unitary(U, locations::NTuple{N, Int}) -> U\n\nReturn an sorted unitary operator according to the locations.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.state-Tuple{ArrayReg}","page":"Array Registers","title":"YaoArrayRegister.state","text":"state(register::ArrayReg) -> raw array\n\nReturns the raw array storage of register. See also statevec.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.state-Tuple{DensityMatrix}","page":"Array Registers","title":"YaoArrayRegister.state","text":"state(ρ::DensityMatrix)\n\nReturn the raw state of density matrix ρ.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.statevec-Tuple{ArrayRegOrAdjointArrayReg}","page":"Array Registers","title":"YaoArrayRegister.statevec","text":"statevec(r::ArrayReg) -> array\n\nReturn a state matrix/vector by droping the last dimension of size 1. See also state.\n\nwarning: Warning\nstatevec is not type stable. It may cause performance slow down.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.swapcols!","page":"Array Registers","title":"YaoArrayRegister.swapcols!","text":"swapcols!(v::VecOrMat, i::Int, j::Int[, f1, f2]) -> VecOrMat\n\nswap col i and col j of v inplace, with f1, f2 factors applied on i and j (before swap).\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#YaoArrayRegister.swaprows!","page":"Array Registers","title":"YaoArrayRegister.swaprows!","text":"swaprows!(v::VecOrMat, i::Int, j::Int[, f1, f2]) -> VecOrMat\n\nswap row i and row j of v inplace, with f1, f2 factors applied on i and j (before swap).\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#YaoArrayRegister.u1rows!","page":"Array Registers","title":"YaoArrayRegister.u1rows!","text":"u1rows!(state::VecOrMat, i::Int, j::Int, a, b, c, d) -> VecOrMat\n\napply u1 on row i and row j of state inplace.\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#YaoArrayRegister.uniform_state-Tuple{Int64}","page":"Array Registers","title":"YaoArrayRegister.uniform_state","text":"uniform_state([T=ComplexF64], n; nbatch=1, no_transpose_storage=false)\n\nCreate a uniform state: frac12^n sum_k k. This state can also be created by applying H (Hadmard gate) on 0000 state.\n\nExample\n\njulia> uniform_state(4; nbatch=2)\nArrayReg{2, Complex{Float64}, Array...}\n    active qubits: 4/4\n\njulia> uniform_state(ComplexF32, 4; nbatch=2)\nArrayReg{2, Complex{Float64}, Array...}\n    active qubits: 4/4\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.zero_state-Tuple{Int64}","page":"Array Registers","title":"YaoArrayRegister.zero_state","text":"zero_state([T=ComplexF64], n::Int; nbatch::Int=1)\n\nCreate an ArrayReg with total number of bits n. See also product_state, rand_state, uniform_state.\n\nExamples\n\njulia> zero_state(4)\nArrayReg{1, Complex{Float64}, Array...}\n    active qubits: 4/4\n\njulia> zero_state(ComplexF32, 4)\nArrayReg{1, Complex{Float32}, Array...}\n    active qubits: 4/4\n\njulia> zero_state(ComplexF32, 4; nbatch=3)\nArrayReg{3, Complex{Float32}, Array...}\n    active qubits: 4/4\n\n\n\n\n\n","category":"method"},{"location":"benchmarks.html#Benchmarks","page":"Benchmark","title":"Benchmarks","text":"","category":"section"},{"location":"benchmarks.html#Benchmark-Guard","page":"Benchmark","title":"Benchmark Guard","text":"","category":"section"},{"location":"benchmarks.html","page":"Benchmark","title":"Benchmark","text":"To ensure some PR do not contain performance regression, we defined package benchmarks with PkgBenchmark in each component package, you can run the benchmark suite and compare the performance between different version and commits.","category":"page"},{"location":"benchmarks.html#Benchmark-with-Other-Packages","page":"Benchmark","title":"Benchmark with Other Packages","text":"","category":"section"},{"location":"benchmarks.html","page":"Benchmark","title":"Benchmark","text":"We also provide benchmarks comparing to other packages, you can find a complete benchmark results here: quantum-benchmarks","category":"page"},{"location":"benchmarks.html","page":"Benchmark","title":"Benchmark","text":"a glance of Yao's benchmark comparing to other packages:","category":"page"},{"location":"benchmarks.html","page":"Benchmark","title":"Benchmark","text":"(Image: relative-gate)","category":"page"},{"location":"benchmarks.html","page":"Benchmark","title":"Benchmark","text":"(Image: relative-circuit)","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"EditURL = \"https://github.com/QuantumBFS/Yao.jl/blob/master/docs/src/quick-start/6.quantum-circuit-born-machine/main.jl\"","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html#qcbm","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"","category":"section"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"Yao is designed with variational quantum circuits in mind, and this tutorial will introduce how to use Yao for this kind of task by implementing a quantum circuit born machine described in Jin-Guo Liu, Lei Wang (2018)","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"let's use the packages first","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"using Yao, LinearAlgebra, Plots","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html#Training-Target","page":"Quantum Circuit Born Machine","title":"Training Target","text":"","category":"section"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"In this tutorial, we will ask the variational circuit to learn the most basic distribution: a guassian distribution. It is defined as follows:","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"f(x left mu sigma^2right) = frac1sqrt2pisigma^2 e^-frac(x-mu)^22sigma^2","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"We implement it as gaussian_pdf:","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"function gaussian_pdf(x, μ::Real, σ::Real)\n    pl = @. 1 / sqrt(2pi * σ^2) * exp(-(x - μ)^2 / (2 * σ^2))\n    pl / sum(pl)\nend\npg = gaussian_pdf(1:1<<6, 1<<5-0.5, 1<<4);\nnothing #hide","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"We can plot the distribution, it looks like","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"plot(pg)","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip840\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip840)\" d=\"\nM0 1600 L2400 1600 L2400 0 L0 0  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip841\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip840)\" d=\"\nM216.436 1486.45 L2352.76 1486.45 L2352.76 47.2441 L216.436 47.2441  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip842\">\n    <rect x=\"216\" y=\"47\" width=\"2137\" height=\"1440\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  244.907,1486.45 244.907,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  564.812,1486.45 564.812,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  884.716,1486.45 884.716,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1204.62,1486.45 1204.62,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1524.52,1486.45 1524.52,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1844.43,1486.45 1844.43,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  2164.33,1486.45 2164.33,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  216.436,1486.45 2352.76,1486.45 \n  \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  244.907,1486.45 244.907,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  564.812,1486.45 564.812,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  884.716,1486.45 884.716,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1204.62,1486.45 1204.62,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1524.52,1486.45 1524.52,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1844.43,1486.45 1844.43,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  2164.33,1486.45 2164.33,1467.55 \n  \"/>\n<path clip-path=\"url(#clip840)\" d=\"M244.907 1517.37 Q241.296 1517.37 239.468 1520.93 Q237.662 1524.47 237.662 1531.6 Q237.662 1538.71 239.468 1542.27 Q241.296 1545.82 244.907 1545.82 Q248.542 1545.82 250.347 1542.27 Q252.176 1538.71 252.176 1531.6 Q252.176 1524.47 250.347 1520.93 Q248.542 1517.37 244.907 1517.37 M244.907 1513.66 Q250.718 1513.66 253.773 1518.27 Q256.852 1522.85 256.852 1531.6 Q256.852 1540.33 253.773 1544.94 Q250.718 1549.52 244.907 1549.52 Q239.097 1549.52 236.019 1544.94 Q232.963 1540.33 232.963 1531.6 Q232.963 1522.85 236.019 1518.27 Q239.097 1513.66 244.907 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M539.499 1544.91 L547.138 1544.91 L547.138 1518.55 L538.828 1520.21 L538.828 1515.95 L547.092 1514.29 L551.768 1514.29 L551.768 1544.91 L559.406 1544.91 L559.406 1548.85 L539.499 1548.85 L539.499 1544.91 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M578.851 1517.37 Q575.24 1517.37 573.411 1520.93 Q571.605 1524.47 571.605 1531.6 Q571.605 1538.71 573.411 1542.27 Q575.24 1545.82 578.851 1545.82 Q582.485 1545.82 584.291 1542.27 Q586.119 1538.71 586.119 1531.6 Q586.119 1524.47 584.291 1520.93 Q582.485 1517.37 578.851 1517.37 M578.851 1513.66 Q584.661 1513.66 587.716 1518.27 Q590.795 1522.85 590.795 1531.6 Q590.795 1540.33 587.716 1544.94 Q584.661 1549.52 578.851 1549.52 Q573.041 1549.52 569.962 1544.94 Q566.906 1540.33 566.906 1531.6 Q566.906 1522.85 569.962 1518.27 Q573.041 1513.66 578.851 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M863.489 1544.91 L879.808 1544.91 L879.808 1548.85 L857.864 1548.85 L857.864 1544.91 Q860.526 1542.16 865.109 1537.53 Q869.716 1532.88 870.896 1531.53 Q873.142 1529.01 874.021 1527.27 Q874.924 1525.51 874.924 1523.82 Q874.924 1521.07 872.98 1519.33 Q871.058 1517.6 867.957 1517.6 Q865.757 1517.6 863.304 1518.36 Q860.873 1519.13 858.095 1520.68 L858.095 1515.95 Q860.92 1514.82 863.373 1514.24 Q865.827 1513.66 867.864 1513.66 Q873.234 1513.66 876.429 1516.35 Q879.623 1519.03 879.623 1523.52 Q879.623 1525.65 878.813 1527.57 Q878.026 1529.47 875.919 1532.07 Q875.341 1532.74 872.239 1535.95 Q869.137 1539.15 863.489 1544.91 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M899.623 1517.37 Q896.012 1517.37 894.183 1520.93 Q892.378 1524.47 892.378 1531.6 Q892.378 1538.71 894.183 1542.27 Q896.012 1545.82 899.623 1545.82 Q903.257 1545.82 905.063 1542.27 Q906.891 1538.71 906.891 1531.6 Q906.891 1524.47 905.063 1520.93 Q903.257 1517.37 899.623 1517.37 M899.623 1513.66 Q905.433 1513.66 908.489 1518.27 Q911.567 1522.85 911.567 1531.6 Q911.567 1540.33 908.489 1544.94 Q905.433 1549.52 899.623 1549.52 Q893.813 1549.52 890.734 1544.94 Q887.679 1540.33 887.679 1531.6 Q887.679 1522.85 890.734 1518.27 Q893.813 1513.66 899.623 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1193.46 1530.21 Q1196.82 1530.93 1198.69 1533.2 Q1200.59 1535.47 1200.59 1538.8 Q1200.59 1543.92 1197.07 1546.72 Q1193.56 1549.52 1187.07 1549.52 Q1184.9 1549.52 1182.58 1549.08 Q1180.29 1548.66 1177.84 1547.81 L1177.84 1543.29 Q1179.78 1544.43 1182.1 1545.01 Q1184.41 1545.58 1186.93 1545.58 Q1191.33 1545.58 1193.62 1543.85 Q1195.94 1542.11 1195.94 1538.8 Q1195.94 1535.75 1193.79 1534.03 Q1191.66 1532.3 1187.84 1532.3 L1183.81 1532.3 L1183.81 1528.45 L1188.02 1528.45 Q1191.47 1528.45 1193.3 1527.09 Q1195.13 1525.7 1195.13 1523.11 Q1195.13 1520.45 1193.23 1519.03 Q1191.36 1517.6 1187.84 1517.6 Q1185.92 1517.6 1183.72 1518.01 Q1181.52 1518.43 1178.88 1519.31 L1178.88 1515.14 Q1181.54 1514.4 1183.86 1514.03 Q1186.19 1513.66 1188.25 1513.66 Q1193.58 1513.66 1196.68 1516.09 Q1199.78 1518.5 1199.78 1522.62 Q1199.78 1525.49 1198.14 1527.48 Q1196.49 1529.45 1193.46 1530.21 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1219.46 1517.37 Q1215.85 1517.37 1214.02 1520.93 Q1212.21 1524.47 1212.21 1531.6 Q1212.21 1538.71 1214.02 1542.27 Q1215.85 1545.82 1219.46 1545.82 Q1223.09 1545.82 1224.9 1542.27 Q1226.73 1538.71 1226.73 1531.6 Q1226.73 1524.47 1224.9 1520.93 Q1223.09 1517.37 1219.46 1517.37 M1219.46 1513.66 Q1225.27 1513.66 1228.32 1518.27 Q1231.4 1522.85 1231.4 1531.6 Q1231.4 1540.33 1228.32 1544.94 Q1225.27 1549.52 1219.46 1549.52 Q1213.65 1549.52 1210.57 1544.94 Q1207.51 1540.33 1207.51 1531.6 Q1207.51 1522.85 1210.57 1518.27 Q1213.65 1513.66 1219.46 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1512.7 1518.36 L1500.89 1536.81 L1512.7 1536.81 L1512.7 1518.36 M1511.47 1514.29 L1517.35 1514.29 L1517.35 1536.81 L1522.28 1536.81 L1522.28 1540.7 L1517.35 1540.7 L1517.35 1548.85 L1512.7 1548.85 L1512.7 1540.7 L1497.09 1540.7 L1497.09 1536.19 L1511.47 1514.29 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1540.01 1517.37 Q1536.4 1517.37 1534.57 1520.93 Q1532.76 1524.47 1532.76 1531.6 Q1532.76 1538.71 1534.57 1542.27 Q1536.4 1545.82 1540.01 1545.82 Q1543.64 1545.82 1545.45 1542.27 Q1547.28 1538.71 1547.28 1531.6 Q1547.28 1524.47 1545.45 1520.93 Q1543.64 1517.37 1540.01 1517.37 M1540.01 1513.66 Q1545.82 1513.66 1548.88 1518.27 Q1551.95 1522.85 1551.95 1531.6 Q1551.95 1540.33 1548.88 1544.94 Q1545.82 1549.52 1540.01 1549.52 Q1534.2 1549.52 1531.12 1544.94 Q1528.07 1540.33 1528.07 1531.6 Q1528.07 1522.85 1531.12 1518.27 Q1534.2 1513.66 1540.01 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1819.13 1514.29 L1837.48 1514.29 L1837.48 1518.22 L1823.41 1518.22 L1823.41 1526.7 Q1824.43 1526.35 1825.45 1526.19 Q1826.47 1526 1827.48 1526 Q1833.27 1526 1836.65 1529.17 Q1840.03 1532.34 1840.03 1537.76 Q1840.03 1543.34 1836.56 1546.44 Q1833.09 1549.52 1826.77 1549.52 Q1824.59 1549.52 1822.32 1549.15 Q1820.08 1548.78 1817.67 1548.04 L1817.67 1543.34 Q1819.75 1544.47 1821.97 1545.03 Q1824.2 1545.58 1826.67 1545.58 Q1830.68 1545.58 1833.02 1543.48 Q1835.35 1541.37 1835.35 1537.76 Q1835.35 1534.15 1833.02 1532.04 Q1830.68 1529.94 1826.67 1529.94 Q1824.8 1529.94 1822.92 1530.35 Q1821.07 1530.77 1819.13 1531.65 L1819.13 1514.29 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1859.24 1517.37 Q1855.63 1517.37 1853.8 1520.93 Q1852 1524.47 1852 1531.6 Q1852 1538.71 1853.8 1542.27 Q1855.63 1545.82 1859.24 1545.82 Q1862.88 1545.82 1864.68 1542.27 Q1866.51 1538.71 1866.51 1531.6 Q1866.51 1524.47 1864.68 1520.93 Q1862.88 1517.37 1859.24 1517.37 M1859.24 1513.66 Q1865.05 1513.66 1868.11 1518.27 Q1871.19 1522.85 1871.19 1531.6 Q1871.19 1540.33 1868.11 1544.94 Q1865.05 1549.52 1859.24 1549.52 Q1853.43 1549.52 1850.35 1544.94 Q1847.3 1540.33 1847.3 1531.6 Q1847.3 1522.85 1850.35 1518.27 Q1853.43 1513.66 1859.24 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M2149.74 1529.7 Q2146.59 1529.7 2144.74 1531.86 Q2142.91 1534.01 2142.91 1537.76 Q2142.91 1541.49 2144.74 1543.66 Q2146.59 1545.82 2149.74 1545.82 Q2152.89 1545.82 2154.71 1543.66 Q2156.57 1541.49 2156.57 1537.76 Q2156.57 1534.01 2154.71 1531.86 Q2152.89 1529.7 2149.74 1529.7 M2159.02 1515.05 L2159.02 1519.31 Q2157.26 1518.48 2155.46 1518.04 Q2153.67 1517.6 2151.91 1517.6 Q2147.28 1517.6 2144.83 1520.72 Q2142.4 1523.85 2142.05 1530.17 Q2143.42 1528.15 2145.48 1527.09 Q2147.54 1526 2150.02 1526 Q2155.22 1526 2158.23 1529.17 Q2161.27 1532.32 2161.27 1537.76 Q2161.27 1543.08 2158.12 1546.3 Q2154.97 1549.52 2149.74 1549.52 Q2143.74 1549.52 2140.57 1544.94 Q2137.4 1540.33 2137.4 1531.6 Q2137.4 1523.41 2141.29 1518.55 Q2145.18 1513.66 2151.73 1513.66 Q2153.49 1513.66 2155.27 1514.01 Q2157.08 1514.36 2159.02 1515.05 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M2179.32 1517.37 Q2175.71 1517.37 2173.88 1520.93 Q2172.08 1524.47 2172.08 1531.6 Q2172.08 1538.71 2173.88 1542.27 Q2175.71 1545.82 2179.32 1545.82 Q2182.95 1545.82 2184.76 1542.27 Q2186.59 1538.71 2186.59 1531.6 Q2186.59 1524.47 2184.76 1520.93 Q2182.95 1517.37 2179.32 1517.37 M2179.32 1513.66 Q2185.13 1513.66 2188.19 1518.27 Q2191.27 1522.85 2191.27 1531.6 Q2191.27 1540.33 2188.19 1544.94 Q2185.13 1549.52 2179.32 1549.52 Q2173.51 1549.52 2170.43 1544.94 Q2167.38 1540.33 2167.38 1531.6 Q2167.38 1522.85 2170.43 1518.27 Q2173.51 1513.66 2179.32 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  216.436,1345.72 2352.76,1345.72 \n  \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  216.436,1047.96 2352.76,1047.96 \n  \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  216.436,750.205 2352.76,750.205 \n  \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  216.436,452.448 2352.76,452.448 \n  \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  216.436,154.692 2352.76,154.692 \n  \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  216.436,1486.45 216.436,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  216.436,1345.72 235.334,1345.72 \n  \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  216.436,1047.96 235.334,1047.96 \n  \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  216.436,750.205 235.334,750.205 \n  \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  216.436,452.448 235.334,452.448 \n  \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  216.436,154.692 235.334,154.692 \n  \"/>\n<path clip-path=\"url(#clip840)\" d=\"M63.9319 1331.52 Q60.3208 1331.52 58.4921 1335.08 Q56.6865 1338.62 56.6865 1345.75 Q56.6865 1352.86 58.4921 1356.42 Q60.3208 1359.97 63.9319 1359.97 Q67.5661 1359.97 69.3717 1356.42 Q71.2004 1352.86 71.2004 1345.75 Q71.2004 1338.62 69.3717 1335.08 Q67.5661 1331.52 63.9319 1331.52 M63.9319 1327.81 Q69.742 1327.81 72.7976 1332.42 Q75.8763 1337 75.8763 1345.75 Q75.8763 1354.48 72.7976 1359.09 Q69.742 1363.67 63.9319 1363.67 Q58.1217 1363.67 55.043 1359.09 Q51.9875 1354.48 51.9875 1345.75 Q51.9875 1337 55.043 1332.42 Q58.1217 1327.81 63.9319 1327.81 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M84.0938 1357.12 L88.978 1357.12 L88.978 1363 L84.0938 1363 L84.0938 1357.12 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M109.163 1331.52 Q105.552 1331.52 103.723 1335.08 Q101.918 1338.62 101.918 1345.75 Q101.918 1352.86 103.723 1356.42 Q105.552 1359.97 109.163 1359.97 Q112.797 1359.97 114.603 1356.42 Q116.432 1352.86 116.432 1345.75 Q116.432 1338.62 114.603 1335.08 Q112.797 1331.52 109.163 1331.52 M109.163 1327.81 Q114.973 1327.81 118.029 1332.42 Q121.107 1337 121.107 1345.75 Q121.107 1354.48 118.029 1359.09 Q114.973 1363.67 109.163 1363.67 Q103.353 1363.67 100.274 1359.09 Q97.2187 1354.48 97.2187 1345.75 Q97.2187 1337 100.274 1332.42 Q103.353 1327.81 109.163 1327.81 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M139.325 1331.52 Q135.714 1331.52 133.885 1335.08 Q132.08 1338.62 132.08 1345.75 Q132.08 1352.86 133.885 1356.42 Q135.714 1359.97 139.325 1359.97 Q142.959 1359.97 144.765 1356.42 Q146.593 1352.86 146.593 1345.75 Q146.593 1338.62 144.765 1335.08 Q142.959 1331.52 139.325 1331.52 M139.325 1327.81 Q145.135 1327.81 148.191 1332.42 Q151.269 1337 151.269 1345.75 Q151.269 1354.48 148.191 1359.09 Q145.135 1363.67 139.325 1363.67 Q133.515 1363.67 130.436 1359.09 Q127.381 1354.48 127.381 1345.75 Q127.381 1337 130.436 1332.42 Q133.515 1327.81 139.325 1327.81 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M159.533 1328.44 L177.89 1328.44 L177.89 1332.37 L163.816 1332.37 L163.816 1340.85 Q164.834 1340.5 165.853 1340.34 Q166.871 1340.15 167.89 1340.15 Q173.677 1340.15 177.056 1343.32 Q180.436 1346.49 180.436 1351.91 Q180.436 1357.49 176.964 1360.59 Q173.491 1363.67 167.172 1363.67 Q164.996 1363.67 162.728 1363.3 Q160.482 1362.93 158.075 1362.19 L158.075 1357.49 Q160.158 1358.62 162.38 1359.18 Q164.603 1359.73 167.079 1359.73 Q171.084 1359.73 173.422 1357.63 Q175.76 1355.52 175.76 1351.91 Q175.76 1348.3 173.422 1346.19 Q171.084 1344.09 167.079 1344.09 Q165.204 1344.09 163.329 1344.5 Q161.478 1344.92 159.533 1345.8 L159.533 1328.44 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M62.9365 1033.76 Q59.3254 1033.76 57.4967 1037.33 Q55.6912 1040.87 55.6912 1048 Q55.6912 1055.1 57.4967 1058.67 Q59.3254 1062.21 62.9365 1062.21 Q66.5707 1062.21 68.3763 1058.67 Q70.205 1055.1 70.205 1048 Q70.205 1040.87 68.3763 1037.33 Q66.5707 1033.76 62.9365 1033.76 M62.9365 1030.06 Q68.7467 1030.06 71.8022 1034.66 Q74.8809 1039.25 74.8809 1048 Q74.8809 1056.72 71.8022 1061.33 Q68.7467 1065.91 62.9365 1065.91 Q57.1264 1065.91 54.0477 1061.33 Q50.9921 1056.72 50.9921 1048 Q50.9921 1039.25 54.0477 1034.66 Q57.1264 1030.06 62.9365 1030.06 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M83.0984 1059.36 L87.9827 1059.36 L87.9827 1065.24 L83.0984 1065.24 L83.0984 1059.36 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M108.168 1033.76 Q104.557 1033.76 102.728 1037.33 Q100.922 1040.87 100.922 1048 Q100.922 1055.1 102.728 1058.67 Q104.557 1062.21 108.168 1062.21 Q111.802 1062.21 113.608 1058.67 Q115.436 1055.1 115.436 1048 Q115.436 1040.87 113.608 1037.33 Q111.802 1033.76 108.168 1033.76 M108.168 1030.06 Q113.978 1030.06 117.033 1034.66 Q120.112 1039.25 120.112 1048 Q120.112 1056.72 117.033 1061.33 Q113.978 1065.91 108.168 1065.91 Q102.358 1065.91 99.2789 1061.33 Q96.2234 1056.72 96.2234 1048 Q96.2234 1039.25 99.2789 1034.66 Q102.358 1030.06 108.168 1030.06 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M129.14 1061.31 L136.779 1061.31 L136.779 1034.94 L128.469 1036.61 L128.469 1032.35 L136.732 1030.68 L141.408 1030.68 L141.408 1061.31 L149.047 1061.31 L149.047 1065.24 L129.14 1065.24 L129.14 1061.31 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M168.491 1033.76 Q164.88 1033.76 163.052 1037.33 Q161.246 1040.87 161.246 1048 Q161.246 1055.1 163.052 1058.67 Q164.88 1062.21 168.491 1062.21 Q172.126 1062.21 173.931 1058.67 Q175.76 1055.1 175.76 1048 Q175.76 1040.87 173.931 1037.33 Q172.126 1033.76 168.491 1033.76 M168.491 1030.06 Q174.302 1030.06 177.357 1034.66 Q180.436 1039.25 180.436 1048 Q180.436 1056.72 177.357 1061.33 Q174.302 1065.91 168.491 1065.91 Q162.681 1065.91 159.603 1061.33 Q156.547 1056.72 156.547 1048 Q156.547 1039.25 159.603 1034.66 Q162.681 1030.06 168.491 1030.06 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M63.9319 736.004 Q60.3208 736.004 58.4921 739.569 Q56.6865 743.11 56.6865 750.24 Q56.6865 757.346 58.4921 760.911 Q60.3208 764.453 63.9319 764.453 Q67.5661 764.453 69.3717 760.911 Q71.2004 757.346 71.2004 750.24 Q71.2004 743.11 69.3717 739.569 Q67.5661 736.004 63.9319 736.004 M63.9319 732.3 Q69.742 732.3 72.7976 736.907 Q75.8763 741.49 75.8763 750.24 Q75.8763 758.967 72.7976 763.573 Q69.742 768.156 63.9319 768.156 Q58.1217 768.156 55.043 763.573 Q51.9875 758.967 51.9875 750.24 Q51.9875 741.49 55.043 736.907 Q58.1217 732.3 63.9319 732.3 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M84.0938 761.606 L88.978 761.606 L88.978 767.485 L84.0938 767.485 L84.0938 761.606 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M109.163 736.004 Q105.552 736.004 103.723 739.569 Q101.918 743.11 101.918 750.24 Q101.918 757.346 103.723 760.911 Q105.552 764.453 109.163 764.453 Q112.797 764.453 114.603 760.911 Q116.432 757.346 116.432 750.24 Q116.432 743.11 114.603 739.569 Q112.797 736.004 109.163 736.004 M109.163 732.3 Q114.973 732.3 118.029 736.907 Q121.107 741.49 121.107 750.24 Q121.107 758.967 118.029 763.573 Q114.973 768.156 109.163 768.156 Q103.353 768.156 100.274 763.573 Q97.2187 758.967 97.2187 750.24 Q97.2187 741.49 100.274 736.907 Q103.353 732.3 109.163 732.3 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M130.135 763.55 L137.774 763.55 L137.774 737.184 L129.464 738.851 L129.464 734.592 L137.728 732.925 L142.404 732.925 L142.404 763.55 L150.043 763.55 L150.043 767.485 L130.135 767.485 L130.135 763.55 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M159.533 732.925 L177.89 732.925 L177.89 736.86 L163.816 736.86 L163.816 745.332 Q164.834 744.985 165.853 744.823 Q166.871 744.638 167.89 744.638 Q173.677 744.638 177.056 747.809 Q180.436 750.981 180.436 756.397 Q180.436 761.976 176.964 765.078 Q173.491 768.156 167.172 768.156 Q164.996 768.156 162.728 767.786 Q160.482 767.416 158.075 766.675 L158.075 761.976 Q160.158 763.11 162.38 763.666 Q164.603 764.221 167.079 764.221 Q171.084 764.221 173.422 762.115 Q175.76 760.008 175.76 756.397 Q175.76 752.786 173.422 750.68 Q171.084 748.573 167.079 748.573 Q165.204 748.573 163.329 748.99 Q161.478 749.407 159.533 750.286 L159.533 732.925 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M62.9365 438.247 Q59.3254 438.247 57.4967 441.812 Q55.6912 445.354 55.6912 452.483 Q55.6912 459.59 57.4967 463.154 Q59.3254 466.696 62.9365 466.696 Q66.5707 466.696 68.3763 463.154 Q70.205 459.59 70.205 452.483 Q70.205 445.354 68.3763 441.812 Q66.5707 438.247 62.9365 438.247 M62.9365 434.543 Q68.7467 434.543 71.8022 439.15 Q74.8809 443.733 74.8809 452.483 Q74.8809 461.21 71.8022 465.816 Q68.7467 470.4 62.9365 470.4 Q57.1264 470.4 54.0477 465.816 Q50.9921 461.21 50.9921 452.483 Q50.9921 443.733 54.0477 439.15 Q57.1264 434.543 62.9365 434.543 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M83.0984 463.849 L87.9827 463.849 L87.9827 469.728 L83.0984 469.728 L83.0984 463.849 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M108.168 438.247 Q104.557 438.247 102.728 441.812 Q100.922 445.354 100.922 452.483 Q100.922 459.59 102.728 463.154 Q104.557 466.696 108.168 466.696 Q111.802 466.696 113.608 463.154 Q115.436 459.59 115.436 452.483 Q115.436 445.354 113.608 441.812 Q111.802 438.247 108.168 438.247 M108.168 434.543 Q113.978 434.543 117.033 439.15 Q120.112 443.733 120.112 452.483 Q120.112 461.21 117.033 465.816 Q113.978 470.4 108.168 470.4 Q102.358 470.4 99.2789 465.816 Q96.2234 461.21 96.2234 452.483 Q96.2234 443.733 99.2789 439.15 Q102.358 434.543 108.168 434.543 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M132.357 465.793 L148.677 465.793 L148.677 469.728 L126.732 469.728 L126.732 465.793 Q129.394 463.039 133.978 458.409 Q138.584 453.756 139.765 452.414 Q142.01 449.891 142.89 448.155 Q143.793 446.395 143.793 444.705 Q143.793 441.951 141.848 440.215 Q139.927 438.479 136.825 438.479 Q134.626 438.479 132.172 439.243 Q129.742 440.006 126.964 441.557 L126.964 436.835 Q129.788 435.701 132.242 435.122 Q134.695 434.543 136.732 434.543 Q142.103 434.543 145.297 437.229 Q148.492 439.914 148.492 444.405 Q148.492 446.534 147.681 448.455 Q146.894 450.354 144.788 452.946 Q144.209 453.617 141.107 456.835 Q138.006 460.029 132.357 465.793 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M168.491 438.247 Q164.88 438.247 163.052 441.812 Q161.246 445.354 161.246 452.483 Q161.246 459.59 163.052 463.154 Q164.88 466.696 168.491 466.696 Q172.126 466.696 173.931 463.154 Q175.76 459.59 175.76 452.483 Q175.76 445.354 173.931 441.812 Q172.126 438.247 168.491 438.247 M168.491 434.543 Q174.302 434.543 177.357 439.15 Q180.436 443.733 180.436 452.483 Q180.436 461.21 177.357 465.816 Q174.302 470.4 168.491 470.4 Q162.681 470.4 159.603 465.816 Q156.547 461.21 156.547 452.483 Q156.547 443.733 159.603 439.15 Q162.681 434.543 168.491 434.543 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M63.9319 140.49 Q60.3208 140.49 58.4921 144.055 Q56.6865 147.597 56.6865 154.727 Q56.6865 161.833 58.4921 165.398 Q60.3208 168.939 63.9319 168.939 Q67.5661 168.939 69.3717 165.398 Q71.2004 161.833 71.2004 154.727 Q71.2004 147.597 69.3717 144.055 Q67.5661 140.49 63.9319 140.49 M63.9319 136.787 Q69.742 136.787 72.7976 141.393 Q75.8763 145.977 75.8763 154.727 Q75.8763 163.453 72.7976 168.06 Q69.742 172.643 63.9319 172.643 Q58.1217 172.643 55.043 168.06 Q51.9875 163.453 51.9875 154.727 Q51.9875 145.977 55.043 141.393 Q58.1217 136.787 63.9319 136.787 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M84.0938 166.092 L88.978 166.092 L88.978 171.972 L84.0938 171.972 L84.0938 166.092 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M109.163 140.49 Q105.552 140.49 103.723 144.055 Q101.918 147.597 101.918 154.727 Q101.918 161.833 103.723 165.398 Q105.552 168.939 109.163 168.939 Q112.797 168.939 114.603 165.398 Q116.432 161.833 116.432 154.727 Q116.432 147.597 114.603 144.055 Q112.797 140.49 109.163 140.49 M109.163 136.787 Q114.973 136.787 118.029 141.393 Q121.107 145.977 121.107 154.727 Q121.107 163.453 118.029 168.06 Q114.973 172.643 109.163 172.643 Q103.353 172.643 100.274 168.06 Q97.2187 163.453 97.2187 154.727 Q97.2187 145.977 100.274 141.393 Q103.353 136.787 109.163 136.787 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M133.353 168.037 L149.672 168.037 L149.672 171.972 L127.728 171.972 L127.728 168.037 Q130.39 165.282 134.973 160.652 Q139.58 156 140.76 154.657 Q143.006 152.134 143.885 150.398 Q144.788 148.639 144.788 146.949 Q144.788 144.194 142.843 142.458 Q140.922 140.722 137.82 140.722 Q135.621 140.722 133.168 141.486 Q130.737 142.25 127.959 143.801 L127.959 139.078 Q130.783 137.944 133.237 137.366 Q135.691 136.787 137.728 136.787 Q143.098 136.787 146.293 139.472 Q149.487 142.157 149.487 146.648 Q149.487 148.777 148.677 150.699 Q147.89 152.597 145.783 155.189 Q145.205 155.861 142.103 159.078 Q139.001 162.273 133.353 168.037 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M159.533 137.412 L177.89 137.412 L177.89 141.347 L163.816 141.347 L163.816 149.819 Q164.834 149.472 165.853 149.31 Q166.871 149.125 167.89 149.125 Q173.677 149.125 177.056 152.296 Q180.436 155.467 180.436 160.884 Q180.436 166.463 176.964 169.564 Q173.491 172.643 167.172 172.643 Q164.996 172.643 162.728 172.273 Q160.482 171.902 158.075 171.162 L158.075 166.463 Q160.158 167.597 162.38 168.152 Q164.603 168.708 167.079 168.708 Q171.084 168.708 173.422 166.601 Q175.76 164.495 175.76 160.884 Q175.76 157.273 173.422 155.166 Q171.084 153.06 167.079 153.06 Q165.204 153.06 163.329 153.477 Q161.478 153.893 159.533 154.773 L159.533 137.412 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip842)\" style=\"stroke:#009af9; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  276.898,1390.54 308.888,1359.09 340.879,1324.98 372.869,1288.17 404.859,1248.64 436.85,1206.44 468.84,1161.6 500.831,1114.24 532.821,1064.49 564.812,1012.54 \n  596.802,958.598 628.792,902.947 660.783,845.895 692.773,787.796 724.764,729.045 756.754,670.069 788.744,611.329 820.735,553.312 852.725,496.522 884.716,441.479 \n  916.706,388.705 948.697,338.72 980.687,292.034 1012.68,249.135 1044.67,210.482 1076.66,176.5 1108.65,147.567 1140.64,124.009 1172.63,106.098 1204.62,94.0406 \n  1236.61,87.9763 1268.6,87.9763 1300.59,94.0406 1332.58,106.098 1364.57,124.009 1396.56,147.567 1428.55,176.5 1460.54,210.482 1492.53,249.135 1524.52,292.034 \n  1556.51,338.72 1588.5,388.705 1620.5,441.479 1652.49,496.522 1684.48,553.312 1716.47,611.329 1748.46,670.069 1780.45,729.045 1812.44,787.796 1844.43,845.895 \n  1876.42,902.947 1908.41,958.598 1940.4,1012.54 1972.39,1064.49 2004.38,1114.24 2036.37,1161.6 2068.36,1206.44 2100.35,1248.64 2132.34,1288.17 2164.33,1324.98 \n  2196.32,1359.09 2228.31,1390.54 2260.3,1419.38 2292.29,1445.72 \n  \"/>\n<path clip-path=\"url(#clip840)\" d=\"\nM1991.75 198.898 L2281.55 198.898 L2281.55 95.2176 L1991.75 95.2176  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1991.75,198.898 2281.55,198.898 2281.55,95.2176 1991.75,95.2176 1991.75,198.898 \n  \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#009af9; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  2015.48,147.058 2157.9,147.058 \n  \"/>\n<path clip-path=\"url(#clip840)\" d=\"M2195.48 166.745 Q2193.68 171.375 2191.97 172.787 Q2190.25 174.199 2187.38 174.199 L2183.98 174.199 L2183.98 170.634 L2186.48 170.634 Q2188.24 170.634 2189.21 169.8 Q2190.18 168.967 2191.36 165.865 L2192.13 163.921 L2181.64 138.412 L2186.16 138.412 L2194.26 158.689 L2202.36 138.412 L2206.87 138.412 L2195.48 166.745 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M2214.16 160.402 L2221.8 160.402 L2221.8 134.037 L2213.49 135.703 L2213.49 131.444 L2221.76 129.778 L2226.43 129.778 L2226.43 160.402 L2234.07 160.402 L2234.07 164.338 L2214.16 164.338 L2214.16 160.402 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html#Create-the-Circuit","page":"Quantum Circuit Born Machine","title":"Create the Circuit","text":"","category":"section"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"A quantum circuit born machine looks like the following:","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"(Image: differentiable ciruit)","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"It is composited by two different layers: rotation layer and entangler layer.","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html#Rotation-Layer","page":"Quantum Circuit Born Machine","title":"Rotation Layer","text":"","category":"section"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"Arbitrary rotation is built with Rotation Gate on Z, X, Z axis with parameters.","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"Rz(theta) cdot Rx(theta) cdot Rz(theta)","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"Since our input will be a 0dots 0rangle state. The first layer of arbitrary rotation can just use Rx(theta) cdot Rz(theta) and the last layer of arbitrary rotation could just use Rz(theta)cdot Rx(theta)","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"In 幺, every Hilbert operator is a block type, this ncludes all quantum gates and quantum oracles. In general, operators appears in a quantum circuit can be divided into Composite Blocks and Primitive Blocks.","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"We follow the low abstraction principle and thus each block represents a certain approach of calculation. The simplest Composite Block is a Chain Block, which chains other blocks (oracles) with the same number of qubits together. It is just a simple mathematical composition of operators with same size. e.g.","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"textchain(X Y Z) iff X cdot Y cdot Z","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"We can construct an arbitrary rotation block by chain Rz, Rx, Rz together.","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"chain(Rz(0.0), Rx(0.0), Rz(0.0))","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"nqubits: 1\nchain\n├─ rot(Z, 0.0)\n├─ rot(X, 0.0)\n└─ rot(Z, 0.0)","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"Rx, Rz will construct new rotation gate, which are just shorthands for rot(X, 0.0), etc.","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"Then let's chain them up","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"layer(nbit::Int, x::Symbol) = layer(nbit, Val(x))\nlayer(nbit::Int, ::Val{:first}) = chain(nbit, put(i=>chain(Rx(0), Rz(0))) for i = 1:nbit);\nnothing #hide","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"We do not need to feed the first n parameter into put here. All factory methods can be lazy evaluate the first arguements, which is the number of qubits. It will return a lambda function that requires a single interger input. The instance of desired block will only be constructed until all the information is filled. When you filled all the information in somewhere of the declaration, 幺 will be able to infer the others. We will now define the rest of rotation layers","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"layer(nbit::Int, ::Val{:last}) = chain(nbit, put(i=>chain(Rz(0), Rx(0))) for i = 1:nbit)\nlayer(nbit::Int, ::Val{:mid}) = chain(nbit, put(i=>chain(Rz(0), Rx(0), Rz(0))) for i = 1:nbit);\nnothing #hide","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html#Entangler","page":"Quantum Circuit Born Machine","title":"Entangler","text":"","category":"section"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"Another component of quantum circuit born machine are several CNOT operators applied on different qubits.","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"entangler(pairs) = chain(control(ctrl, target=>X) for (ctrl, target) in pairs);\nnothing #hide","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"We can then define such a born machine","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"function build_circuit(n, nlayers, pairs)\n    circuit = chain(n)\n    push!(circuit, layer(n, :first))\n    for i in 2:nlayers\n        push!(circuit, cache(entangler(pairs)))\n        push!(circuit, layer(n, :mid))\n    end\n    push!(circuit, cache(entangler(pairs)))\n    push!(circuit, layer(n, :last))\n    return circuit\nend","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"build_circuit (generic function with 1 method)","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"We use the method cache here to tag the entangler block that it should be cached after its first run, because it is actually a constant oracle. Let's see what will be constructed","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"build_circuit(4, 1, [1=>2, 2=>3, 3=>4])","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"nqubits: 4\nchain\n├─ chain\n│  ├─ put on (1)\n│  │  └─ chain\n│  │     ├─ rot(X, 0.0)\n│  │     └─ rot(Z, 0.0)\n│  ├─ put on (2)\n│  │  └─ chain\n│  │     ├─ rot(X, 0.0)\n│  │     └─ rot(Z, 0.0)\n│  ├─ put on (3)\n│  │  └─ chain\n│  │     ├─ rot(X, 0.0)\n│  │     └─ rot(Z, 0.0)\n│  └─ put on (4)\n│     └─ chain\n│        ├─ rot(X, 0.0)\n│        └─ rot(Z, 0.0)\n├─ [cached] chain\n│     ├─ control(1)\n│     │  └─ (2,) X\n│     ├─ control(2)\n│     │  └─ (3,) X\n│     └─ control(3)\n│        └─ (4,) X\n└─ chain\n   ├─ put on (1)\n   │  └─ chain\n   │     ├─ rot(Z, 0.0)\n   │     └─ rot(X, 0.0)\n   ├─ put on (2)\n   │  └─ chain\n   │     ├─ rot(Z, 0.0)\n   │     └─ rot(X, 0.0)\n   ├─ put on (3)\n   │  └─ chain\n   │     ├─ rot(Z, 0.0)\n   │     └─ rot(X, 0.0)\n   └─ put on (4)\n      └─ chain\n         ├─ rot(Z, 0.0)\n         └─ rot(X, 0.0)\n","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html#MMD-Loss-and-Gradients","page":"Quantum Circuit Born Machine","title":"MMD Loss & Gradients","text":"","category":"section"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"The MMD loss is describe below:","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"beginaligned\nmathcalL = left sum_x p theta(x) phi(x) - sum_x pi(x) phi(x) right^2\n            = langle K(x y) rangle_x sim p_theta ysim p_theta - 2 langle K(x y) rangle_xsim p_theta ysim pi + langle K(x y) rangle_xsimpi ysimpi\nendaligned","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"We will use a squared exponential kernel here.","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"struct RBFKernel\n    σ::Float64\n    m::Matrix{Float64}\nend\n\nfunction RBFKernel(σ::Float64, space)\n    dx2 = (space .- space').^2\n    return RBFKernel(σ, exp.(-1/2σ * dx2))\nend\n\nkexpect(κ::RBFKernel, x, y) = x' * κ.m * y","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"kexpect (generic function with 1 method)","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"There are two different way to define the loss:","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"In simulation we can use the probability distribution of the state directly","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"get_prob(qcbm) = probs(zero_state(nqubits(qcbm)) |> qcbm)\n\nfunction loss(κ, c, target)\n    p = get_prob(c) - target\n    return kexpect(κ, p, p)\nend","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"loss (generic function with 1 method)","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"Or if you want to simulate the whole process with measurement (which is entirely physical), you should define the loss with measurement results, for convenience we directly use the simulated results as our loss","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html#Gradients","page":"Quantum Circuit Born Machine","title":"Gradients","text":"","category":"section"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"the gradient of MMD loss is","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"beginaligned\nfracpartial mathcalLpartial theta^i_l = langle K(x y) rangle_xsim p_theta^+ ysim p_theta - langle K(x y) rangle_xsim p_theta^- ysim p_theta\n- langle K(x y) rangle _xsim p_theta^+ ysimpi + langle K(x y) rangle_xsim p_theta^- ysimpi\nendaligned","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"which can be implemented as","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"function gradient(qcbm, κ, ptrain)\n    n = nqubits(qcbm)\n    prob = get_prob(qcbm)\n    grad = zeros(Float64, nparameters(qcbm))\n\n    count = 1\n    for k in 1:2:length(qcbm), each_line in qcbm[k], gate in content(each_line)\n        dispatch!(+, gate, π/2)\n        prob_pos = probs(zero_state(n) |> qcbm)\n\n        dispatch!(-, gate, π)\n        prob_neg = probs(zero_state(n) |> qcbm)\n\n        dispatch!(+, gate, π/2) # set back\n\n        grad_pos = kexpect(κ, prob, prob_pos) - kexpect(κ, prob, prob_neg)\n        grad_neg = kexpect(κ, ptrain, prob_pos) - kexpect(κ, ptrain, prob_neg)\n        grad[count] = grad_pos - grad_neg\n        count += 1\n    end\n    return grad\nend","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"gradient (generic function with 1 method)","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"Now let's setup the training","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"import QuAlgorithmZoo\nqcbm = build_circuit(6, 10, [1=>2, 3=>4, 5=>6, 2=>3, 4=>5, 6=>1])\ndispatch!(qcbm, :random) # initialize the parameters\n\nκ = RBFKernel(0.25, 0:2^6-1)\npg = gaussian_pdf(1:1<<6, 1<<5-0.5, 1<<4);\nopt = QuAlgorithmZoo.Adam(lr=0.01)\n\nfunction train(qcbm, κ, opt, target)\n    history = Float64[]\n    for _ in 1:100\n        push!(history, loss(κ, qcbm, target))\n        ps = parameters(qcbm)\n        QuAlgorithmZoo.update!(ps, gradient(qcbm, κ, target), opt)\n        dispatch!(qcbm, ps)\n    end\n    return history\nend\n\nhistory = train(qcbm, κ, opt, pg)\ntrained_pg = probs(zero_state(nqubits(qcbm)) |> qcbm)","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"64-element Vector{Float64}:\n 0.0038156255274070638\n 0.005008389111701892\n 0.005109133776826857\n 0.005942014728892295\n 0.006695489807704772\n 0.007312546030368364\n 0.00817615658055201\n 0.008926130106400192\n 0.009700830913263223\n 0.010581586935452985\n 0.011540585498974892\n 0.012567560343107442\n 0.013261132053289429\n 0.014652804355975657\n 0.015332189158500608\n 0.016194666264594235\n 0.01734008427278033\n 0.018370321354076822\n 0.019339158159618113\n 0.020215490643203163\n 0.020996248843982136\n 0.0219316265331833\n 0.02255266621558629\n 0.023416084019656523\n 0.02391705619672669\n 0.024522999640062118\n 0.025142663387497953\n 0.025468132456825204\n 0.025724359477258315\n 0.025997813611965653\n 0.02616036227396499\n 0.02611876183175823\n 0.0259674836748427\n 0.02581043593800156\n 0.025472426121961444\n 0.025201698741838842\n 0.024677881469496774\n 0.0240719190553318\n 0.023401271147359085\n 0.022693416926379734\n 0.02194748833188872\n 0.02097005670388729\n 0.020333979439250905\n 0.01927525562133604\n 0.01827143469490385\n 0.017269655652549315\n 0.016564783451512428\n 0.015329955522129648\n 0.014487740337435311\n 0.013361677337282062\n 0.012394494533876197\n 0.011481532650654687\n 0.010576275667576076\n 0.009735133597440835\n 0.008973016321449416\n 0.00793907984147155\n 0.007531783596389916\n 0.00662179629894089\n 0.006042138216748513\n 0.0052531926302614145\n 0.004958586133237451\n 0.00421790094049489\n 0.004211436239962836\n 0.00292440305294923","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"The history of training looks like below","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"title!(\"training history\")\nxlabel!(\"steps\"); ylabel!(\"loss\")\nplot(history)","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip870\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip870)\" d=\"\nM0 1600 L2400 1600 L2400 0 L0 0  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip871\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip870)\" d=\"\nM216.436 1486.45 L2352.76 1486.45 L2352.76 47.2441 L216.436 47.2441  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip872\">\n    <rect x=\"216\" y=\"47\" width=\"2137\" height=\"1440\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  256.54,1486.45 256.54,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  765.479,1486.45 765.479,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1274.42,1486.45 1274.42,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1783.36,1486.45 1783.36,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  2292.29,1486.45 2292.29,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  216.436,1486.45 2352.76,1486.45 \n  \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  256.54,1486.45 256.54,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  765.479,1486.45 765.479,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1274.42,1486.45 1274.42,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1783.36,1486.45 1783.36,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  2292.29,1486.45 2292.29,1467.55 \n  \"/>\n<path clip-path=\"url(#clip870)\" d=\"M256.54 1517.37 Q252.929 1517.37 251.1 1520.93 Q249.295 1524.47 249.295 1531.6 Q249.295 1538.71 251.1 1542.27 Q252.929 1545.82 256.54 1545.82 Q260.174 1545.82 261.98 1542.27 Q263.809 1538.71 263.809 1531.6 Q263.809 1524.47 261.98 1520.93 Q260.174 1517.37 256.54 1517.37 M256.54 1513.66 Q262.35 1513.66 265.406 1518.27 Q268.485 1522.85 268.485 1531.6 Q268.485 1540.33 265.406 1544.94 Q262.35 1549.52 256.54 1549.52 Q250.73 1549.52 247.651 1544.94 Q244.596 1540.33 244.596 1531.6 Q244.596 1522.85 247.651 1518.27 Q250.73 1513.66 256.54 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M744.75 1544.91 L761.069 1544.91 L761.069 1548.85 L739.125 1548.85 L739.125 1544.91 Q741.787 1542.16 746.37 1537.53 Q750.976 1532.88 752.157 1531.53 Q754.402 1529.01 755.282 1527.27 Q756.185 1525.51 756.185 1523.82 Q756.185 1521.07 754.24 1519.33 Q752.319 1517.6 749.217 1517.6 Q747.018 1517.6 744.564 1518.36 Q742.134 1519.13 739.356 1520.68 L739.356 1515.95 Q742.18 1514.82 744.634 1514.24 Q747.088 1513.66 749.125 1513.66 Q754.495 1513.66 757.689 1516.35 Q760.884 1519.03 760.884 1523.52 Q760.884 1525.65 760.074 1527.57 Q759.287 1529.47 757.18 1532.07 Q756.601 1532.74 753.5 1535.95 Q750.398 1539.15 744.75 1544.91 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M770.93 1514.29 L789.286 1514.29 L789.286 1518.22 L775.212 1518.22 L775.212 1526.7 Q776.231 1526.35 777.249 1526.19 Q778.268 1526 779.286 1526 Q785.073 1526 788.453 1529.17 Q791.833 1532.34 791.833 1537.76 Q791.833 1543.34 788.36 1546.44 Q784.888 1549.52 778.569 1549.52 Q776.393 1549.52 774.124 1549.15 Q771.879 1548.78 769.472 1548.04 L769.472 1543.34 Q771.555 1544.47 773.777 1545.03 Q775.999 1545.58 778.476 1545.58 Q782.481 1545.58 784.819 1543.48 Q787.157 1541.37 787.157 1537.76 Q787.157 1534.15 784.819 1532.04 Q782.481 1529.94 778.476 1529.94 Q776.601 1529.94 774.726 1530.35 Q772.874 1530.77 770.93 1531.65 L770.93 1514.29 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1249.12 1514.29 L1267.47 1514.29 L1267.47 1518.22 L1253.4 1518.22 L1253.4 1526.7 Q1254.42 1526.35 1255.44 1526.19 Q1256.45 1526 1257.47 1526 Q1263.26 1526 1266.64 1529.17 Q1270.02 1532.34 1270.02 1537.76 Q1270.02 1543.34 1266.55 1546.44 Q1263.07 1549.52 1256.76 1549.52 Q1254.58 1549.52 1252.31 1549.15 Q1250.07 1548.78 1247.66 1548.04 L1247.66 1543.34 Q1249.74 1544.47 1251.96 1545.03 Q1254.19 1545.58 1256.66 1545.58 Q1260.67 1545.58 1263.01 1543.48 Q1265.34 1541.37 1265.34 1537.76 Q1265.34 1534.15 1263.01 1532.04 Q1260.67 1529.94 1256.66 1529.94 Q1254.79 1529.94 1252.91 1530.35 Q1251.06 1530.77 1249.12 1531.65 L1249.12 1514.29 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1289.23 1517.37 Q1285.62 1517.37 1283.79 1520.93 Q1281.99 1524.47 1281.99 1531.6 Q1281.99 1538.71 1283.79 1542.27 Q1285.62 1545.82 1289.23 1545.82 Q1292.87 1545.82 1294.67 1542.27 Q1296.5 1538.71 1296.5 1531.6 Q1296.5 1524.47 1294.67 1520.93 Q1292.87 1517.37 1289.23 1517.37 M1289.23 1513.66 Q1295.04 1513.66 1298.1 1518.27 Q1301.18 1522.85 1301.18 1531.6 Q1301.18 1540.33 1298.1 1544.94 Q1295.04 1549.52 1289.23 1549.52 Q1283.42 1549.52 1280.34 1544.94 Q1277.29 1540.33 1277.29 1531.6 Q1277.29 1522.85 1280.34 1518.27 Q1283.42 1513.66 1289.23 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1757.21 1514.29 L1779.43 1514.29 L1779.43 1516.28 L1766.89 1548.85 L1762 1548.85 L1773.81 1518.22 L1757.21 1518.22 L1757.21 1514.29 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1788.6 1514.29 L1806.95 1514.29 L1806.95 1518.22 L1792.88 1518.22 L1792.88 1526.7 Q1793.9 1526.35 1794.92 1526.19 Q1795.94 1526 1796.96 1526 Q1802.74 1526 1806.12 1529.17 Q1809.5 1532.34 1809.5 1537.76 Q1809.5 1543.34 1806.03 1546.44 Q1802.56 1549.52 1796.24 1549.52 Q1794.06 1549.52 1791.79 1549.15 Q1789.55 1548.78 1787.14 1548.04 L1787.14 1543.34 Q1789.22 1544.47 1791.45 1545.03 Q1793.67 1545.58 1796.14 1545.58 Q1800.15 1545.58 1802.49 1543.48 Q1804.83 1541.37 1804.83 1537.76 Q1804.83 1534.15 1802.49 1532.04 Q1800.15 1529.94 1796.14 1529.94 Q1794.27 1529.94 1792.39 1530.35 Q1790.54 1530.77 1788.6 1531.65 L1788.6 1514.29 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M2251.9 1544.91 L2259.54 1544.91 L2259.54 1518.55 L2251.23 1520.21 L2251.23 1515.95 L2259.49 1514.29 L2264.17 1514.29 L2264.17 1544.91 L2271.81 1544.91 L2271.81 1548.85 L2251.9 1548.85 L2251.9 1544.91 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M2291.25 1517.37 Q2287.64 1517.37 2285.81 1520.93 Q2284.01 1524.47 2284.01 1531.6 Q2284.01 1538.71 2285.81 1542.27 Q2287.64 1545.82 2291.25 1545.82 Q2294.89 1545.82 2296.69 1542.27 Q2298.52 1538.71 2298.52 1531.6 Q2298.52 1524.47 2296.69 1520.93 Q2294.89 1517.37 2291.25 1517.37 M2291.25 1513.66 Q2297.06 1513.66 2300.12 1518.27 Q2303.2 1522.85 2303.2 1531.6 Q2303.2 1540.33 2300.12 1544.94 Q2297.06 1549.52 2291.25 1549.52 Q2285.44 1549.52 2282.36 1544.94 Q2279.31 1540.33 2279.31 1531.6 Q2279.31 1522.85 2282.36 1518.27 Q2285.44 1513.66 2291.25 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M2321.41 1517.37 Q2317.8 1517.37 2315.97 1520.93 Q2314.17 1524.47 2314.17 1531.6 Q2314.17 1538.71 2315.97 1542.27 Q2317.8 1545.82 2321.41 1545.82 Q2325.05 1545.82 2326.85 1542.27 Q2328.68 1538.71 2328.68 1531.6 Q2328.68 1524.47 2326.85 1520.93 Q2325.05 1517.37 2321.41 1517.37 M2321.41 1513.66 Q2327.22 1513.66 2330.28 1518.27 Q2333.36 1522.85 2333.36 1531.6 Q2333.36 1540.33 2330.28 1544.94 Q2327.22 1549.52 2321.41 1549.52 Q2315.6 1549.52 2312.53 1544.94 Q2309.47 1540.33 2309.47 1531.6 Q2309.47 1522.85 2312.53 1518.27 Q2315.6 1513.66 2321.41 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  216.436,1445.81 2352.76,1445.81 \n  \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  216.436,1045.82 2352.76,1045.82 \n  \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  216.436,645.821 2352.76,645.821 \n  \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  216.436,245.827 2352.76,245.827 \n  \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  216.436,1486.45 216.436,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  216.436,1445.81 235.334,1445.81 \n  \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  216.436,1045.82 235.334,1045.82 \n  \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  216.436,645.821 235.334,645.821 \n  \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  216.436,245.827 235.334,245.827 \n  \"/>\n<path clip-path=\"url(#clip870)\" d=\"M62.9365 1431.61 Q59.3254 1431.61 57.4967 1435.17 Q55.6912 1438.71 55.6912 1445.84 Q55.6912 1452.95 57.4967 1456.51 Q59.3254 1460.06 62.9365 1460.06 Q66.5707 1460.06 68.3763 1456.51 Q70.205 1452.95 70.205 1445.84 Q70.205 1438.71 68.3763 1435.17 Q66.5707 1431.61 62.9365 1431.61 M62.9365 1427.9 Q68.7467 1427.9 71.8022 1432.51 Q74.8809 1437.09 74.8809 1445.84 Q74.8809 1454.57 71.8022 1459.18 Q68.7467 1463.76 62.9365 1463.76 Q57.1264 1463.76 54.0477 1459.18 Q50.9921 1454.57 50.9921 1445.84 Q50.9921 1437.09 54.0477 1432.51 Q57.1264 1427.9 62.9365 1427.9 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M83.0984 1457.21 L87.9827 1457.21 L87.9827 1463.09 L83.0984 1463.09 L83.0984 1457.21 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M108.168 1431.61 Q104.557 1431.61 102.728 1435.17 Q100.922 1438.71 100.922 1445.84 Q100.922 1452.95 102.728 1456.51 Q104.557 1460.06 108.168 1460.06 Q111.802 1460.06 113.608 1456.51 Q115.436 1452.95 115.436 1445.84 Q115.436 1438.71 113.608 1435.17 Q111.802 1431.61 108.168 1431.61 M108.168 1427.9 Q113.978 1427.9 117.033 1432.51 Q120.112 1437.09 120.112 1445.84 Q120.112 1454.57 117.033 1459.18 Q113.978 1463.76 108.168 1463.76 Q102.358 1463.76 99.2789 1459.18 Q96.2234 1454.57 96.2234 1445.84 Q96.2234 1437.09 99.2789 1432.51 Q102.358 1427.9 108.168 1427.9 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M138.33 1431.61 Q134.719 1431.61 132.89 1435.17 Q131.084 1438.71 131.084 1445.84 Q131.084 1452.95 132.89 1456.51 Q134.719 1460.06 138.33 1460.06 Q141.964 1460.06 143.769 1456.51 Q145.598 1452.95 145.598 1445.84 Q145.598 1438.71 143.769 1435.17 Q141.964 1431.61 138.33 1431.61 M138.33 1427.9 Q144.14 1427.9 147.195 1432.51 Q150.274 1437.09 150.274 1445.84 Q150.274 1454.57 147.195 1459.18 Q144.14 1463.76 138.33 1463.76 Q132.519 1463.76 129.441 1459.18 Q126.385 1454.57 126.385 1445.84 Q126.385 1437.09 129.441 1432.51 Q132.519 1427.9 138.33 1427.9 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M168.491 1431.61 Q164.88 1431.61 163.052 1435.17 Q161.246 1438.71 161.246 1445.84 Q161.246 1452.95 163.052 1456.51 Q164.88 1460.06 168.491 1460.06 Q172.126 1460.06 173.931 1456.51 Q175.76 1452.95 175.76 1445.84 Q175.76 1438.71 173.931 1435.17 Q172.126 1431.61 168.491 1431.61 M168.491 1427.9 Q174.302 1427.9 177.357 1432.51 Q180.436 1437.09 180.436 1445.84 Q180.436 1454.57 177.357 1459.18 Q174.302 1463.76 168.491 1463.76 Q162.681 1463.76 159.603 1459.18 Q156.547 1454.57 156.547 1445.84 Q156.547 1437.09 159.603 1432.51 Q162.681 1427.9 168.491 1427.9 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M63.9319 1031.61 Q60.3208 1031.61 58.4921 1035.18 Q56.6865 1038.72 56.6865 1045.85 Q56.6865 1052.96 58.4921 1056.52 Q60.3208 1060.06 63.9319 1060.06 Q67.5661 1060.06 69.3717 1056.52 Q71.2004 1052.96 71.2004 1045.85 Q71.2004 1038.72 69.3717 1035.18 Q67.5661 1031.61 63.9319 1031.61 M63.9319 1027.91 Q69.742 1027.91 72.7976 1032.52 Q75.8763 1037.1 75.8763 1045.85 Q75.8763 1054.58 72.7976 1059.18 Q69.742 1063.77 63.9319 1063.77 Q58.1217 1063.77 55.043 1059.18 Q51.9875 1054.58 51.9875 1045.85 Q51.9875 1037.1 55.043 1032.52 Q58.1217 1027.91 63.9319 1027.91 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M84.0938 1057.22 L88.978 1057.22 L88.978 1063.1 L84.0938 1063.1 L84.0938 1057.22 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M109.163 1031.61 Q105.552 1031.61 103.723 1035.18 Q101.918 1038.72 101.918 1045.85 Q101.918 1052.96 103.723 1056.52 Q105.552 1060.06 109.163 1060.06 Q112.797 1060.06 114.603 1056.52 Q116.432 1052.96 116.432 1045.85 Q116.432 1038.72 114.603 1035.18 Q112.797 1031.61 109.163 1031.61 M109.163 1027.91 Q114.973 1027.91 118.029 1032.52 Q121.107 1037.1 121.107 1045.85 Q121.107 1054.58 118.029 1059.18 Q114.973 1063.77 109.163 1063.77 Q103.353 1063.77 100.274 1059.18 Q97.2187 1054.58 97.2187 1045.85 Q97.2187 1037.1 100.274 1032.52 Q103.353 1027.91 109.163 1027.91 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M139.325 1031.61 Q135.714 1031.61 133.885 1035.18 Q132.08 1038.72 132.08 1045.85 Q132.08 1052.96 133.885 1056.52 Q135.714 1060.06 139.325 1060.06 Q142.959 1060.06 144.765 1056.52 Q146.593 1052.96 146.593 1045.85 Q146.593 1038.72 144.765 1035.18 Q142.959 1031.61 139.325 1031.61 M139.325 1027.91 Q145.135 1027.91 148.191 1032.52 Q151.269 1037.1 151.269 1045.85 Q151.269 1054.58 148.191 1059.18 Q145.135 1063.77 139.325 1063.77 Q133.515 1063.77 130.436 1059.18 Q127.381 1054.58 127.381 1045.85 Q127.381 1037.1 130.436 1032.52 Q133.515 1027.91 139.325 1027.91 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M159.533 1028.54 L177.89 1028.54 L177.89 1032.47 L163.816 1032.47 L163.816 1040.94 Q164.834 1040.6 165.853 1040.43 Q166.871 1040.25 167.89 1040.25 Q173.677 1040.25 177.056 1043.42 Q180.436 1046.59 180.436 1052.01 Q180.436 1057.59 176.964 1060.69 Q173.491 1063.77 167.172 1063.77 Q164.996 1063.77 162.728 1063.4 Q160.482 1063.03 158.075 1062.28 L158.075 1057.59 Q160.158 1058.72 162.38 1059.28 Q164.603 1059.83 167.079 1059.83 Q171.084 1059.83 173.422 1057.72 Q175.76 1055.62 175.76 1052.01 Q175.76 1048.4 173.422 1046.29 Q171.084 1044.18 167.079 1044.18 Q165.204 1044.18 163.329 1044.6 Q161.478 1045.02 159.533 1045.9 L159.533 1028.54 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M62.9365 631.62 Q59.3254 631.62 57.4967 635.185 Q55.6912 638.726 55.6912 645.856 Q55.6912 652.962 57.4967 656.527 Q59.3254 660.069 62.9365 660.069 Q66.5707 660.069 68.3763 656.527 Q70.205 652.962 70.205 645.856 Q70.205 638.726 68.3763 635.185 Q66.5707 631.62 62.9365 631.62 M62.9365 627.916 Q68.7467 627.916 71.8022 632.523 Q74.8809 637.106 74.8809 645.856 Q74.8809 654.583 71.8022 659.189 Q68.7467 663.772 62.9365 663.772 Q57.1264 663.772 54.0477 659.189 Q50.9921 654.583 50.9921 645.856 Q50.9921 637.106 54.0477 632.523 Q57.1264 627.916 62.9365 627.916 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M83.0984 657.222 L87.9827 657.222 L87.9827 663.101 L83.0984 663.101 L83.0984 657.222 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M108.168 631.62 Q104.557 631.62 102.728 635.185 Q100.922 638.726 100.922 645.856 Q100.922 652.962 102.728 656.527 Q104.557 660.069 108.168 660.069 Q111.802 660.069 113.608 656.527 Q115.436 652.962 115.436 645.856 Q115.436 638.726 113.608 635.185 Q111.802 631.62 108.168 631.62 M108.168 627.916 Q113.978 627.916 117.033 632.523 Q120.112 637.106 120.112 645.856 Q120.112 654.583 117.033 659.189 Q113.978 663.772 108.168 663.772 Q102.358 663.772 99.2789 659.189 Q96.2234 654.583 96.2234 645.856 Q96.2234 637.106 99.2789 632.523 Q102.358 627.916 108.168 627.916 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M129.14 659.166 L136.779 659.166 L136.779 632.8 L128.469 634.467 L128.469 630.208 L136.732 628.541 L141.408 628.541 L141.408 659.166 L149.047 659.166 L149.047 663.101 L129.14 663.101 L129.14 659.166 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M168.491 631.62 Q164.88 631.62 163.052 635.185 Q161.246 638.726 161.246 645.856 Q161.246 652.962 163.052 656.527 Q164.88 660.069 168.491 660.069 Q172.126 660.069 173.931 656.527 Q175.76 652.962 175.76 645.856 Q175.76 638.726 173.931 635.185 Q172.126 631.62 168.491 631.62 M168.491 627.916 Q174.302 627.916 177.357 632.523 Q180.436 637.106 180.436 645.856 Q180.436 654.583 177.357 659.189 Q174.302 663.772 168.491 663.772 Q162.681 663.772 159.603 659.189 Q156.547 654.583 156.547 645.856 Q156.547 637.106 159.603 632.523 Q162.681 627.916 168.491 627.916 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M63.9319 231.626 Q60.3208 231.626 58.4921 235.191 Q56.6865 238.732 56.6865 245.862 Q56.6865 252.969 58.4921 256.533 Q60.3208 260.075 63.9319 260.075 Q67.5661 260.075 69.3717 256.533 Q71.2004 252.969 71.2004 245.862 Q71.2004 238.732 69.3717 235.191 Q67.5661 231.626 63.9319 231.626 M63.9319 227.922 Q69.742 227.922 72.7976 232.529 Q75.8763 237.112 75.8763 245.862 Q75.8763 254.589 72.7976 259.195 Q69.742 263.779 63.9319 263.779 Q58.1217 263.779 55.043 259.195 Q51.9875 254.589 51.9875 245.862 Q51.9875 237.112 55.043 232.529 Q58.1217 227.922 63.9319 227.922 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M84.0938 257.228 L88.978 257.228 L88.978 263.107 L84.0938 263.107 L84.0938 257.228 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M109.163 231.626 Q105.552 231.626 103.723 235.191 Q101.918 238.732 101.918 245.862 Q101.918 252.969 103.723 256.533 Q105.552 260.075 109.163 260.075 Q112.797 260.075 114.603 256.533 Q116.432 252.969 116.432 245.862 Q116.432 238.732 114.603 235.191 Q112.797 231.626 109.163 231.626 M109.163 227.922 Q114.973 227.922 118.029 232.529 Q121.107 237.112 121.107 245.862 Q121.107 254.589 118.029 259.195 Q114.973 263.779 109.163 263.779 Q103.353 263.779 100.274 259.195 Q97.2187 254.589 97.2187 245.862 Q97.2187 237.112 100.274 232.529 Q103.353 227.922 109.163 227.922 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M130.135 259.172 L137.774 259.172 L137.774 232.807 L129.464 234.473 L129.464 230.214 L137.728 228.547 L142.404 228.547 L142.404 259.172 L150.043 259.172 L150.043 263.107 L130.135 263.107 L130.135 259.172 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M159.533 228.547 L177.89 228.547 L177.89 232.483 L163.816 232.483 L163.816 240.955 Q164.834 240.607 165.853 240.445 Q166.871 240.26 167.89 240.26 Q173.677 240.26 177.056 243.432 Q180.436 246.603 180.436 252.019 Q180.436 257.598 176.964 260.7 Q173.491 263.779 167.172 263.779 Q164.996 263.779 162.728 263.408 Q160.482 263.038 158.075 262.297 L158.075 257.598 Q160.158 258.732 162.38 259.288 Q164.603 259.843 167.079 259.843 Q171.084 259.843 173.422 257.737 Q175.76 255.631 175.76 252.019 Q175.76 248.408 173.422 246.302 Q171.084 244.195 167.079 244.195 Q165.204 244.195 163.329 244.612 Q161.478 245.029 159.533 245.908 L159.533 228.547 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip872)\" style=\"stroke:#009af9; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  276.898,87.9763 297.255,411.723 317.613,635.662 337.97,789.808 358.328,897.641 378.685,976.969 399.043,1038.43 419.401,1087.95 439.758,1129.67 460.116,1166.49 \n  480.473,1199.31 500.831,1227.7 521.188,1251.67 541.546,1272.09 561.903,1289.76 582.261,1304.62 602.618,1316.33 622.976,1325.28 643.333,1332.71 663.691,1339.97 \n  684.049,1347.73 704.406,1355.83 724.764,1363.69 745.121,1370.78 765.479,1376.97 785.836,1382.54 806.194,1387.88 826.551,1393.31 846.909,1398.89 867.266,1404.42 \n  887.624,1409.58 907.981,1414.11 928.339,1417.9 948.697,1421 969.054,1423.55 989.412,1425.69 1009.77,1427.46 1030.13,1428.9 1050.48,1430.1 1070.84,1431.24 \n  1091.2,1432.45 1111.56,1433.73 1131.91,1434.94 1152.27,1435.9 1172.63,1436.54 1192.99,1436.95 1213.34,1437.33 1233.7,1437.86 1254.06,1438.61 1274.42,1439.49 \n  1294.77,1440.32 1315.13,1440.97 1335.49,1441.39 1355.85,1441.63 1376.2,1441.78 1396.56,1441.89 1416.92,1442.02 1437.28,1442.17 1457.63,1442.36 1477.99,1442.6 \n  1498.35,1442.89 1518.71,1443.17 1539.07,1443.41 1559.42,1443.59 1579.78,1443.73 1600.14,1443.85 1620.5,1443.98 1640.85,1444.12 1661.21,1444.25 1681.57,1444.37 \n  1701.93,1444.46 1722.28,1444.55 1742.64,1444.64 1763,1444.72 1783.36,1444.78 1803.71,1444.82 1824.07,1444.85 1844.43,1444.88 1864.79,1444.93 1885.14,1444.98 \n  1905.5,1445.03 1925.86,1445.09 1946.22,1445.14 1966.57,1445.2 1986.93,1445.25 2007.29,1445.3 2027.65,1445.34 2048,1445.38 2068.36,1445.43 2088.72,1445.47 \n  2109.08,1445.52 2129.43,1445.56 2149.79,1445.59 2170.15,1445.62 2190.51,1445.64 2210.86,1445.66 2231.22,1445.68 2251.58,1445.69 2271.94,1445.7 2292.29,1445.72 \n  \n  \"/>\n<path clip-path=\"url(#clip870)\" d=\"\nM1991.75 198.898 L2281.55 198.898 L2281.55 95.2176 L1991.75 95.2176  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1991.75,198.898 2281.55,198.898 2281.55,95.2176 1991.75,95.2176 1991.75,198.898 \n  \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#009af9; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  2015.48,147.058 2157.9,147.058 \n  \"/>\n<path clip-path=\"url(#clip870)\" d=\"M2195.48 166.745 Q2193.68 171.375 2191.97 172.787 Q2190.25 174.199 2187.38 174.199 L2183.98 174.199 L2183.98 170.634 L2186.48 170.634 Q2188.24 170.634 2189.21 169.8 Q2190.18 168.967 2191.36 165.865 L2192.13 163.921 L2181.64 138.412 L2186.16 138.412 L2194.26 158.689 L2202.36 138.412 L2206.87 138.412 L2195.48 166.745 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M2214.16 160.402 L2221.8 160.402 L2221.8 134.037 L2213.49 135.703 L2213.49 131.444 L2221.76 129.778 L2226.43 129.778 L2226.43 160.402 L2234.07 160.402 L2234.07 164.338 L2214.16 164.338 L2214.16 160.402 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"And let's check what we got","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"fig2 = plot(1:1<<6, trained_pg; label=\"trained\")\nplot!(fig2, 1:1<<6, pg; label=\"target\")\ntitle!(\"distribution\")\nxlabel!(\"x\"); ylabel!(\"p\")","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip900\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip900)\" d=\"\nM0 1600 L2400 1600 L2400 0 L0 0  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip901\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip900)\" d=\"\nM279.704 1423.18 L2352.76 1423.18 L2352.76 123.472 L279.704 123.472  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip902\">\n    <rect x=\"279\" y=\"123\" width=\"2074\" height=\"1301\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  307.332,1423.18 307.332,123.472 \n  \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  617.762,1423.18 617.762,123.472 \n  \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  928.192,1423.18 928.192,123.472 \n  \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1238.62,1423.18 1238.62,123.472 \n  \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1549.05,1423.18 1549.05,123.472 \n  \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1859.48,1423.18 1859.48,123.472 \n  \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  2169.91,1423.18 2169.91,123.472 \n  \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  279.704,1423.18 2352.76,1423.18 \n  \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  307.332,1423.18 307.332,1404.28 \n  \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  617.762,1423.18 617.762,1404.28 \n  \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  928.192,1423.18 928.192,1404.28 \n  \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1238.62,1423.18 1238.62,1404.28 \n  \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1549.05,1423.18 1549.05,1404.28 \n  \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1859.48,1423.18 1859.48,1404.28 \n  \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  2169.91,1423.18 2169.91,1404.28 \n  \"/>\n<path clip-path=\"url(#clip900)\" d=\"M307.332 1454.1 Q303.721 1454.1 301.892 1457.66 Q300.087 1461.2 300.087 1468.33 Q300.087 1475.44 301.892 1479.01 Q303.721 1482.55 307.332 1482.55 Q310.966 1482.55 312.772 1479.01 Q314.601 1475.44 314.601 1468.33 Q314.601 1461.2 312.772 1457.66 Q310.966 1454.1 307.332 1454.1 M307.332 1450.39 Q313.142 1450.39 316.198 1455 Q319.277 1459.58 319.277 1468.33 Q319.277 1477.06 316.198 1481.67 Q313.142 1486.25 307.332 1486.25 Q301.522 1486.25 298.443 1481.67 Q295.388 1477.06 295.388 1468.33 Q295.388 1459.58 298.443 1455 Q301.522 1450.39 307.332 1450.39 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M592.45 1481.64 L600.089 1481.64 L600.089 1455.28 L591.779 1456.95 L591.779 1452.69 L600.042 1451.02 L604.718 1451.02 L604.718 1481.64 L612.357 1481.64 L612.357 1485.58 L592.45 1485.58 L592.45 1481.64 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M631.802 1454.1 Q628.19 1454.1 626.362 1457.66 Q624.556 1461.2 624.556 1468.33 Q624.556 1475.44 626.362 1479.01 Q628.19 1482.55 631.802 1482.55 Q635.436 1482.55 637.241 1479.01 Q639.07 1475.44 639.07 1468.33 Q639.07 1461.2 637.241 1457.66 Q635.436 1454.1 631.802 1454.1 M631.802 1450.39 Q637.612 1450.39 640.667 1455 Q643.746 1459.58 643.746 1468.33 Q643.746 1477.06 640.667 1481.67 Q637.612 1486.25 631.802 1486.25 Q625.991 1486.25 622.913 1481.67 Q619.857 1477.06 619.857 1468.33 Q619.857 1459.58 622.913 1455 Q625.991 1450.39 631.802 1450.39 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M906.966 1481.64 L923.285 1481.64 L923.285 1485.58 L901.341 1485.58 L901.341 1481.64 Q904.003 1478.89 908.586 1474.26 Q913.192 1469.61 914.373 1468.27 Q916.618 1465.74 917.498 1464.01 Q918.401 1462.25 918.401 1460.56 Q918.401 1457.8 916.456 1456.07 Q914.535 1454.33 911.433 1454.33 Q909.234 1454.33 906.78 1455.09 Q904.35 1455.86 901.572 1457.41 L901.572 1452.69 Q904.396 1451.55 906.85 1450.97 Q909.304 1450.39 911.341 1450.39 Q916.711 1450.39 919.905 1453.08 Q923.1 1455.77 923.1 1460.26 Q923.1 1462.39 922.29 1464.31 Q921.503 1466.2 919.396 1468.8 Q918.817 1469.47 915.716 1472.69 Q912.614 1475.88 906.966 1481.64 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M943.1 1454.1 Q939.489 1454.1 937.66 1457.66 Q935.854 1461.2 935.854 1468.33 Q935.854 1475.44 937.66 1479.01 Q939.489 1482.55 943.1 1482.55 Q946.734 1482.55 948.539 1479.01 Q950.368 1475.44 950.368 1468.33 Q950.368 1461.2 948.539 1457.66 Q946.734 1454.1 943.1 1454.1 M943.1 1450.39 Q948.91 1450.39 951.965 1455 Q955.044 1459.58 955.044 1468.33 Q955.044 1477.06 951.965 1481.67 Q948.91 1486.25 943.1 1486.25 Q937.289 1486.25 934.211 1481.67 Q931.155 1477.06 931.155 1468.33 Q931.155 1459.58 934.211 1455 Q937.289 1450.39 943.1 1450.39 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1227.47 1466.95 Q1230.82 1467.66 1232.7 1469.93 Q1234.59 1472.2 1234.59 1475.53 Q1234.59 1480.65 1231.08 1483.45 Q1227.56 1486.25 1221.08 1486.25 Q1218.9 1486.25 1216.59 1485.81 Q1214.29 1485.39 1211.84 1484.54 L1211.84 1480.02 Q1213.78 1481.16 1216.1 1481.74 Q1218.41 1482.32 1220.94 1482.32 Q1225.34 1482.32 1227.63 1480.58 Q1229.94 1478.84 1229.94 1475.53 Q1229.94 1472.48 1227.79 1470.77 Q1225.66 1469.03 1221.84 1469.03 L1217.81 1469.03 L1217.81 1465.19 L1222.03 1465.19 Q1225.47 1465.19 1227.3 1463.82 Q1229.13 1462.43 1229.13 1459.84 Q1229.13 1457.18 1227.23 1455.77 Q1225.36 1454.33 1221.84 1454.33 Q1219.92 1454.33 1217.72 1454.75 Q1215.52 1455.16 1212.88 1456.04 L1212.88 1451.88 Q1215.54 1451.14 1217.86 1450.77 Q1220.2 1450.39 1222.26 1450.39 Q1227.58 1450.39 1230.68 1452.83 Q1233.78 1455.23 1233.78 1459.35 Q1233.78 1462.22 1232.14 1464.21 Q1230.5 1466.18 1227.47 1466.95 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1253.46 1454.1 Q1249.85 1454.1 1248.02 1457.66 Q1246.21 1461.2 1246.21 1468.33 Q1246.21 1475.44 1248.02 1479.01 Q1249.85 1482.55 1253.46 1482.55 Q1257.09 1482.55 1258.9 1479.01 Q1260.73 1475.44 1260.73 1468.33 Q1260.73 1461.2 1258.9 1457.66 Q1257.09 1454.1 1253.46 1454.1 M1253.46 1450.39 Q1259.27 1450.39 1262.33 1455 Q1265.4 1459.58 1265.4 1468.33 Q1265.4 1477.06 1262.33 1481.67 Q1259.27 1486.25 1253.46 1486.25 Q1247.65 1486.25 1244.57 1481.67 Q1241.52 1477.06 1241.52 1468.33 Q1241.52 1459.58 1244.57 1455 Q1247.65 1450.39 1253.46 1450.39 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1537.22 1455.09 L1525.42 1473.54 L1537.22 1473.54 L1537.22 1455.09 M1536 1451.02 L1541.88 1451.02 L1541.88 1473.54 L1546.81 1473.54 L1546.81 1477.43 L1541.88 1477.43 L1541.88 1485.58 L1537.22 1485.58 L1537.22 1477.43 L1521.62 1477.43 L1521.62 1472.92 L1536 1451.02 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1564.54 1454.1 Q1560.93 1454.1 1559.1 1457.66 Q1557.29 1461.2 1557.29 1468.33 Q1557.29 1475.44 1559.1 1479.01 Q1560.93 1482.55 1564.54 1482.55 Q1568.17 1482.55 1569.98 1479.01 Q1571.81 1475.44 1571.81 1468.33 Q1571.81 1461.2 1569.98 1457.66 Q1568.17 1454.1 1564.54 1454.1 M1564.54 1450.39 Q1570.35 1450.39 1573.4 1455 Q1576.48 1459.58 1576.48 1468.33 Q1576.48 1477.06 1573.4 1481.67 Q1570.35 1486.25 1564.54 1486.25 Q1558.73 1486.25 1555.65 1481.67 Q1552.59 1477.06 1552.59 1468.33 Q1552.59 1459.58 1555.65 1455 Q1558.73 1450.39 1564.54 1450.39 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1834.18 1451.02 L1852.54 1451.02 L1852.54 1454.96 L1838.46 1454.96 L1838.46 1463.43 Q1839.48 1463.08 1840.5 1462.92 Q1841.52 1462.73 1842.54 1462.73 Q1848.33 1462.73 1851.7 1465.9 Q1855.08 1469.08 1855.08 1474.49 Q1855.08 1480.07 1851.61 1483.17 Q1848.14 1486.25 1841.82 1486.25 Q1839.64 1486.25 1837.38 1485.88 Q1835.13 1485.51 1832.72 1484.77 L1832.72 1480.07 Q1834.81 1481.2 1837.03 1481.76 Q1839.25 1482.32 1841.73 1482.32 Q1845.73 1482.32 1848.07 1480.21 Q1850.41 1478.1 1850.41 1474.49 Q1850.41 1470.88 1848.07 1468.77 Q1845.73 1466.67 1841.73 1466.67 Q1839.85 1466.67 1837.98 1467.08 Q1836.13 1467.5 1834.18 1468.38 L1834.18 1451.02 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1874.3 1454.1 Q1870.69 1454.1 1868.86 1457.66 Q1867.05 1461.2 1867.05 1468.33 Q1867.05 1475.44 1868.86 1479.01 Q1870.69 1482.55 1874.3 1482.55 Q1877.93 1482.55 1879.74 1479.01 Q1881.57 1475.44 1881.57 1468.33 Q1881.57 1461.2 1879.74 1457.66 Q1877.93 1454.1 1874.3 1454.1 M1874.3 1450.39 Q1880.11 1450.39 1883.16 1455 Q1886.24 1459.58 1886.24 1468.33 Q1886.24 1477.06 1883.16 1481.67 Q1880.11 1486.25 1874.3 1486.25 Q1868.49 1486.25 1865.41 1481.67 Q1862.35 1477.06 1862.35 1468.33 Q1862.35 1459.58 1865.41 1455 Q1868.49 1450.39 1874.3 1450.39 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2155.32 1466.44 Q2152.17 1466.44 2150.32 1468.59 Q2148.49 1470.74 2148.49 1474.49 Q2148.49 1478.22 2150.32 1480.39 Q2152.17 1482.55 2155.32 1482.55 Q2158.47 1482.55 2160.29 1480.39 Q2162.15 1478.22 2162.15 1474.49 Q2162.15 1470.74 2160.29 1468.59 Q2158.47 1466.44 2155.32 1466.44 M2164.6 1451.78 L2164.6 1456.04 Q2162.84 1455.21 2161.04 1454.77 Q2159.25 1454.33 2157.49 1454.33 Q2152.86 1454.33 2150.41 1457.45 Q2147.98 1460.58 2147.63 1466.9 Q2149 1464.89 2151.06 1463.82 Q2153.12 1462.73 2155.6 1462.73 Q2160.8 1462.73 2163.81 1465.9 Q2166.85 1469.05 2166.85 1474.49 Q2166.85 1479.82 2163.7 1483.03 Q2160.55 1486.25 2155.32 1486.25 Q2149.32 1486.25 2146.15 1481.67 Q2142.98 1477.06 2142.98 1468.33 Q2142.98 1460.14 2146.87 1455.28 Q2150.76 1450.39 2157.31 1450.39 Q2159.07 1450.39 2160.85 1450.74 Q2162.66 1451.09 2164.6 1451.78 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2184.9 1454.1 Q2181.29 1454.1 2179.46 1457.66 Q2177.66 1461.2 2177.66 1468.33 Q2177.66 1475.44 2179.46 1479.01 Q2181.29 1482.55 2184.9 1482.55 Q2188.54 1482.55 2190.34 1479.01 Q2192.17 1475.44 2192.17 1468.33 Q2192.17 1461.2 2190.34 1457.66 Q2188.54 1454.1 2184.9 1454.1 M2184.9 1450.39 Q2190.71 1450.39 2193.77 1455 Q2196.85 1459.58 2196.85 1468.33 Q2196.85 1477.06 2193.77 1481.67 Q2190.71 1486.25 2184.9 1486.25 Q2179.09 1486.25 2176.01 1481.67 Q2172.96 1477.06 2172.96 1468.33 Q2172.96 1459.58 2176.01 1455 Q2179.09 1450.39 2184.9 1450.39 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1332.84 1532.4 L1319.95 1549.74 L1333.51 1568.04 L1326.61 1568.04 L1316.23 1554.04 L1305.85 1568.04 L1298.95 1568.04 L1312.79 1549.39 L1300.12 1532.4 L1307.03 1532.4 L1316.48 1545.1 L1325.94 1532.4 L1332.84 1532.4 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  279.704,1276.87 2352.76,1276.87 \n  \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  279.704,1013.02 2352.76,1013.02 \n  \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  279.704,749.178 2352.76,749.178 \n  \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  279.704,485.333 2352.76,485.333 \n  \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  279.704,221.488 2352.76,221.488 \n  \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  279.704,1423.18 279.704,123.472 \n  \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  279.704,1276.87 298.602,1276.87 \n  \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  279.704,1013.02 298.602,1013.02 \n  \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  279.704,749.178 298.602,749.178 \n  \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  279.704,485.333 298.602,485.333 \n  \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  279.704,221.488 298.602,221.488 \n  \"/>\n<path clip-path=\"url(#clip900)\" d=\"M127.2 1262.67 Q123.589 1262.67 121.76 1266.23 Q119.955 1269.77 119.955 1276.9 Q119.955 1284.01 121.76 1287.57 Q123.589 1291.12 127.2 1291.12 Q130.834 1291.12 132.64 1287.57 Q134.468 1284.01 134.468 1276.9 Q134.468 1269.77 132.64 1266.23 Q130.834 1262.67 127.2 1262.67 M127.2 1258.96 Q133.01 1258.96 136.066 1263.57 Q139.144 1268.15 139.144 1276.9 Q139.144 1285.63 136.066 1290.24 Q133.01 1294.82 127.2 1294.82 Q121.39 1294.82 118.311 1290.24 Q115.256 1285.63 115.256 1276.9 Q115.256 1268.15 118.311 1263.57 Q121.39 1258.96 127.2 1258.96 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M147.362 1288.27 L152.246 1288.27 L152.246 1294.15 L147.362 1294.15 L147.362 1288.27 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M172.431 1262.67 Q168.82 1262.67 166.991 1266.23 Q165.186 1269.77 165.186 1276.9 Q165.186 1284.01 166.991 1287.57 Q168.82 1291.12 172.431 1291.12 Q176.065 1291.12 177.871 1287.57 Q179.7 1284.01 179.7 1276.9 Q179.7 1269.77 177.871 1266.23 Q176.065 1262.67 172.431 1262.67 M172.431 1258.96 Q178.241 1258.96 181.297 1263.57 Q184.376 1268.15 184.376 1276.9 Q184.376 1285.63 181.297 1290.24 Q178.241 1294.82 172.431 1294.82 Q166.621 1294.82 163.542 1290.24 Q160.487 1285.63 160.487 1276.9 Q160.487 1268.15 163.542 1263.57 Q166.621 1258.96 172.431 1258.96 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M202.593 1262.67 Q198.982 1262.67 197.153 1266.23 Q195.348 1269.77 195.348 1276.9 Q195.348 1284.01 197.153 1287.57 Q198.982 1291.12 202.593 1291.12 Q206.227 1291.12 208.033 1287.57 Q209.861 1284.01 209.861 1276.9 Q209.861 1269.77 208.033 1266.23 Q206.227 1262.67 202.593 1262.67 M202.593 1258.96 Q208.403 1258.96 211.459 1263.57 Q214.537 1268.15 214.537 1276.9 Q214.537 1285.63 211.459 1290.24 Q208.403 1294.82 202.593 1294.82 Q196.783 1294.82 193.704 1290.24 Q190.649 1285.63 190.649 1276.9 Q190.649 1268.15 193.704 1263.57 Q196.783 1258.96 202.593 1258.96 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M222.801 1259.59 L241.158 1259.59 L241.158 1263.52 L227.084 1263.52 L227.084 1272 Q228.102 1271.65 229.121 1271.49 Q230.139 1271.3 231.158 1271.3 Q236.945 1271.3 240.324 1274.47 Q243.704 1277.64 243.704 1283.06 Q243.704 1288.64 240.232 1291.74 Q236.76 1294.82 230.44 1294.82 Q228.264 1294.82 225.996 1294.45 Q223.75 1294.08 221.343 1293.34 L221.343 1288.64 Q223.426 1289.77 225.648 1290.33 Q227.871 1290.88 230.347 1290.88 Q234.352 1290.88 236.69 1288.78 Q239.028 1286.67 239.028 1283.06 Q239.028 1279.45 236.69 1277.34 Q234.352 1275.24 230.347 1275.24 Q228.473 1275.24 226.598 1275.65 Q224.746 1276.07 222.801 1276.95 L222.801 1259.59 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M126.205 998.822 Q122.593 998.822 120.765 1002.39 Q118.959 1005.93 118.959 1013.06 Q118.959 1020.16 120.765 1023.73 Q122.593 1027.27 126.205 1027.27 Q129.839 1027.27 131.644 1023.73 Q133.473 1020.16 133.473 1013.06 Q133.473 1005.93 131.644 1002.39 Q129.839 998.822 126.205 998.822 M126.205 995.118 Q132.015 995.118 135.07 999.725 Q138.149 1004.31 138.149 1013.06 Q138.149 1021.78 135.07 1026.39 Q132.015 1030.97 126.205 1030.97 Q120.394 1030.97 117.316 1026.39 Q114.26 1021.78 114.26 1013.06 Q114.26 1004.31 117.316 999.725 Q120.394 995.118 126.205 995.118 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M146.366 1024.42 L151.251 1024.42 L151.251 1030.3 L146.366 1030.3 L146.366 1024.42 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M171.436 998.822 Q167.825 998.822 165.996 1002.39 Q164.19 1005.93 164.19 1013.06 Q164.19 1020.16 165.996 1023.73 Q167.825 1027.27 171.436 1027.27 Q175.07 1027.27 176.876 1023.73 Q178.704 1020.16 178.704 1013.06 Q178.704 1005.93 176.876 1002.39 Q175.07 998.822 171.436 998.822 M171.436 995.118 Q177.246 995.118 180.301 999.725 Q183.38 1004.31 183.38 1013.06 Q183.38 1021.78 180.301 1026.39 Q177.246 1030.97 171.436 1030.97 Q165.626 1030.97 162.547 1026.39 Q159.491 1021.78 159.491 1013.06 Q159.491 1004.31 162.547 999.725 Q165.626 995.118 171.436 995.118 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M192.408 1026.37 L200.047 1026.37 L200.047 1000 L191.737 1001.67 L191.737 997.41 L200 995.743 L204.676 995.743 L204.676 1026.37 L212.315 1026.37 L212.315 1030.3 L192.408 1030.3 L192.408 1026.37 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M231.76 998.822 Q228.148 998.822 226.32 1002.39 Q224.514 1005.93 224.514 1013.06 Q224.514 1020.16 226.32 1023.73 Q228.148 1027.27 231.76 1027.27 Q235.394 1027.27 237.199 1023.73 Q239.028 1020.16 239.028 1013.06 Q239.028 1005.93 237.199 1002.39 Q235.394 998.822 231.76 998.822 M231.76 995.118 Q237.57 995.118 240.625 999.725 Q243.704 1004.31 243.704 1013.06 Q243.704 1021.78 240.625 1026.39 Q237.57 1030.97 231.76 1030.97 Q225.949 1030.97 222.871 1026.39 Q219.815 1021.78 219.815 1013.06 Q219.815 1004.31 222.871 999.725 Q225.949 995.118 231.76 995.118 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M127.2 734.977 Q123.589 734.977 121.76 738.541 Q119.955 742.083 119.955 749.213 Q119.955 756.319 121.76 759.884 Q123.589 763.426 127.2 763.426 Q130.834 763.426 132.64 759.884 Q134.468 756.319 134.468 749.213 Q134.468 742.083 132.64 738.541 Q130.834 734.977 127.2 734.977 M127.2 731.273 Q133.01 731.273 136.066 735.879 Q139.144 740.463 139.144 749.213 Q139.144 757.939 136.066 762.546 Q133.01 767.129 127.2 767.129 Q121.39 767.129 118.311 762.546 Q115.256 757.939 115.256 749.213 Q115.256 740.463 118.311 735.879 Q121.39 731.273 127.2 731.273 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M147.362 760.578 L152.246 760.578 L152.246 766.458 L147.362 766.458 L147.362 760.578 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M172.431 734.977 Q168.82 734.977 166.991 738.541 Q165.186 742.083 165.186 749.213 Q165.186 756.319 166.991 759.884 Q168.82 763.426 172.431 763.426 Q176.065 763.426 177.871 759.884 Q179.7 756.319 179.7 749.213 Q179.7 742.083 177.871 738.541 Q176.065 734.977 172.431 734.977 M172.431 731.273 Q178.241 731.273 181.297 735.879 Q184.376 740.463 184.376 749.213 Q184.376 757.939 181.297 762.546 Q178.241 767.129 172.431 767.129 Q166.621 767.129 163.542 762.546 Q160.487 757.939 160.487 749.213 Q160.487 740.463 163.542 735.879 Q166.621 731.273 172.431 731.273 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M193.403 762.523 L201.042 762.523 L201.042 736.157 L192.732 737.824 L192.732 733.565 L200.996 731.898 L205.672 731.898 L205.672 762.523 L213.311 762.523 L213.311 766.458 L193.403 766.458 L193.403 762.523 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M222.801 731.898 L241.158 731.898 L241.158 735.833 L227.084 735.833 L227.084 744.305 Q228.102 743.958 229.121 743.796 Q230.139 743.611 231.158 743.611 Q236.945 743.611 240.324 746.782 Q243.704 749.953 243.704 755.37 Q243.704 760.949 240.232 764.051 Q236.76 767.129 230.44 767.129 Q228.264 767.129 225.996 766.759 Q223.75 766.389 221.343 765.648 L221.343 760.949 Q223.426 762.083 225.648 762.639 Q227.871 763.194 230.347 763.194 Q234.352 763.194 236.69 761.088 Q239.028 758.981 239.028 755.37 Q239.028 751.759 236.69 749.652 Q234.352 747.546 230.347 747.546 Q228.473 747.546 226.598 747.963 Q224.746 748.379 222.801 749.259 L222.801 731.898 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M126.205 471.131 Q122.593 471.131 120.765 474.696 Q118.959 478.238 118.959 485.367 Q118.959 492.474 120.765 496.039 Q122.593 499.58 126.205 499.58 Q129.839 499.58 131.644 496.039 Q133.473 492.474 133.473 485.367 Q133.473 478.238 131.644 474.696 Q129.839 471.131 126.205 471.131 M126.205 467.428 Q132.015 467.428 135.07 472.034 Q138.149 476.618 138.149 485.367 Q138.149 494.094 135.07 498.701 Q132.015 503.284 126.205 503.284 Q120.394 503.284 117.316 498.701 Q114.26 494.094 114.26 485.367 Q114.26 476.618 117.316 472.034 Q120.394 467.428 126.205 467.428 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M146.366 496.733 L151.251 496.733 L151.251 502.613 L146.366 502.613 L146.366 496.733 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M171.436 471.131 Q167.825 471.131 165.996 474.696 Q164.19 478.238 164.19 485.367 Q164.19 492.474 165.996 496.039 Q167.825 499.58 171.436 499.58 Q175.07 499.58 176.876 496.039 Q178.704 492.474 178.704 485.367 Q178.704 478.238 176.876 474.696 Q175.07 471.131 171.436 471.131 M171.436 467.428 Q177.246 467.428 180.301 472.034 Q183.38 476.618 183.38 485.367 Q183.38 494.094 180.301 498.701 Q177.246 503.284 171.436 503.284 Q165.626 503.284 162.547 498.701 Q159.491 494.094 159.491 485.367 Q159.491 476.618 162.547 472.034 Q165.626 467.428 171.436 467.428 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M195.625 498.678 L211.945 498.678 L211.945 502.613 L190 502.613 L190 498.678 Q192.663 495.923 197.246 491.293 Q201.852 486.641 203.033 485.298 Q205.278 482.775 206.158 481.039 Q207.061 479.28 207.061 477.59 Q207.061 474.835 205.116 473.099 Q203.195 471.363 200.093 471.363 Q197.894 471.363 195.44 472.127 Q193.01 472.891 190.232 474.442 L190.232 469.719 Q193.056 468.585 195.51 468.006 Q197.963 467.428 200 467.428 Q205.371 467.428 208.565 470.113 Q211.76 472.798 211.76 477.289 Q211.76 479.418 210.949 481.34 Q210.162 483.238 208.056 485.83 Q207.477 486.502 204.375 489.719 Q201.274 492.914 195.625 498.678 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M231.76 471.131 Q228.148 471.131 226.32 474.696 Q224.514 478.238 224.514 485.367 Q224.514 492.474 226.32 496.039 Q228.148 499.58 231.76 499.58 Q235.394 499.58 237.199 496.039 Q239.028 492.474 239.028 485.367 Q239.028 478.238 237.199 474.696 Q235.394 471.131 231.76 471.131 M231.76 467.428 Q237.57 467.428 240.625 472.034 Q243.704 476.618 243.704 485.367 Q243.704 494.094 240.625 498.701 Q237.57 503.284 231.76 503.284 Q225.949 503.284 222.871 498.701 Q219.815 494.094 219.815 485.367 Q219.815 476.618 222.871 472.034 Q225.949 467.428 231.76 467.428 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M127.2 207.286 Q123.589 207.286 121.76 210.851 Q119.955 214.393 119.955 221.522 Q119.955 228.629 121.76 232.193 Q123.589 235.735 127.2 235.735 Q130.834 235.735 132.64 232.193 Q134.468 228.629 134.468 221.522 Q134.468 214.393 132.64 210.851 Q130.834 207.286 127.2 207.286 M127.2 203.583 Q133.01 203.583 136.066 208.189 Q139.144 212.772 139.144 221.522 Q139.144 230.249 136.066 234.855 Q133.01 239.439 127.2 239.439 Q121.39 239.439 118.311 234.855 Q115.256 230.249 115.256 221.522 Q115.256 212.772 118.311 208.189 Q121.39 203.583 127.2 203.583 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M147.362 232.888 L152.246 232.888 L152.246 238.768 L147.362 238.768 L147.362 232.888 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M172.431 207.286 Q168.82 207.286 166.991 210.851 Q165.186 214.393 165.186 221.522 Q165.186 228.629 166.991 232.193 Q168.82 235.735 172.431 235.735 Q176.065 235.735 177.871 232.193 Q179.7 228.629 179.7 221.522 Q179.7 214.393 177.871 210.851 Q176.065 207.286 172.431 207.286 M172.431 203.583 Q178.241 203.583 181.297 208.189 Q184.376 212.772 184.376 221.522 Q184.376 230.249 181.297 234.855 Q178.241 239.439 172.431 239.439 Q166.621 239.439 163.542 234.855 Q160.487 230.249 160.487 221.522 Q160.487 212.772 163.542 208.189 Q166.621 203.583 172.431 203.583 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M196.621 234.832 L212.94 234.832 L212.94 238.768 L190.996 238.768 L190.996 234.832 Q193.658 232.078 198.241 227.448 Q202.848 222.795 204.028 221.453 Q206.274 218.93 207.153 217.194 Q208.056 215.434 208.056 213.745 Q208.056 210.99 206.112 209.254 Q204.19 207.518 201.088 207.518 Q198.889 207.518 196.436 208.282 Q194.005 209.045 191.227 210.596 L191.227 205.874 Q194.051 204.74 196.505 204.161 Q198.959 203.583 200.996 203.583 Q206.366 203.583 209.561 206.268 Q212.755 208.953 212.755 213.444 Q212.755 215.573 211.945 217.494 Q211.158 219.393 209.051 221.985 Q208.473 222.656 205.371 225.874 Q202.269 229.068 196.621 234.832 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M222.801 204.208 L241.158 204.208 L241.158 208.143 L227.084 208.143 L227.084 216.615 Q228.102 216.268 229.121 216.106 Q230.139 215.92 231.158 215.92 Q236.945 215.92 240.324 219.092 Q243.704 222.263 243.704 227.68 Q243.704 233.258 240.232 236.36 Q236.76 239.439 230.44 239.439 Q228.264 239.439 225.996 239.068 Q223.75 238.698 221.343 237.957 L221.343 233.258 Q223.426 234.393 225.648 234.948 Q227.871 235.504 230.347 235.504 Q234.352 235.504 236.69 233.397 Q239.028 231.291 239.028 227.68 Q239.028 224.069 236.69 221.962 Q234.352 219.856 230.347 219.856 Q228.473 219.856 226.598 220.272 Q224.746 220.689 222.801 221.569 L222.801 204.208 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M58.657 783.384 L77.5631 783.384 L77.5631 789.272 L28.3562 789.272 L28.3562 783.384 L33.7671 783.384 Q30.5842 781.538 29.0564 778.737 Q27.4968 775.904 27.4968 771.989 Q27.4968 765.496 32.6531 761.454 Q37.8093 757.38 46.212 757.38 Q54.6147 757.38 59.771 761.454 Q64.9272 765.496 64.9272 771.989 Q64.9272 775.904 63.3994 778.737 Q61.8398 781.538 58.657 783.384 M46.212 763.459 Q39.7508 763.459 36.0905 766.133 Q32.3984 768.775 32.3984 773.421 Q32.3984 778.068 36.0905 780.742 Q39.7508 783.384 46.212 783.384 Q52.6732 783.384 56.3653 780.742 Q60.0256 778.068 60.0256 773.421 Q60.0256 768.775 56.3653 766.133 Q52.6732 763.459 46.212 763.459 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1118.75 34.0924 L1118.75 9.54393 L1126.2 9.54393 L1126.2 72.576 L1118.75 72.576 L1118.75 65.7705 Q1116.4 69.8214 1112.79 71.8063 Q1109.23 73.7508 1104.21 73.7508 Q1095.98 73.7508 1090.8 67.1883 Q1085.65 60.6258 1085.65 49.9314 Q1085.65 39.2371 1090.8 32.6746 Q1095.98 26.1121 1104.21 26.1121 Q1109.23 26.1121 1112.79 28.0971 Q1116.4 30.0415 1118.75 34.0924 M1093.35 49.9314 Q1093.35 58.1548 1096.71 62.8538 Q1100.11 67.5124 1106.03 67.5124 Q1111.94 67.5124 1115.35 62.8538 Q1118.75 58.1548 1118.75 49.9314 Q1118.75 41.7081 1115.35 37.0496 Q1111.94 32.3505 1106.03 32.3505 Q1100.11 32.3505 1096.71 37.0496 Q1093.35 41.7081 1093.35 49.9314 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1141.55 27.2059 L1149.01 27.2059 L1149.01 72.576 L1141.55 72.576 L1141.55 27.2059 M1141.55 9.54393 L1149.01 9.54393 L1149.01 18.9825 L1141.55 18.9825 L1141.55 9.54393 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1193.53 28.5427 L1193.53 35.5912 Q1190.37 33.9709 1186.97 33.1607 Q1183.56 32.3505 1179.92 32.3505 Q1174.37 32.3505 1171.57 34.0519 Q1168.82 35.7533 1168.82 39.156 Q1168.82 41.7486 1170.8 43.2475 Q1172.79 44.7058 1178.78 46.0426 L1181.33 46.6097 Q1189.27 48.3111 1192.6 51.4303 Q1195.96 54.509 1195.96 60.0587 Q1195.96 66.3781 1190.94 70.0644 Q1185.95 73.7508 1177.2 73.7508 Q1173.56 73.7508 1169.59 73.0216 Q1165.66 72.3329 1161.28 70.9151 L1161.28 63.2184 Q1165.41 65.3654 1169.43 66.4591 Q1173.44 67.5124 1177.36 67.5124 Q1182.63 67.5124 1185.47 65.73 Q1188.3 63.9071 1188.3 60.6258 Q1188.3 57.5877 1186.24 55.9673 Q1184.21 54.3469 1177.28 52.8481 L1174.69 52.2405 Q1167.76 50.7821 1164.69 47.7845 Q1161.61 44.7463 1161.61 39.4801 Q1161.61 33.0797 1166.14 29.5959 Q1170.68 26.1121 1179.03 26.1121 Q1183.16 26.1121 1186.8 26.7198 Q1190.45 27.3274 1193.53 28.5427 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1215.2 14.324 L1215.2 27.2059 L1230.55 27.2059 L1230.55 32.9987 L1215.2 32.9987 L1215.2 57.6282 Q1215.2 63.1779 1216.7 64.7578 Q1218.24 66.3376 1222.9 66.3376 L1230.55 66.3376 L1230.55 72.576 L1222.9 72.576 Q1214.27 72.576 1210.99 69.3758 Q1207.71 66.1351 1207.71 57.6282 L1207.71 32.9987 L1202.24 32.9987 L1202.24 27.2059 L1207.71 27.2059 L1207.71 14.324 L1215.2 14.324 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1266.65 34.1734 Q1265.39 33.4443 1263.89 33.1202 Q1262.43 32.7556 1260.65 32.7556 Q1254.33 32.7556 1250.93 36.8875 Q1247.57 40.9789 1247.57 48.6757 L1247.57 72.576 L1240.07 72.576 L1240.07 27.2059 L1247.57 27.2059 L1247.57 34.2544 Q1249.92 30.1225 1253.68 28.1376 Q1257.45 26.1121 1262.84 26.1121 Q1263.61 26.1121 1264.54 26.2337 Q1265.47 26.3147 1266.61 26.5172 L1266.65 34.1734 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1274.47 27.2059 L1281.92 27.2059 L1281.92 72.576 L1274.47 72.576 L1274.47 27.2059 M1274.47 9.54393 L1281.92 9.54393 L1281.92 18.9825 L1274.47 18.9825 L1274.47 9.54393 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1330.08 49.9314 Q1330.08 41.7081 1326.68 37.0496 Q1323.32 32.3505 1317.4 32.3505 Q1311.49 32.3505 1308.09 37.0496 Q1304.73 41.7081 1304.73 49.9314 Q1304.73 58.1548 1308.09 62.8538 Q1311.49 67.5124 1317.4 67.5124 Q1323.32 67.5124 1326.68 62.8538 Q1330.08 58.1548 1330.08 49.9314 M1304.73 34.0924 Q1307.07 30.0415 1310.64 28.0971 Q1314.24 26.1121 1319.23 26.1121 Q1327.49 26.1121 1332.64 32.6746 Q1337.82 39.2371 1337.82 49.9314 Q1337.82 60.6258 1332.64 67.1883 Q1327.49 73.7508 1319.23 73.7508 Q1314.24 73.7508 1310.64 71.8063 Q1307.07 69.8214 1304.73 65.7705 L1304.73 72.576 L1297.23 72.576 L1297.23 9.54393 L1304.73 9.54393 L1304.73 34.0924 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1349.41 54.671 L1349.41 27.2059 L1356.86 27.2059 L1356.86 54.3874 Q1356.86 60.8284 1359.37 64.0691 Q1361.88 67.2693 1366.91 67.2693 Q1372.94 67.2693 1376.43 63.421 Q1379.95 59.5726 1379.95 52.9291 L1379.95 27.2059 L1387.4 27.2059 L1387.4 72.576 L1379.95 72.576 L1379.95 65.6084 Q1377.24 69.7404 1373.63 71.7658 Q1370.07 73.7508 1365.33 73.7508 Q1357.51 73.7508 1353.46 68.8897 Q1349.41 64.0286 1349.41 54.671 M1368.16 26.1121 L1368.16 26.1121 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1410.13 14.324 L1410.13 27.2059 L1425.48 27.2059 L1425.48 32.9987 L1410.13 32.9987 L1410.13 57.6282 Q1410.13 63.1779 1411.63 64.7578 Q1413.17 66.3376 1417.83 66.3376 L1425.48 66.3376 L1425.48 72.576 L1417.83 72.576 Q1409.2 72.576 1405.92 69.3758 Q1402.64 66.1351 1402.64 57.6282 L1402.64 32.9987 L1397.17 32.9987 L1397.17 27.2059 L1402.64 27.2059 L1402.64 14.324 L1410.13 14.324 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1435.29 27.2059 L1442.74 27.2059 L1442.74 72.576 L1435.29 72.576 L1435.29 27.2059 M1435.29 9.54393 L1442.74 9.54393 L1442.74 18.9825 L1435.29 18.9825 L1435.29 9.54393 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1475.92 32.4315 Q1469.92 32.4315 1466.44 37.1306 Q1462.95 41.7891 1462.95 49.9314 Q1462.95 58.0738 1466.4 62.7728 Q1469.88 67.4314 1475.92 67.4314 Q1481.87 67.4314 1485.36 62.7323 Q1488.84 58.0333 1488.84 49.9314 Q1488.84 41.8701 1485.36 37.1711 Q1481.87 32.4315 1475.92 32.4315 M1475.92 26.1121 Q1485.64 26.1121 1491.19 32.4315 Q1496.74 38.7509 1496.74 49.9314 Q1496.74 61.0714 1491.19 67.4314 Q1485.64 73.7508 1475.92 73.7508 Q1466.15 73.7508 1460.6 67.4314 Q1455.09 61.0714 1455.09 49.9314 Q1455.09 38.7509 1460.6 32.4315 Q1466.15 26.1121 1475.92 26.1121 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1546.81 45.1919 L1546.81 72.576 L1539.35 72.576 L1539.35 45.4349 Q1539.35 38.994 1536.84 35.7938 Q1534.33 32.5936 1529.31 32.5936 Q1523.27 32.5936 1519.79 36.4419 Q1516.3 40.2903 1516.3 46.9338 L1516.3 72.576 L1508.81 72.576 L1508.81 27.2059 L1516.3 27.2059 L1516.3 34.2544 Q1518.98 30.163 1522.58 28.1376 Q1526.23 26.1121 1530.97 26.1121 Q1538.79 26.1121 1542.8 30.9732 Q1546.81 35.7938 1546.81 45.1919 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip902)\" style=\"stroke:#009af9; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  338.375,1339.37 369.418,1276.43 400.461,1271.11 431.504,1227.16 462.547,1187.4 493.59,1154.84 524.633,1109.27 555.676,1069.69 586.719,1028.81 617.762,982.333 \n  648.805,931.728 679.848,877.535 710.891,840.936 741.934,767.499 772.977,731.649 804.02,686.137 835.063,625.694 866.106,571.329 897.149,520.205 928.192,473.961 \n  959.235,432.762 990.278,383.403 1021.32,350.631 1052.36,305.069 1083.41,278.633 1114.45,246.658 1145.49,213.959 1176.54,196.785 1207.58,183.264 1238.62,168.834 \n  1269.67,160.256 1300.71,162.452 1331.75,170.434 1362.79,178.722 1393.84,196.558 1424.88,210.844 1455.92,238.485 1486.97,270.461 1518.01,305.851 1549.05,343.204 \n  1580.1,382.566 1611.14,434.144 1642.18,467.709 1673.22,523.577 1704.27,576.547 1735.31,629.41 1766.35,666.606 1797.4,731.767 1828.44,776.209 1859.48,835.631 \n  1890.53,886.668 1921.57,934.844 1952.61,982.614 1983.65,1027 2014.7,1067.22 2045.74,1121.78 2076.78,1143.27 2107.83,1191.29 2138.87,1221.88 2169.91,1263.51 \n  2200.96,1279.05 2232,1318.14 2263.04,1318.48 2294.08,1386.4 \n  \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#e26f46; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  338.375,1316.58 369.418,1288.72 400.461,1258.49 431.504,1225.87 462.547,1190.85 493.59,1153.45 524.633,1113.72 555.676,1071.76 586.719,1027.67 617.762,981.633 \n  648.805,933.837 679.848,884.524 710.891,833.969 741.934,782.488 772.977,730.427 804.02,678.168 835.063,626.119 866.106,574.709 897.149,524.387 928.192,475.612 \n  959.235,428.849 990.278,384.557 1021.32,343.188 1052.36,305.175 1083.41,270.924 1114.45,240.812 1145.49,215.174 1176.54,194.299 1207.58,178.428 1238.62,167.744 \n  1269.67,162.37 1300.71,162.37 1331.75,167.744 1362.79,178.428 1393.84,194.299 1424.88,215.174 1455.92,240.812 1486.97,270.924 1518.01,305.175 1549.05,343.188 \n  1580.1,384.557 1611.14,428.849 1642.18,475.612 1673.22,524.387 1704.27,574.709 1735.31,626.119 1766.35,678.168 1797.4,730.427 1828.44,782.488 1859.48,833.969 \n  1890.53,884.524 1921.57,933.837 1952.61,981.633 1983.65,1027.67 2014.7,1071.76 2045.74,1113.72 2076.78,1153.45 2107.83,1190.85 2138.87,1225.87 2169.91,1258.49 \n  2200.96,1288.72 2232,1316.58 2263.04,1342.14 2294.08,1365.48 \n  \"/>\n<path clip-path=\"url(#clip900)\" d=\"\nM1889.29 322.316 L2283.65 322.316 L2283.65 166.796 L1889.29 166.796  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1889.29,322.316 2283.65,322.316 2283.65,166.796 1889.29,166.796 1889.29,322.316 \n  \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#009af9; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1912.32,218.636 2050.53,218.636 \n  \"/>\n<path clip-path=\"url(#clip900)\" d=\"M2080.97 202.629 L2080.97 209.99 L2089.74 209.99 L2089.74 213.3 L2080.97 213.3 L2080.97 227.374 Q2080.97 230.545 2081.82 231.448 Q2082.7 232.351 2085.36 232.351 L2089.74 232.351 L2089.74 235.916 L2085.36 235.916 Q2080.43 235.916 2078.56 234.087 Q2076.68 232.235 2076.68 227.374 L2076.68 213.3 L2073.56 213.3 L2073.56 209.99 L2076.68 209.99 L2076.68 202.629 L2080.97 202.629 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2110.36 213.971 Q2109.65 213.555 2108.79 213.37 Q2107.96 213.161 2106.94 213.161 Q2103.33 213.161 2101.38 215.522 Q2099.46 217.86 2099.46 222.258 L2099.46 235.916 L2095.18 235.916 L2095.18 209.99 L2099.46 209.99 L2099.46 214.018 Q2100.8 211.657 2102.96 210.522 Q2105.11 209.365 2108.19 209.365 Q2108.63 209.365 2109.16 209.434 Q2109.69 209.481 2110.34 209.596 L2110.36 213.971 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2126.61 222.883 Q2121.45 222.883 2119.46 224.064 Q2117.47 225.244 2117.47 228.092 Q2117.47 230.36 2118.95 231.703 Q2120.46 233.022 2123.03 233.022 Q2126.57 233.022 2128.7 230.522 Q2130.85 227.999 2130.85 223.832 L2130.85 222.883 L2126.61 222.883 M2135.11 221.124 L2135.11 235.916 L2130.85 235.916 L2130.85 231.981 Q2129.39 234.342 2127.22 235.476 Q2125.04 236.587 2121.89 236.587 Q2117.91 236.587 2115.55 234.365 Q2113.21 232.119 2113.21 228.369 Q2113.21 223.994 2116.13 221.772 Q2119.07 219.55 2124.88 219.55 L2130.85 219.55 L2130.85 219.133 Q2130.85 216.194 2128.91 214.596 Q2126.99 212.976 2123.49 212.976 Q2121.27 212.976 2119.16 213.508 Q2117.05 214.041 2115.11 215.106 L2115.11 211.17 Q2117.45 210.268 2119.65 209.828 Q2121.85 209.365 2123.93 209.365 Q2129.55 209.365 2132.33 212.282 Q2135.11 215.198 2135.11 221.124 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2143.88 209.99 L2148.14 209.99 L2148.14 235.916 L2143.88 235.916 L2143.88 209.99 M2143.88 199.897 L2148.14 199.897 L2148.14 205.291 L2143.88 205.291 L2143.88 199.897 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2178.61 220.268 L2178.61 235.916 L2174.35 235.916 L2174.35 220.407 Q2174.35 216.726 2172.91 214.897 Q2171.48 213.069 2168.61 213.069 Q2165.16 213.069 2163.17 215.268 Q2161.17 217.467 2161.17 221.263 L2161.17 235.916 L2156.89 235.916 L2156.89 209.99 L2161.17 209.99 L2161.17 214.018 Q2162.7 211.68 2164.76 210.522 Q2166.85 209.365 2169.55 209.365 Q2174.02 209.365 2176.31 212.143 Q2178.61 214.897 2178.61 220.268 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2209.28 221.888 L2209.28 223.971 L2189.69 223.971 Q2189.97 228.369 2192.33 230.684 Q2194.72 232.976 2198.95 232.976 Q2201.41 232.976 2203.7 232.374 Q2206.01 231.772 2208.28 230.569 L2208.28 234.596 Q2205.99 235.568 2203.58 236.078 Q2201.17 236.587 2198.7 236.587 Q2192.49 236.587 2188.86 232.976 Q2185.25 229.365 2185.25 223.207 Q2185.25 216.842 2188.67 213.115 Q2192.12 209.365 2197.96 209.365 Q2203.19 209.365 2206.22 212.745 Q2209.28 216.101 2209.28 221.888 M2205.02 220.638 Q2204.97 217.143 2203.05 215.059 Q2201.15 212.976 2198 212.976 Q2194.44 212.976 2192.29 214.99 Q2190.16 217.004 2189.83 220.661 L2205.02 220.638 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2233.33 213.925 L2233.33 199.897 L2237.59 199.897 L2237.59 235.916 L2233.33 235.916 L2233.33 232.027 Q2231.98 234.342 2229.92 235.476 Q2227.89 236.587 2225.02 236.587 Q2220.32 236.587 2217.35 232.837 Q2214.42 229.087 2214.42 222.976 Q2214.42 216.865 2217.35 213.115 Q2220.32 209.365 2225.02 209.365 Q2227.89 209.365 2229.92 210.499 Q2231.98 211.61 2233.33 213.925 M2218.81 222.976 Q2218.81 227.675 2220.73 230.36 Q2222.68 233.022 2226.06 233.022 Q2229.44 233.022 2231.38 230.36 Q2233.33 227.675 2233.33 222.976 Q2233.33 218.277 2231.38 215.615 Q2229.44 212.93 2226.06 212.93 Q2222.68 212.93 2220.73 215.615 Q2218.81 218.277 2218.81 222.976 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip900)\" style=\"stroke:#e26f46; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1912.32,270.476 2050.53,270.476 \n  \"/>\n<path clip-path=\"url(#clip900)\" d=\"M2080.97 254.469 L2080.97 261.83 L2089.74 261.83 L2089.74 265.14 L2080.97 265.14 L2080.97 279.214 Q2080.97 282.385 2081.82 283.288 Q2082.7 284.191 2085.36 284.191 L2089.74 284.191 L2089.74 287.756 L2085.36 287.756 Q2080.43 287.756 2078.56 285.927 Q2076.68 284.075 2076.68 279.214 L2076.68 265.14 L2073.56 265.14 L2073.56 261.83 L2076.68 261.83 L2076.68 254.469 L2080.97 254.469 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2107.12 274.723 Q2101.96 274.723 2099.97 275.904 Q2097.98 277.084 2097.98 279.932 Q2097.98 282.2 2099.46 283.543 Q2100.97 284.862 2103.54 284.862 Q2107.08 284.862 2109.21 282.362 Q2111.36 279.839 2111.36 275.672 L2111.36 274.723 L2107.12 274.723 M2115.62 272.964 L2115.62 287.756 L2111.36 287.756 L2111.36 283.821 Q2109.9 286.182 2107.73 287.316 Q2105.55 288.427 2102.4 288.427 Q2098.42 288.427 2096.06 286.205 Q2093.72 283.959 2093.72 280.209 Q2093.72 275.834 2096.64 273.612 Q2099.58 271.39 2105.39 271.39 L2111.36 271.39 L2111.36 270.973 Q2111.36 268.034 2109.42 266.436 Q2107.49 264.816 2104 264.816 Q2101.78 264.816 2099.67 265.348 Q2097.56 265.881 2095.62 266.946 L2095.62 263.01 Q2097.96 262.108 2100.16 261.668 Q2102.36 261.205 2104.44 261.205 Q2110.06 261.205 2112.84 264.122 Q2115.62 267.038 2115.62 272.964 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2139.42 265.811 Q2138.7 265.395 2137.84 265.21 Q2137.01 265.001 2135.99 265.001 Q2132.38 265.001 2130.43 267.362 Q2128.51 269.7 2128.51 274.098 L2128.51 287.756 L2124.23 287.756 L2124.23 261.83 L2128.51 261.83 L2128.51 265.858 Q2129.86 263.497 2132.01 262.362 Q2134.16 261.205 2137.24 261.205 Q2137.68 261.205 2138.21 261.274 Q2138.74 261.321 2139.39 261.436 L2139.42 265.811 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2160.11 274.492 Q2160.11 269.862 2158.19 267.316 Q2156.29 264.77 2152.84 264.77 Q2149.42 264.77 2147.49 267.316 Q2145.6 269.862 2145.6 274.492 Q2145.6 279.098 2147.49 281.645 Q2149.42 284.191 2152.84 284.191 Q2156.29 284.191 2158.19 281.645 Q2160.11 279.098 2160.11 274.492 M2164.37 284.538 Q2164.37 291.158 2161.43 294.376 Q2158.49 297.617 2152.42 297.617 Q2150.18 297.617 2148.19 297.27 Q2146.2 296.945 2144.32 296.251 L2144.32 292.108 Q2146.2 293.126 2148.03 293.612 Q2149.86 294.098 2151.75 294.098 Q2155.94 294.098 2158.03 291.899 Q2160.11 289.723 2160.11 285.302 L2160.11 283.196 Q2158.79 285.487 2156.73 286.621 Q2154.67 287.756 2151.8 287.756 Q2147.03 287.756 2144.11 284.121 Q2141.2 280.487 2141.2 274.492 Q2141.2 268.473 2144.11 264.839 Q2147.03 261.205 2151.8 261.205 Q2154.67 261.205 2156.73 262.339 Q2158.79 263.473 2160.11 265.765 L2160.11 261.83 L2164.37 261.83 L2164.37 284.538 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2195.32 273.728 L2195.32 275.811 L2175.73 275.811 Q2176.01 280.209 2178.37 282.524 Q2180.76 284.816 2184.99 284.816 Q2187.45 284.816 2189.74 284.214 Q2192.05 283.612 2194.32 282.409 L2194.32 286.436 Q2192.03 287.408 2189.62 287.918 Q2187.22 288.427 2184.74 288.427 Q2178.54 288.427 2174.9 284.816 Q2171.29 281.205 2171.29 275.047 Q2171.29 268.682 2174.72 264.955 Q2178.17 261.205 2184 261.205 Q2189.23 261.205 2192.26 264.585 Q2195.32 267.941 2195.32 273.728 M2191.06 272.478 Q2191.01 268.983 2189.09 266.899 Q2187.19 264.816 2184.04 264.816 Q2180.48 264.816 2178.33 266.83 Q2176.2 268.844 2175.87 272.501 L2191.06 272.478 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2206.52 254.469 L2206.52 261.83 L2215.29 261.83 L2215.29 265.14 L2206.52 265.14 L2206.52 279.214 Q2206.52 282.385 2207.38 283.288 Q2208.26 284.191 2210.92 284.191 L2215.29 284.191 L2215.29 287.756 L2210.92 287.756 Q2205.99 287.756 2204.11 285.927 Q2202.24 284.075 2202.24 279.214 L2202.24 265.14 L2199.11 265.14 L2199.11 261.83 L2202.24 261.83 L2202.24 254.469 L2206.52 254.469 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"So within 50 steps, we got a pretty close estimation of our target distribution!","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"","category":"page"},{"location":"generated/quick-start/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"This page was generated using Literate.jl.","category":"page"},{"location":"man/automatic_differentiation.html#Automatic-Differentiation","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"","category":"section"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"Yao currently contains builtin automatic differentiation engine (an operator overloading based) especially for quantum circuits. It uses the reversible context of quantum computation to optimize the performance during simulation, thus you may find this is way faster than any other AD engine at the moment.","category":"page"},{"location":"man/automatic_differentiation.html#Builtin-Reverse-mode-AD-engine-for-simulation","page":"Automatic Differentiation","title":"Builtin Reverse mode AD engine for simulation","text":"","category":"section"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"As for expectation, the usage is pretty simple, since the evluation of expectations are just","category":"page"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"expect(H, rand_state(10)=>circuit)","category":"page"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"to get the gradients, simply add an adjoint","category":"page"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"expect'(H, rand_state(10)=>circuit)","category":"page"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"which will return the pair of gradients, one is the gradient of input register and the other is the gradient of circuit parameters.","category":"page"},{"location":"man/automatic_differentiation.html#Forward-mode-AD-engine-(Faithful-gradient)","page":"Automatic Differentiation","title":"Forward mode AD engine (Faithful gradient)","text":"","category":"section"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"The faithful gradient is supported via an external package YaoExtensions, this packages contains some useful extensions to make things work out of the box.","category":"page"},{"location":"man/automatic_differentiation.html#Integration-with-General-purpose-AD-engine","page":"Automatic Differentiation","title":"Integration with General purpose AD engine","text":"","category":"section"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"The builtin AD engine for Yao only provides the differentiation of quantum circuits, but you can plug it into a general AD engine, such as Zygote by defining your own adjoints, or include this patch.","category":"page"},{"location":"man/automatic_differentiation.html#APIs","page":"Automatic Differentiation","title":"APIs","text":"","category":"section"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"Modules = [YaoBlocks.AD]\nOrder = [:function, :macro]","category":"page"},{"location":"man/automatic_differentiation.html#YaoBlocks.AD.apply_back-Tuple{Tuple{ArrayReg, ArrayReg}, AbstractBlock}","page":"Automatic Differentiation","title":"YaoBlocks.AD.apply_back","text":"apply_back(st::Tuple{<:ArrayReg, <:ArrayReg}, block::AbstractBlock; kwargs...) -> (out, outδ), paramsδ\n\nThe backward function of apply!. Returns a tuple of ((input register, gradient of input register), parameter gradients)\n\n\n\n\n\n","category":"method"},{"location":"man/automatic_differentiation.html#YaoBlocks.AD.generator-Tuple{RotationGate}","page":"Automatic Differentiation","title":"YaoBlocks.AD.generator","text":"generator(rot::Rotor) -> AbstractBlock\n\nReturn the generator of rotation block.\n\n\n\n\n\n","category":"method"},{"location":"man/automatic_differentiation.html#YaoBlocks.AD.mat_back-Union{Tuple{T}, Tuple{AbstractBlock, AbstractMatrix{T}}} where T","page":"Automatic Differentiation","title":"YaoBlocks.AD.mat_back","text":"mat_back([::Type{T}, ]block::AbstractBlock, adjm::AbstractMatrix) -> Vector\n\nThe backward function of mat. Returns the gradients of parameters.\n\n\n\n\n\n","category":"method"},{"location":"man/automatic_differentiation.html#YaoBlocks.AD.projection-Tuple{AbstractMatrix, AbstractMatrix}","page":"Automatic Differentiation","title":"YaoBlocks.AD.projection","text":"projection(y::AbstractMatrix, op::AbstractMatrix) -> typeof(y)\n\nProject op to sparse matrix with same sparsity as y.\n\n\n\n\n\n","category":"method"},{"location":"man/automatic_differentiation.html#YaoBlocks.AD.rotgrad-Union{Tuple{T}, Tuple{N}, Tuple{Type{T}, RotationGate{N, T, GT} where {T, GT<:AbstractBlock{N}}}} where {N, T}","page":"Automatic Differentiation","title":"YaoBlocks.AD.rotgrad","text":"The matrix gradient of a rotation block.\n\n\n\n\n\n","category":"method"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"DocTestSetup = quote\n    using Yao\n    using Yao: YaoBase, YaoBlocks, YaoArrayRegister\n    using YaoBase\n    using YaoBlocks\n    using YaoArrayRegister\nend","category":"page"},{"location":"man/extending_blocks.html#Extending-Blocks","page":"Extending Blocks","title":"Extending Blocks","text":"","category":"section"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"Blocks are defined as a sub-type system inside Julia, you could extend it by defining new Julia types by subtyping abstract types we provide. But we also provide some handy tools to help you create your own blocks.","category":"page"},{"location":"man/extending_blocks.html#Define-Custom-Constant-Blocks","page":"Extending Blocks","title":"Define Custom Constant Blocks","text":"","category":"section"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"Constant blocks are used quite often and in numerical simulation we would expect it to be a real constant in the program, which means it won't allocate new memory when we try to get its matrix for several times, and it won't change with parameters.","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"In Yao, you can simply define a constant block with @const_gate, with the corresponding matrix:","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"using YaoBlocks, BitBasis # hide\n@const_gate Rand = rand(ComplexF64, 4, 4)","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"This will automatically create a type RandGate{T} and a constant binding Rand to the instance of RandGate{ComplexF64}, and it will also bind a Julia constant for the given matrix, so when you call mat(Rand), no allocation will happen.","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"@allocated mat(Rand)","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"If you want to use other data type like ComplexF32, you could directly call Rand(ComplexF32), which will create a new instance with data type ComplexF32.","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"Rand(ComplexF32)","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"But remember this won't bind the matrix, it only binds the matrix you give","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"@allocated mat(Rand(ComplexF32))","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"so if you want to make the matrix call mat for ComplexF32 to have zero allocation as well, you need to do it explicitly.","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"@const_gate Rand::ComplexF32","category":"page"},{"location":"man/extending_blocks.html#Define-Custom-Blocks","page":"Extending Blocks","title":"Define Custom Blocks","text":"","category":"section"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"Primitive blocks are the most basic block to build a quantum circuit, if a primitive block has a certain structure, like containing tweakable parameters, it cannot be defined as a constant, thus create a new type by subtyping PrimitiveBlock is necessary","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"using YaoBlocks\n\nmutable struct PhaseGate{T <: Real} <: PrimitiveBlock{1}\n    theta::T\nend","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"If your insterested block is a composition of other blocks, you should define a CompositeBlock, e.g","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"struct ChainBlock{N} <: CompositeBlock{N}\n    blocks::Vector{AbstractBlock{N}}\nend","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"Besides types, there are several interfaces you could define for a block, but don't worry, they should just error if it doesn't work.","category":"page"},{"location":"man/extending_blocks.html#Define-the-matrix","page":"Extending Blocks","title":"Define the matrix","text":"","category":"section"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"The matrix form of a block is the minimal requirement to make a custom block functional, defining it is super simple, e.g for phase gate:","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"mat(::Type{T}, gate::PhaseGate) where T = exp(T(im * gate.theta)) * Matrix{Complex{T}}(I, 2, 2)","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"Or for composite blocks, you could just calculate the matrix by call mat on its subblocks.","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"mat(::Type{T}, c::ChainBlock) where T = prod(x->mat(T, x), reverse(c.blocks))","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"The rest will just work, but might be slow since you didn't define any specification for this certain block.","category":"page"},{"location":"man/extending_blocks.html#Define-how-blocks-are-applied-to-registers","page":"Extending Blocks","title":"Define how blocks are applied to registers","text":"","category":"section"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"Although, having its matrix is already enough for applying a block to register, we could improve the performance or dispatch to other actions by overloading apply! interface, e.g we can use specialized instruction to make X gate (a builtin gate defined @const_gate) faster:","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"function apply!(r::ArrayReg, x::XGate)\n    nactive(r) == 1 || throw(QubitMismatchError(\"register size $(nactive(r)) mismatch with block size $N\"))\n    instruct!(matvec(r.state), Val(:X), (1, ))\n    return r\nend","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"In Yao, this interface allows us to provide more aggressive specialization on different patterns of quantum circuits to accelerate the simulation etc.","category":"page"},{"location":"man/extending_blocks.html#Define-Parameters","page":"Extending Blocks","title":"Define Parameters","text":"","category":"section"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"If you want to use some member of the block to be parameters, you need to declare them explicitly","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"niparams(::Type{<:PhaseGate}) = 1\ngetiparams(x::PhaseGate) = x.theta\nsetiparams!(r::PhaseGate, param::Real) = (r.theta = param; r)","category":"page"},{"location":"man/extending_blocks.html#Define-Adjoint","page":"Extending Blocks","title":"Define Adjoint","text":"","category":"section"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"Since blocks are actually quantum operators, it makes sense to call their adjoint as well. We provide Daggered for general purpose, but some blocks may have more specific transformation rules for adjoints, e.g","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"Base.adjoint(x::PhaseGate) = PhaseGate(-x.theta)","category":"page"},{"location":"man/extending_blocks.html#Define-Cache-Keys","page":"Extending Blocks","title":"Define Cache Keys","text":"","category":"section"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"To enable cache, you should define cache_key, e.g for phase gate, we only cares about its phase, instead of the whole instance","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"cache_key(gate::PhaseGate) = gate.theta","category":"page"},{"location":"generated/quick-start/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"EditURL = \"https://github.com/QuantumBFS/Yao.jl/blob/master/docs/src/quick-start/7.variation-quantum-eigen-solver/main.jl\"","category":"page"},{"location":"generated/quick-start/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"generated/quick-start/7.variation-quantum-eigen-solver/index.html#Variational-Quantum-Eigen-Solver","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"","category":"section"},{"location":"generated/quick-start/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"using Yao, Yao.AD, YaoExtensions","category":"page"},{"location":"generated/quick-start/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"number of qubits","category":"page"},{"location":"generated/quick-start/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"n = 4","category":"page"},{"location":"generated/quick-start/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"4","category":"page"},{"location":"generated/quick-start/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"depth","category":"page"},{"location":"generated/quick-start/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"d = 5\ncircuit = dispatch!(variational_circuit(n, d),:random)\n\ngatecount(circuit)\n\nnparameters(circuit)\n\nh = heisenberg(n)","category":"page"},{"location":"generated/quick-start/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"nqubits: 4\n+\n├─ +\n│  ├─ repeat on (1, 2)\n│  │  └─ X\n│  ├─ repeat on (1, 2)\n│  │  └─ Y\n│  └─ repeat on (1, 2)\n│     └─ Z\n├─ +\n│  ├─ repeat on (2, 3)\n│  │  └─ X\n│  ├─ repeat on (2, 3)\n│  │  └─ Y\n│  └─ repeat on (2, 3)\n│     └─ Z\n├─ +\n│  ├─ repeat on (3, 4)\n│  │  └─ X\n│  ├─ repeat on (3, 4)\n│  │  └─ Y\n│  └─ repeat on (3, 4)\n│     └─ Z\n└─ +\n   ├─ repeat on (4, 1)\n   │  └─ X\n   ├─ repeat on (4, 1)\n   │  └─ Y\n   └─ repeat on (4, 1)\n      └─ Z\n","category":"page"},{"location":"generated/quick-start/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"pick the one you like either reverse-mode or forward mode grad = faithfulgrad(h, zerostate(n) => circuit; nshots=100)","category":"page"},{"location":"generated/quick-start/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"for i in 1:1000\n      _, grad = expect'(h, zero_state(n) => circuit)\n      dispatch!(-, circuit, 1e-2 * grad)\n      println(\"Step $i, energy = $(real.(expect(h, zero_state(n)=>circuit)))\")\nend\n\nusing LinearAlgebra\nw, _ = eigen(Matrix(mat(h)))","category":"page"},{"location":"generated/quick-start/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"LinearAlgebra.Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n16-element Vector{Float64}:\n -7.9999999999999964\n -4.0\n -3.9999999999999956\n -3.999999999999994\n -7.437659514860159e-32\n -4.426399962566284e-32\n  0.0\n  2.7369110631344083e-48\n  2.003298162163793e-32\n  3.552713678800501e-15\n  4.440892098500626e-15\n  3.9999999999999987\n  3.9999999999999996\n  4.0\n  4.0\n  4.0\nvectors:\n16×16 Matrix{ComplexF64}:\n      0.0+0.0im          0.0+0.0im           0.0+0.0im   0.0+0.0im           0.0+0.0im          0.0+0.0im        0.0+0.0im           0.0+0.0im           0.0+0.0im           0.0+0.0im           0.0+0.0im           0.0+0.0im        0.0+0.0im  1.0+0.0im   0.0+0.0im  0.0+0.0im\n      0.0+0.0im          0.0+0.0im          -0.5+0.0im   0.0+0.0im      0.559869+0.0im      0.43191+0.0im        0.0+0.0im           0.0+0.0im           0.0+0.0im           0.0+0.0im           0.0+0.0im          -0.5+0.0im        0.0+0.0im  0.0+0.0im   0.0+0.0im  0.0+0.0im\n      0.0+0.0im          0.0+0.0im           0.5+0.0im   0.0+0.0im   2.22045e-16+0.0im          0.0+0.0im        0.0+0.0im           0.0+0.0im      0.707107+0.0im           0.0+0.0im           0.0+0.0im          -0.5+0.0im        0.0+0.0im  0.0+0.0im   0.0+0.0im  0.0+0.0im\n 0.288675+0.0im  9.56933e-17+0.0im   6.41024e-18+0.0im   0.0+0.0im      0.481733+0.0im    -0.624453+0.0im        0.0+0.0im     -0.211325+0.0im   1.34897e-17+0.0im           0.0+0.0im     -0.288675+0.0im  -6.41024e-18+0.0im  -0.408248+0.0im  0.0+0.0im   0.0+0.0im  0.0+0.0im\n      0.0+0.0im          0.0+0.0im          -0.5+0.0im   0.0+0.0im     -0.559869+0.0im     -0.43191+0.0im        0.0+0.0im           0.0+0.0im   2.22045e-16+0.0im           0.0+0.0im           0.0+0.0im          -0.5+0.0im        0.0+0.0im  0.0+0.0im   0.0+0.0im  0.0+0.0im\n -0.57735+0.0im     0.707107+0.0im  -1.30125e-33+0.0im   0.0+0.0im  -1.30736e-32+0.0im          0.0+0.0im        0.0+0.0im  -8.71576e-33+0.0im   3.06708e-33+0.0im           0.0+0.0im  -1.97795e-16+0.0im   1.30125e-33+0.0im  -0.408248+0.0im  0.0+0.0im   0.0+0.0im  0.0+0.0im\n 0.288675+0.0im  9.56933e-17+0.0im  -2.39233e-17+0.0im   0.0+0.0im      -0.12908+0.0im     0.167322+0.0im        0.0+0.0im      0.788675+0.0im   2.77891e-17+0.0im           0.0+0.0im     -0.288675+0.0im   2.39233e-17+0.0im  -0.408248+0.0im  0.0+0.0im   0.0+0.0im  0.0+0.0im\n      0.0+0.0im          0.0+0.0im           0.0+0.0im  -0.5+0.0im           0.0+0.0im          0.0+0.0im   0.707107+0.0im           0.0+0.0im           0.0+0.0im  -4.71028e-16+0.0im           0.0+0.0im           0.0+0.0im        0.0+0.0im  0.0+0.0im  -0.5+0.0im  0.0+0.0im\n      0.0+0.0im          0.0+0.0im           0.5+0.0im   0.0+0.0im  -1.29477e-16+0.0im  6.29876e-17+0.0im        0.0+0.0im   6.06671e-17+0.0im     -0.707107+0.0im           0.0+0.0im           0.0+0.0im          -0.5+0.0im        0.0+0.0im  0.0+0.0im   0.0+0.0im  0.0+0.0im\n 0.288675+0.0im  9.56933e-17+0.0im   1.75131e-17+0.0im   0.0+0.0im     -0.352653+0.0im     0.457131+0.0im        0.0+0.0im      -0.57735+0.0im  -4.12788e-17+0.0im           0.0+0.0im     -0.288675+0.0im  -1.75131e-17+0.0im  -0.408248+0.0im  0.0+0.0im   0.0+0.0im  0.0+0.0im\n -0.57735+0.0im    -0.707107+0.0im   1.30125e-33+0.0im   0.0+0.0im   1.30736e-32+0.0im          0.0+0.0im        0.0+0.0im   8.71576e-33+0.0im  -3.06708e-33+0.0im           0.0+0.0im  -3.14995e-16+0.0im  -1.30125e-33+0.0im  -0.408248+0.0im  0.0+0.0im   0.0+0.0im  0.0+0.0im\n      0.0+0.0im          0.0+0.0im           0.0+0.0im   0.5+0.0im           0.0+0.0im          0.0+0.0im        0.0+0.0im           0.0+0.0im           0.0+0.0im     -0.707107+0.0im           0.0+0.0im           0.0+0.0im        0.0+0.0im  0.0+0.0im  -0.5+0.0im  0.0+0.0im\n 0.288675+0.0im          0.0+0.0im           0.0+0.0im   0.0+0.0im           0.0+0.0im          0.0+0.0im        0.0+0.0im           0.0+0.0im           0.0+0.0im           0.0+0.0im      0.866025+0.0im           0.0+0.0im  -0.408248+0.0im  0.0+0.0im   0.0+0.0im  0.0+0.0im\n      0.0+0.0im          0.0+0.0im           0.0+0.0im  -0.5+0.0im           0.0+0.0im          0.0+0.0im  -0.707107+0.0im           0.0+0.0im           0.0+0.0im  -4.71028e-16+0.0im           0.0+0.0im           0.0+0.0im        0.0+0.0im  0.0+0.0im  -0.5+0.0im  0.0+0.0im\n      0.0+0.0im          0.0+0.0im           0.0+0.0im   0.5+0.0im           0.0+0.0im          0.0+0.0im        0.0+0.0im           0.0+0.0im           0.0+0.0im      0.707107+0.0im           0.0+0.0im           0.0+0.0im        0.0+0.0im  0.0+0.0im  -0.5-0.0im  0.0+0.0im\n      0.0+0.0im          0.0+0.0im           0.0+0.0im   0.0+0.0im           0.0+0.0im          0.0+0.0im        0.0+0.0im           0.0+0.0im           0.0+0.0im           0.0+0.0im           0.0+0.0im           0.0+0.0im        0.0+0.0im  0.0+0.0im   0.0+0.0im  1.0+0.0im","category":"page"},{"location":"generated/quick-start/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"","category":"page"},{"location":"generated/quick-start/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"EditURL = \"https://github.com/QuantumBFS/Yao.jl/blob/master/docs/src/quick-start/3.grover-search/main.jl\"","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html#Grover","page":"Grover Search","title":"Grover Search","text":"","category":"section"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"using Yao\nusing YaoExtensions: variational_circuit\nusing LinearAlgebra","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html#Grover-Step","page":"Grover Search","title":"Grover Step","text":"","category":"section"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"A single grover step is consist of applying oracle circuit and reflection circuit. The reflection_circuit function takes the wave function generator U as the input and returns U|0><0|U'.","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"function grover_step!(reg::AbstractRegister, oracle, U::AbstractBlock)\n    apply!(reg |> oracle, reflect_circuit(U))\nend\n\nfunction reflect_circuit(gen::AbstractBlock{N}) where N\n    reflect0 = control(N, -collect(1:N-1), N=>-Z)\n    chain(gen', reflect0, gen)\nend","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"reflect_circuit (generic function with 1 method)","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"Compute the propotion of target states to estimate the number of iterations, which requires computing the output state.","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"function solution_state(oracle, gen::AbstractBlock{N}) where N\n    reg= zero_state(N) |> gen\n    reg.state[real.(statevec(ArrayReg(ones(ComplexF64, 1<<N)) |> oracle)) .> 0] .= 0\n    normalize!(reg)\nend\n\nfunction num_grover_step(oracle, gen::AbstractBlock{N}) where N\n    reg = zero_state(N) |> gen\n    ratio = abs2(solution_state(oracle, gen)'*reg)\n    Int(round(pi/4/sqrt(ratio)))-1\nend","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"num_grover_step (generic function with 1 method)","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html#Run","page":"Grover Search","title":"Run","text":"","category":"section"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"First, we define the problem by an oracle, it finds bit string bit\"000001100100\".","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"num_bit = 12\noracle = matblock(Diagonal((v = ones(ComplexF64, 1<<num_bit); v[Int(bit\"000001100100\")+1]*=-1; v)))","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"matblock(...)","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"then solve the above problem","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"gen = repeat(num_bit, H, 1:num_bit)\nreg = zero_state(num_bit) |> gen\n\ntarget_state = solution_state(oracle, gen)\n\nfor i = 1:num_grover_step(oracle, gen)\n    grover_step!(reg, oracle, gen)\n    overlap = abs(reg'*target_state)\n    println(\"step $(i-1), overlap = $overlap\")\nend","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"step 0, overlap = 0.04685974121093736\nstep 1, overlap = 0.0780487209558483\nstep 2, overlap = 0.10916148124670066\nstep 3, overlap = 0.14016763852852288\nstep 4, overlap = 0.17103691335084453\nstep 5, overlap = 0.20173915993747182\nstep 6, overlap = 0.23224439562572258\nstep 7, overlap = 0.26252283014636996\nstep 8, overlap = 0.29254489471570244\nstep 9, overlap = 0.322281270911289\nstep 10, overlap = 0.35170291930325104\nstep 11, overlap = 0.3807811078130809\nstep 12, overlap = 0.40948743977231195\nstep 13, overlap = 0.4377938816536402\nstep 14, overlap = 0.46567279044741594\nstep 15, overlap = 0.49309694065677034\nstep 16, overlap = 0.5200395508850146\nstep 17, overlap = 0.5464743099893477\nstep 18, overlap = 0.5723754027753314\nstep 19, overlap = 0.5977175352070423\nstep 20, overlap = 0.6224759591082774\nstep 21, overlap = 0.6466264963306958\nstep 22, overlap = 0.6701455623652912\nstep 23, overlap = 0.6930101893741392\nstep 24, overlap = 0.7151980486199263\nstep 25, overlap = 0.7366874722713579\nstep 26, overlap = 0.7574574745631494\nstep 27, overlap = 0.7774877722899375\nstep 28, overlap = 0.7967588046140988\nstep 29, overlap = 0.8152517521681291\nstep 30, overlap = 0.8329485554329328\nstep 31, overlap = 0.8498319323740713\nstep 32, overlap = 0.8658853953187506\nstep 33, overlap = 0.8810932670570639\nstep 34, overlap = 0.8954406961517668\nstep 35, overlap = 0.9089136714416339\nstep 36, overlap = 0.9214990357242339\nstep 37, overlap = 0.9331844986047592\nstep 38, overlap = 0.9439586484983656\nstep 39, overlap = 0.953810963774298\nstep 40, overlap = 0.9627318230309194\nstep 41, overlap = 0.9707125144916121\nstep 42, overlap = 0.9777452445123718\nstep 43, overlap = 0.983823145192787\nstep 44, overlap = 0.9889402810829753\nstep 45, overlap = 0.9930916549799182\nstep 46, overlap = 0.9962732128075449\nstep 47, overlap = 0.9984818475757891\nstep 48, overlap = 0.9997154024147601\n","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html#Rejection-Sampling","page":"Grover Search","title":"Rejection Sampling","text":"","category":"section"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"In practise, it is often not possible to determine the number of iterations before actual running. we can use rejection sampling technique to avoid estimating the number of grover steps.","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"In a single try, we apply the grover algorithm for nstep times.","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"function single_try(oracle, gen::AbstractBlock{N}, nstep::Int; nbatch::Int) where N\n    reg = zero_state(N+1; nbatch=nshot)\n    focus!(reg, 1:N) do r\n        r |> gen\n        for i = 1:nstep\n            grover_step!(r, oracle, gen)\n        end\n        return r\n    end\n    reg |> checker\n    res = measure!(RemoveMeasured(), reg, (N+1))\n    return res, reg\nend","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"single_try (generic function with 1 method)","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"After running the grover search, we have a checker program that flips the ancilla qubit if the output is the desired value, we assume the checker program can be implemented in polynomial time. to gaurante the output is correct. We contruct a checker \"program\", if the result is correct, flip the ancilla qubit","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"ctrl = -collect(1:num_bit); ctrl[[3,6,7]] *= -1\nchecker = control(num_bit+1,ctrl, num_bit+1=>X)","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"nqubits: 13\ncontrol(¬1, ¬2, 3, ¬4, ¬5, 6, 7, ¬8, ¬9, ¬10, ¬11, ¬12)\n└─ (13,) X","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"The register is batched, with batch dimension nshot. focus! views the first 1-N qubts as system. For a batched register, measure! returns a vector of bitstring as output.","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html#Run-2","page":"Grover Search","title":"Run","text":"","category":"section"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"maxtry = 100\nnshot = 3\n\nfor nstep = 0:maxtry\n    println(\"number of iter = $nstep\")\n    res, regi = single_try(oracle, gen, nstep; nbatch=3)\n\n    # success!\n    if any(==(1), res)\n        overlap_final = viewbatch(regi, findfirst(==(1), res))'*target_state\n        println(\"success, overlap = $(overlap_final)\")\n        break\n    end\nend","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"number of iter = 0\nnumber of iter = 1\nnumber of iter = 2\nnumber of iter = 3\nnumber of iter = 4\nnumber of iter = 5\nnumber of iter = 6\nnumber of iter = 7\nnumber of iter = 8\nnumber of iter = 9\nnumber of iter = 10\nsuccess, overlap = 1.0 + 0.0im\n","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"The final state has an overlap of 1 with the target state.","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html#Amplitude-Amplification","page":"Grover Search","title":"Amplitude Amplification","text":"","category":"section"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"Given a circuit to generate a state, now we want to project out the subspace with [1,3,5,8,9,11,12] fixed to 1 and [4,6] fixed to 0. We can construct an oracle","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"evidense = [1, 3, -4, 5, -6, 8, 9, 11, 12]\nfunction inference_oracle(nbit::Int, locs::Vector{Int})\n    control(nbit, locs[1:end-1], abs(locs[end]) => (locs[end]>0 ? Z : -Z))\nend\noracle = inference_oracle(nqubits(reg), evidense)","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"nqubits: 12\ncontrol(1, 3, ¬4, 5, ¬6, 8, 9, 11)\n└─ (12,) Z","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"We use a variational circuit generator defined in YaoExtensions","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"gen = dispatch!(variational_circuit(num_bit), :random)\nreg = zero_state(num_bit) |> gen","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"ArrayReg{1, ComplexF64, Array...}\n    active qubits: 12/12","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html#Run-3","page":"Grover Search","title":"Run","text":"","category":"section"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"solution = solution_state(oracle, gen)\nfor i = 1:num_grover_step(oracle, gen)\n    grover_step!(reg, oracle, gen)\n    println(\"step $(i-1), overlap = $(abs(reg'*solution))\")\nend","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"step 0, overlap = 0.13048259737225623\nstep 1, overlap = 0.21636806566880362\nstep 2, overlap = 0.3006079477416138\nstep 3, overlap = 0.3825615575957374\nstep 4, overlap = 0.4616055974679641\nstep 5, overlap = 0.5371388983147931\nstep 6, overlap = 0.6085869920005373\nstep 7, overlap = 0.6754064804118103\nstep 8, overlap = 0.7370891682691153\nstep 9, overlap = 0.79316592820346\nstep 10, overlap = 0.8432102687021785\nstep 11, overlap = 0.8868415777879617\nstep 12, overlap = 0.9237280177613174\nstep 13, overlap = 0.9535890489905056\nstep 14, overlap = 0.9761975635542841\nstep 15, overlap = 0.9913816125100473\nstep 16, overlap = 0.9990257136506371\n","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"","category":"page"},{"location":"generated/quick-start/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"This page was generated using Literate.jl.","category":"page"},{"location":"notes.html#How-to-overload-exist-method-for-a-block","page":"How to overload exist method for a block","title":"How to overload exist method for a block","text":"","category":"section"},{"location":"notes.html","page":"How to overload exist method for a block","title":"How to overload exist method for a block","text":"every block has two method: mat & apply!, overload mat to define how to gather this block's matrix form, overload apply! to define how to apply this block to a register.","category":"page"},{"location":"notes.html","page":"How to overload exist method for a block","title":"How to overload exist method for a block","text":"Prototypes:","category":"page"},{"location":"notes.html","page":"How to overload exist method for a block","title":"How to overload exist method for a block","text":"apply!(reg, block)\nmat(block)","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"EditURL = \"https://github.com/QuantumBFS/Yao.jl/blob/master/docs/src/quick-start/2.qft-phase-estimation/main.jl\"","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html#example-qft","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"","category":"section"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Let's use Yao first","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"using Yao","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html#Quantum-Fourier-Transformation","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation","text":"","category":"section"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"The Quantum Fourier Transformation (QFT) circuit is to repeat two kinds of blocks repeatly:","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"(Image: qft-circuit)","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"The basic building block control phase shift gate is defined as","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"R(k)=beginbmatrix\n1  0\n0  expleft(frac2pi i2^kright)\nendbmatrix","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Let's define block A and block B, block A is actually a control block.","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"A(i, j) = control(i, j=>shift(2π/(1<<(i-j+1))))","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"A (generic function with 1 method)","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Once you construct the blockl you can inspect its matrix using mat function. Let's construct the circuit in dash box A, and see the matrix of R_4 gate.","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"R4 = A(4, 1)","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"(n -> control(n, 4, 1 => shift(0.39269908169872414)))","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"If you have read about preparing GHZ state, you probably know that in Yao, we could just leave the number of qubits, and it will be evaluated when possible.","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"R4(5)","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"nqubits: 5\ncontrol(4)\n└─ (1,) shift(0.39269908169872414)","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"its matrix will be","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"mat(R4(5))","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"32×32 LinearAlgebra.Diagonal{ComplexF64, Vector{ComplexF64}}:\n 1.0+0.0im      ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅      1.0+0.0im      ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅      1.0+0.0im      ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅      1.0+0.0im      ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅      1.0+0.0im      ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅      1.0+0.0im      ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅      1.0+0.0im      ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅      1.0+0.0im      ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅      1.0+0.0im          ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅      0.92388+0.382683im      ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅           1.0+0.0im          ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅      0.92388+0.382683im      ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅           1.0+0.0im          ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅      0.92388+0.382683im      ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅           1.0+0.0im          ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅      0.92388+0.382683im      ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅           1.0+0.0im      ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅      1.0+0.0im      ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅      1.0+0.0im      ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅      1.0+0.0im      ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅      1.0+0.0im      ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅      1.0+0.0im      ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅      1.0+0.0im      ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅      1.0+0.0im      ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅      1.0+0.0im          ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅      0.92388+0.382683im      ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅           1.0+0.0im          ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅      0.92388+0.382683im      ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅           1.0+0.0im          ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅      0.92388+0.382683im      ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅           1.0+0.0im          ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅      0.92388+0.382683im","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Then we repeat this control block over and over on different qubits, and put a Hadamard gate to ith qubit to construct i-th B block.","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"B(n, k) = chain(n, j==k ? put(k=>H) : A(j, k) for j in k:n)","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"B (generic function with 1 method)","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"We need to input the total number of qubits n here because we have to iterate through from k-th location to the last.","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Now, let's construct the circuit by chaining all the B blocks together","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"qft(n) = chain(B(n, k) for k in 1:n)\nqft(4)","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"nqubits: 4\nchain\n├─ chain\n│  ├─ put on (1)\n│  │  └─ H\n│  ├─ control(2)\n│  │  └─ (1,) shift(1.5707963267948966)\n│  ├─ control(3)\n│  │  └─ (1,) shift(0.7853981633974483)\n│  └─ control(4)\n│     └─ (1,) shift(0.39269908169872414)\n├─ chain\n│  ├─ put on (2)\n│  │  └─ H\n│  ├─ control(3)\n│  │  └─ (2,) shift(1.5707963267948966)\n│  └─ control(4)\n│     └─ (2,) shift(0.7853981633974483)\n├─ chain\n│  ├─ put on (3)\n│  │  └─ H\n│  └─ control(4)\n│     └─ (3,) shift(1.5707963267948966)\n└─ chain\n   └─ put on (4)\n      └─ H\n","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html#Wrap-QFT-to-an-external-block","page":"Quantum Fourier Transformation and Phase Estimation","title":"Wrap QFT to an external block","text":"","category":"section"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"In most cases, functions are enough to wrap quantum circuits, like A and B we defined above, but sometimes, we need to dispatch specialized methods on certain kinds of quantum circuit, or we want to define an external block to export, thus, it's useful to be able to wrap circuit to custom blocks.","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"First, we define a new type as subtype of PrimitiveBlock since we are not going to use the subblocks of QFT, if you need to use its subblocks, it'd be better to define it under CompositeBlock.","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"struct QFT{N} <: PrimitiveBlock{N} end\nQFT(n::Int) = QFT{n}()","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Main.##276.QFT","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Now, let's define its circuit","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"circuit(::QFT{N}) where N = qft(N)","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"circuit (generic function with 1 method)","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"And forward mat to its circuit's matrix","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"YaoBlocks.mat(::Type{T}, x::QFT) where T = mat(T, circuit(x))","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"You may notice, it is a little ugly to print QFT at the moment, this is because we print the type summary by default, you can define your own printing by overloading print_block","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"YaoBlocks.print_block(io::IO, x::QFT{N}) where N = print(io, \"QFT($N)\")","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Since it is possible to use FFT to simulate the results of QFT (like cheating), we could define our custom apply! method:","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"using FFTW, LinearAlgebra\n\nfunction YaoBlocks.apply!(r::ArrayReg, x::QFT)\n    α = sqrt(length(statevec(r)))\n    invorder!(r)\n    lmul!(α, ifft!(statevec(r)))\n    return r\nend","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Now let's check if our apply! method is correct:","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"r = rand_state(5)\nr1 = r |> copy |> QFT(5)\nr2 = r |> copy |> circuit(QFT(5))\nr1 ≈ r2","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"true","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"We can get iQFT (inverse QFT) directly by calling adjoint","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"QFT(5)'","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":" [†]QFT(5)","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"QFT and iQFT are different from FFT and IFFT in three ways,","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"they are different by a factor of sqrt2^n with n the number of qubits.\nthe bit numbering will exchange after applying QFT or iQFT.\ndue to the convention, QFT is more related to IFFT rather than FFT.","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html#Phase-Estimation","page":"Quantum Fourier Transformation and Phase Estimation","title":"Phase Estimation","text":"","category":"section"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Since we have QFT and iQFT blocks we can then use them to realize phase estimation circuit, what we want to realize is the following circuit:","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"(Image: phase estimation)","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"using Yao","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"First we call Hadamard gates repeatly on first n qubits.","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Hadamards(n) = repeat(H, 1:n)","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Hadamards (generic function with 1 method)","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Then in dashed box B, we have controlled unitaries:","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"ControlU(n, m, U) = chain(n+m, control(k, n+1:n+m=>matblock(U^(2^(k-1)))) for k in 1:n)","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"ControlU (generic function with 1 method)","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"each of them is a U of power 2^(k-1).","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Since we will only apply the qft and Hadamard on first n qubits, we could use Subroutine, which creates a context of a sub-scope of the qubits.","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"PE(n, m, U) =\n    chain(n+m, # total number of the qubits\n        subroutine(Hadamards(n), 1:n), # apply H in local scope\n        ControlU(n, m, U),\n        subroutine(QFT(n)', 1:n))","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"PE (generic function with 1 method)","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"we use the first n qubits as the output space to store phase ϕ, and the other m qubits as the input state which corresponds to an eigenvector of oracle matrix U.","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"The concentrator here uses focus! and relax! to manage a local scope of quantum circuit, and only active the first n qubits while applying the block inside the concentrator context, and the scope will be relax!ed back, after the context. This is equivalent to manually focus! then relax!","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"fullly activated","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"r = rand_state(5)","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"ArrayReg{1, ComplexF64, Array...}\n    active qubits: 5/5","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"first 3 qubits activated","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"focus!(r, 1:3)","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"ArrayReg{1, ComplexF64, Array...}\n    active qubits: 3/5","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"relax back to the original","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"relax!(r, 1:3)","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"ArrayReg{1, ComplexF64, Array...}\n    active qubits: 5/5","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"In this way, we will be able to apply small operator directly on the subset of the qubits.","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Details about the algorithm can be found here: Quantum Phase Estimation Algorithm","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Now let's check the results of our phase estimation.","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"First we need to set up a unitary with known phase, we set the phase to be 0.75, which is 0.75 * 2^3 == 6 == 0b110 .","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html#using-LinearAlgebra","page":"Quantum Fourier Transformation and Phase Estimation","title":"using LinearAlgebra","text":"","category":"section"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"N, M = 3, 5\nP = eigen(rand_unitary(1<<M)).vectors\nθ = Int(0b110) / 1<<N\nphases = rand(1<<M)\nphases[0b010+1] = θ\nU = P * Diagonal(exp.(2π * im * phases)) * P'","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"32×32 Matrix{ComplexF64}:\n    0.183514+0.208143im       -0.12739-0.083937im       -0.12534+0.000698986im    -0.125906+0.156747im     0.00445452+0.0469105im     -0.149244-0.114137im      0.240654-0.0634738im     -0.107272+0.112019im       0.128456-0.226348im      0.0729496-0.0357965im    0.0511262+0.0751745im    -0.0159045-0.0144717im    0.0203452-0.0862959im      0.170211-0.283441im     0.134342+0.11864im      0.00358843+0.0411866im      0.029257+0.0177964im     0.0310284-0.279843im     -0.0985579+0.058192im     -0.0182069-0.0783728im     0.0138604+0.0522064im     0.135517-0.00852326im   -0.0714082-0.0852772im     0.218197-0.0401807im      0.142245-0.0990665im   -0.0361271-0.119751im      -0.112824+0.125063im     -0.175619+0.0241388im      0.267991+0.103636im    -0.0690486+0.0865046im    0.0728575-0.186023im      0.106831+0.226733im\n  -0.0627944-6.18999e-5im    0.0670059+0.142414im     -0.0895918-0.249539im        0.252397-0.00700988im    0.0123944-0.0623076im     -0.130671-0.378879im     0.0805379+0.045196im     -0.0746764+0.0792697im    -0.0437623-0.185417im      -0.215346+0.0975263im    -0.120543+0.0546455im     0.0649388+0.0621411im     0.107426+0.117952im      0.0943132-0.158378im    -0.019811-0.0384679im      0.175519+0.238547im     -0.0866272+0.0223135im    -0.0569323+0.178567im       0.234403-0.0357596im       0.01329-0.259867im     -0.0985729-0.0676439im   -0.0296806-0.0782785im     0.0531381+0.0108548im    -0.200895+0.0130855im     0.0483793-0.101443im      -0.13942+0.147634im      -0.100541-0.0862766im   0.00325887-0.134053im       0.109483+0.0567608im     0.142603+0.0546696im    0.0647402+0.0732588im    0.0765561-0.101063im\n    0.131378-0.0994741im     0.0911772+0.0765176im    0.00534143-0.0375044im     -0.0713929-0.153291im    -0.00381721-0.091822im      0.0730835+0.00519872im   0.0230068+0.172077im     -0.0309472-0.226932im       0.232028+0.0790255im    -0.0769955+0.0643192im   -0.0449827-0.0218197im     -0.107094+0.197161im     -0.148555-0.00905032im    -0.230873+0.0427125im   0.0733549+0.216471im       0.327513+0.0916519im    -0.0600984+0.0822248im     0.0539531-0.226124im     -0.0606823+0.0268423im     -0.341699+0.108648im     -0.0524596-0.0039711im   -0.0694743+0.0864282im     -0.101938+0.0853848im   -0.0274727-0.0528902im     0.0709181+0.108761im     -0.205016-0.0523402im     0.0230029-0.112582im      0.135397+0.00178282im     0.083134+0.0077854im     0.247364-0.0758169im    0.0509822-0.00711125im    0.189473+0.157345im\n   -0.158281-0.0974762im     -0.153293-0.0871385im     -0.115062-0.0418237im    -0.00591419+0.0908888im     0.0261786+0.0789902im     -0.102866-0.150798im     0.0868401+0.0383833im    -0.0440035-0.0391327im     -0.131336+0.189125im       0.215846+0.0410423im     0.287215+0.263685im      -0.215409-0.050363im     -0.124084+0.103099im       0.120056-0.0202489im   -0.157513-0.00890569im     0.129216-0.0747694im    -0.0797525+0.0271072im    -0.0336748-0.19672im      -0.0597736-0.00654639im     0.222238-0.0403644im     0.0970766+0.0738212im    -0.120159+0.0823099im      0.202057-0.00294613im   -0.205438-0.0688965im      0.114745+0.019535im     0.0389576-0.0889391im      0.130167+0.170302im      0.186806+0.143758im      0.0108147-0.0959078im     0.242171+0.0275973im      0.13295+0.152084im     0.0905481-0.0203505im\n    0.117346-0.0151356im     -0.113991-0.0126191im      0.297866-0.0200467im      -0.258667-0.0380607im      0.121489+0.0583824im      -0.17758-0.205284im    -0.0358232-0.0239105im    -0.0828709+0.0742907im     -0.098973+0.144031im      -0.104032+0.0918827im    -0.155225-0.228734im      0.0980531+0.15268im        0.11551-0.00194687im    0.0813382-0.091291im   -0.0214566+0.0907711im    -0.0708831-0.157605im     -0.0998505+0.0658515im   -0.00977321+0.0390729im    -0.0918803-0.100434im      -0.135724-0.00674223im    -0.171268+0.321864im      0.189939+0.00706905im     0.146296-0.0756997im   -0.0848838-0.157829im      0.0323493+0.0889292im     0.126681+0.0663528im     0.0305512-0.114681im      0.246608+0.202123im       0.021211-0.0940062im   -0.0505747+0.188105im     0.0430424-0.0422443im     0.014458-0.0762231im\n    0.150685-0.208611im       0.227225+0.243911im     -0.0282928+0.119745im      -0.0115775+0.0142396im     -0.303623-0.08248im      -0.0608236-0.0281314im   -0.0162701-0.00625467im     0.114484+0.000456707im    -0.20559+0.135425im       -0.10295+0.26644im     -0.0563076+0.0577225im    -0.0979776-0.0301478im   0.00219357+0.0522327im    0.00365963+0.0411852im   -0.052163+0.126536im     -0.0806058-0.0372344im      0.161969+0.185957im       -0.24744-0.146326im      -0.164741+0.113282im       0.185991-0.21021im      -0.0618501+0.0015068im     0.139298+0.19596im        0.108375-0.08449im       0.116586-0.0628526im      0.080567+0.0859645im   -0.0119225-0.127241im      -0.021033-0.142734im     -0.139949-0.132001im      0.0973131+0.101244im    -0.0234387-0.00561754im   -0.129123+0.0658326im    -0.100124-0.0195697im\n   -0.186243-0.0486796im    -0.0326995-0.0388431im      0.219186-0.169491im      -0.0196383-0.0366671im      0.183353-0.172583im       0.165384+0.0957817im     0.194064-0.0126939im       0.17998+0.082956im      0.0877013-0.0598604im       0.15691-0.0304816im   -0.0153531+0.0547131im     0.0788154-0.0432838im     0.257238-0.109213im       0.058426-0.0241259im    0.167737-0.117289im       0.179804+0.0873144im     -0.143299+0.0829979im     -0.109041-0.0529285im     -0.204206+0.0990467im     -0.154922-0.157009im     -0.0207004-0.0719763im   -0.0148014+0.176197im       0.157749+7.34707e-6im  -0.0340303-0.053129im        0.10661+0.182747im     0.0528943+0.0904266im      0.293406+0.0753422im    -0.205156-0.0112744im     0.0998596-0.0478521im    0.0364922-0.0150304im    -0.200365-0.0325232im    -0.167586-0.109174im\n   0.0697842-0.108373im       0.165378-0.161528im      0.0909706-0.101202im       -0.158691+0.109559im      0.0297564-0.154606im      -0.147154-0.201415im     0.0520131+0.229266im      0.0907567-0.0562862im     0.0418235-0.0207801im    -0.0113653-0.0884887im     0.205941+0.00838182im  0.000131406-0.243306im     0.0964035-0.0996581im     -0.163139+0.152675im    -0.091715+0.0260794im    -0.0893207-0.00865107im     -0.14147-0.0607124im    -0.0492348-0.143473im       0.218787-0.191531im      0.0483992+0.0191197im   -0.00939062-0.235012im       0.18051+0.0565325im     -0.224551-0.342161im    -0.0955058-0.147194im      -0.208967+0.0347591im   -0.0209893-0.0128121im    -0.0199608+0.00746576im     0.03575+0.038417im       0.100557-0.014918im    -0.0320917-0.106096im    -0.0401048-0.112493im    -0.0259522-0.11334im\n  -0.0416364+0.173902im      0.0216266+0.0463956im     0.0510679-0.0968408im       0.076644+0.0735265im      0.101134-0.0527239im       0.10721+0.0469237im    -0.127269+0.0812813im     -0.113282-0.220732im     -0.0931541-0.00831767im    -0.024873-0.0613727im      0.10197+0.14893im      -0.0209024+0.095418im     0.0750323+0.289101im      0.0339913+0.121955im    -0.103943-0.00703727im     0.160526-0.0665581im     0.0371126+0.15565im         0.19495+0.0208174im     -0.224127+0.146984im     -0.0398974-0.0961746im     -0.117745+0.0201327im     0.209489-0.205028im      -0.136207-0.0704223im    0.0495233-0.00890634im   -0.0589173-0.0475666im     0.147389-0.248724im      -0.164592+0.0273146im    -0.145326+0.00678327im  -0.00254814-0.139824im     0.0553577+0.0705778im    -0.133977-0.176286im      0.160142-0.340555im\n -0.00069089-0.0500953im     0.0861353+0.035746im      0.0352912+0.086802im       -0.194213+0.0156939im     -0.123289-0.0378524im     0.0860773-0.00731477im  -0.0798559+0.121504im    0.000301728+0.0219847im     0.0093719-0.239615im      0.0789495+0.0961628im     0.217796-0.01411im        0.115937-0.0187127im    0.0178122+0.0589075im     0.0313322-0.0154766im  -0.0568933+0.363618im       0.167214+0.129795im      -0.102037+0.0989186im     -0.111798+0.118884im       0.195977-0.0597865im    0.00248549-0.0290971im      0.179062-0.00250143im   -0.232441-0.139916im      0.0617306-0.0168586im    0.0574589+0.165902im       0.154085-0.00286624im    0.147478-0.13121im        0.111619-0.0857429im    0.0469816-0.0282411im    -0.0327199-0.346729im     -0.262644+0.235453im    -0.0917386-0.0518623im   0.00166275+0.06356im\n  -0.0259213+0.120248im     -0.0412556+0.299214im     -0.0487779+0.122975im        -0.14203+0.0827151im    -0.0398397+0.0410723im     0.0457315+0.12016im       0.310374+0.0950609im      0.046915-0.00897335im     0.139262+0.0608282im     -0.175539+0.0646712im     0.178469+0.0797799im    -0.0854581+0.0957634im     0.101785-0.202171im      -0.193653+0.132782im   0.00438791-0.132545im     -0.0413753-0.153436im       0.040607+0.0477969im      0.258783+0.0494182im     0.0897742-0.0172751im    -0.0157624-0.187589im     0.00430657-0.0465156im    0.0701674-0.0809521im       0.14341-0.0216041im    -0.134797-0.15312im        0.118042+0.00840868im  -0.0484592+0.165405im     -0.0874103+0.187887im     0.0809125-0.131971im     -0.0810473-0.0152256im    -0.202516+0.186974im     -0.131127+0.153777im       0.17491+0.0374912im\n   0.0711743+0.243156im        0.05147+0.0482165im    0.00406505+0.0540075im      0.0314176-0.142977im      -0.137512+0.00156446im    -0.143154+0.057808im      0.116089+0.179527im       0.307929+0.0288976im     0.0769868-0.0184871im     0.0522409+0.0942337im    -0.144193-0.0318902im      0.286696+0.0126428im    -0.133039+0.00885651im     0.233712+0.110602im   -0.0188152-0.160247im     -0.0222929-0.154394im     -0.0415283+0.0215861im    -0.0227035+0.137059im      -0.147029+0.0844491im     0.0557851+0.0177748im    -0.0109246-0.328129im    -0.0542796-0.0705774im    -0.0438164+0.0329206im    0.0398351-0.0803204im    0.00759478+0.0353138im     -0.17609-0.214474im      0.0764207+0.0494454im     0.215443+0.108871im       0.210314-0.1745im       0.0284389+0.0730926im     0.229593+0.0180874im   0.00284879-0.0784257im\n    0.127256-0.0381059im      0.137865-0.020272im      0.0146495+0.0170725im       0.100348-0.0342936im     -0.146904+0.268913im     -0.0668833+0.124857im     0.0136949+0.034905im    -0.00667256-0.12002im        0.106393-0.094657im      -0.273224-0.165197im     -0.230619+0.0651653im     0.0434373+0.032253im      0.319453+0.166611im      0.0280534+0.077412im   -0.0682202-0.0745193im     0.0771322-0.113615im     -0.0714831-0.0426386im    -0.0420797-0.123977im     -0.0607715-0.166787im       0.137744-0.0490654im      0.176981-0.0265508im    0.0464332-0.0512168im    -0.0524156-0.15008im     -0.0845237+0.128729im       0.237548-0.0744874im    0.0967555+0.0617688im      0.172249+0.0755702im   -0.0301275+0.269103im        -0.1346-0.0283662im     0.175947-0.0301691im     -0.12919-0.0424474im   -0.0112711+0.23899im\n    0.249977-0.0103413im    -0.0438149+0.0993068im     0.0596934-0.0798092im      -0.131007+0.0344449im    0.00378925-0.0311883im     0.0375319-0.159838im     -0.133496-0.0750912im     0.0251103-0.100677im       0.223793+0.289031im     -0.0960759+0.0723721im     0.136936+0.0448618im      0.215024-0.0353387im    -0.128673-0.145791im       0.120762-0.151816im    0.0128168+0.0154191im      0.227164-0.0255323im   -0.00240644-0.18461im      -0.0973005+0.162752im      -0.103973-0.178275im       0.122557-0.0485747im      0.034556-0.0520628im      0.18444+0.165422im      -0.153152+0.293402im    -0.0802172+0.0323089im     0.0269227-0.215163im     0.0530933-0.0389958im      0.019321+0.218252im     -0.157171-0.0857811im     -0.165043-0.0872157im   -0.0100571-0.0643247im   -0.0629232+0.0170398im   -0.0454034-0.0398411im\n   0.0779154-0.117796im     -0.0614105-0.051127im      0.0551633+0.251762im          0.1467+0.0503215im     -0.120728-0.0987609im      -0.12172-0.124392im    0.00856658+0.00355524im   0.00149407+0.114339im       0.149511-0.114995im      -0.167581-0.0984882im    0.0908371+0.172812im      0.0316033+0.0335088im   -0.0207696-0.0750523im      0.118691+0.0493477im   0.0814654+0.117882im      0.0515852-0.00491834im     0.101094-0.0924913im      0.023439+0.275105im      -0.178156+0.218139im     -0.0596474+0.0681363im     -0.177357+0.0167973im    -0.274455+0.0366179im    -0.0113446-0.233412im     -0.200122-0.256633im      -0.086002+0.151786im      0.281585-0.0580192im  -0.000775282+0.0382242im    -0.059783-0.0411899im     -0.186816+0.0568127im    0.0508217-0.108844im     0.0507337-0.0995428im    0.0689827+0.122175im\n    0.101345+0.0106717im     0.0239596+0.119297im      0.0335375-0.130772im       -0.124229-0.0732469im      0.187527+0.110555im      -0.145598+0.114347im     -0.102638-0.184253im      -0.188948-0.00789812im     0.011019-0.111861im     -0.0693904-0.0798149im   0.00918482+0.11059im      -0.0219282-0.0711132im    -0.205921-0.0225896im    -0.0720094+0.310249im     0.265577-0.106811im       0.126799-0.0280759im    -0.0438206-0.0276139im   -0.00122278-0.0834812im     0.0888703-0.0461144im     0.0455942-0.358053im     0.00512992+0.0473149im    -0.176183-0.0336776im    -0.0144518-0.00597236im   0.0362459-0.225017im       0.153441-0.0185286im    0.0253048-0.151394im     -0.0600542-0.139137im      0.018443+0.0478147im    -0.0434365-0.0136112im    -0.108591-0.102876im      0.212068-0.0163655im    -0.323987-0.0689817im\n     0.11129+0.242701im       0.183543-0.0377475im      0.147715-0.178776im        0.149859-0.196972im       0.042102-0.00208611im    -0.242374+0.0491314im    0.0390981+0.207125im     -0.0286954-0.0982356im    -0.0165439-0.135882im      -0.102023-0.0401504im     0.299242+0.144848im       -0.13842-0.0372599im    -0.122417-0.0276837im     0.0786906+0.0107658im   0.0613501-0.0198137im    -0.0799591+0.103339im       0.292605-0.0869439im     -0.140768+0.0480863im     -0.136175-0.015626im     -0.0474598+0.0936746im        0.2617+0.103116im     0.0993938+0.0970351im      0.100215+0.137033im      0.089292-0.014493im     -0.0507251+0.0792451im    0.0188311+0.260226im      0.0983884-0.134236im     0.0882473+0.0218735im    -0.0825864+0.0647182im   -0.0116241+0.192319im    -0.0517799-0.0798673im    0.0124284-0.069468im\n    -0.11863-0.0689958im    -0.0230572+0.177038im      -0.175349+0.10026im         0.159864-0.0636885im     0.0505658+0.09645im        0.197288-0.07127im      0.0907952+0.137158im      0.0120911+0.0230056im     -0.141417-0.118507im      0.0594349+0.0614369im  -0.00141946+0.161219im      0.0843841+0.130328im      -0.11792-0.0130848im     0.0771215-0.217045im     0.061386-0.0202377im    -0.0816361-0.125751im     -0.0614572-0.299469im      0.0249562-0.107465im      -0.036247-0.328083im      -0.122097+0.0366368im     0.0529004+0.0588188im      0.24647-0.145302im     -0.0838458-0.0925165im    0.0206403-0.191403im      0.0480121+0.241695im    -0.0306683-0.125339im       0.152021-0.202283im    -0.0598487-0.165847im      -0.167337-0.142043im    -0.0122282-0.0960786im    0.0216735-0.0267426im   -0.0848979-0.00304291im\n   -0.174962-0.0361753im    -0.0788187-0.142553im      -0.325305+0.0023514im     -0.0276401-0.0141911im      0.111777+0.166641im       0.102734+0.0826482im    -0.121045+0.0442351im      0.146652-0.169013im       0.152553+0.0311123im     -0.269728+0.0944675im     0.055041+0.0144983im       0.10303-0.00931615im   0.0189206+0.0286962im     -0.153844-0.177274im    0.0588795+0.0405048im     0.0709149-0.126963im      0.0562209+0.0650045im     -0.226188-0.0583222im     0.0206334+0.0469689im     0.0765435+0.129618im      -0.130432+0.00318806im  -0.0876781+0.0308552im    -0.0891398-0.101864im    -0.0595215-0.0833563im     0.0425751+0.0267401im    0.0197405+0.0530602im     0.0569684+0.0301342im   -0.0366628-0.00623339im    0.0389935+0.23221im     -0.0615792+0.420466im      0.164487-0.12821im      -0.174554-0.212268im\n  -0.0190725+0.201636im      -0.219656-0.274377im     -0.0686748+0.0460806im     -0.0840748+0.0318328im     -0.156124+0.198923im     -0.0371341-0.00816341im   -0.286037+0.0898195im     0.0821594+0.254879im      0.0723308-0.192436im      -0.078445+0.0167455im  -0.00583498+0.0196451im     0.0725827-0.0311009im      -0.1635-0.000435439im    -0.13431+0.104812im    -0.171165+0.134983im      -0.100522+0.0869301im     -0.073022-0.111192im       0.044447-0.0973771im     -0.175438+0.0392281im     -0.160118-0.127521im      -0.023508-0.0177174im    0.0481866+0.145541im      0.0843157-0.038183im    -0.0899738-0.0433463im      0.183983-0.0783289im    -0.184705+0.0880074im    -0.0867671-0.0599277im   -0.0329946-0.090975im     -0.0538794-0.0940374im     0.132614-0.0639713im     -0.26211+0.158921im    -0.0546957-0.195604im\n   -0.234786+0.0550182im     0.0911202+0.13781im        0.145756-0.144974im      -0.0327234+0.0874387im     -0.143682+0.0408489im     0.0696817+0.0312475im   -0.0571109-0.185134im     0.00497129+0.0337373im    -0.0156971-0.187116im      -0.105542+0.124096im      0.143397-0.0513925im    -0.0578621+0.0516339im     0.211734+0.156086im      -0.112812-0.127115im   -0.0466897+0.173578im     -0.0243938+0.0844143im      0.123751+0.0261934im      0.227909-0.00461577im    -0.217825-0.0826867im     0.0782535+0.202562im      0.0516519-0.105862im     0.0123784+0.0712203im    -0.0979563+0.119842im    -0.0446962-0.351966im     -0.0678044-0.183958im     0.0228193+0.0486186im     0.0448882+0.0640378im     0.123169+0.00866867im     0.162297-0.0992691im   -0.0135921-0.132819im      0.171306+0.0761259im    -0.258218+0.10366im\n   0.0707622+0.148084im       0.218479-0.191529im       0.066572+0.147083im       0.0258058+0.18442im        0.194135-0.154445im     0.00384857+0.118301im     0.0394679-0.137657im       0.133867-0.0425445im    -0.0406715-0.0415171im     -0.243278-0.0572917im    -0.104192+0.110039im      -0.290844-0.033689im      0.118789-0.0854317im     0.0270684+0.0217113im   0.0030836+0.203391im       0.104476-0.131898im      -0.197562-0.223279im     -0.0347493+0.173531im      0.0102872-0.0330867im     0.0590801+0.163593im      0.0554603+0.166025im     0.0740656-0.030084im       0.235798+0.0350603im   -0.0550333+0.0560103im     0.0389651-0.011518im     -0.254625-0.234428im    -0.00243852-0.00287609im  -0.0558304-0.129472im       0.110702-0.0301612im  -0.00906256-0.00846696im      0.1191+0.120453im    -0.0282327-0.0972086im\n   0.0152864-0.158845im       0.132788+0.00308211im    0.0166461+0.0192723im     -0.0966186+0.0970454im    -0.0762367+0.251568im      0.0644969-0.370406im     0.0679461+0.0711794im      0.165769-0.0273464im    -0.0722362-0.0513787im    -0.0835922-0.14001im      0.0345127+0.0135946im     -0.219652+0.240515im    -0.0569198-0.0885386im     -0.114686-0.0309687im   0.0613619-0.249548im    -0.00352526+0.0229752im    -0.0630639-0.105697im      0.0317087+0.044785im      -0.171616+0.142477im     -0.0943187-0.013369im     0.00943535+0.0405381im    -0.100909-0.0116154im    -0.0214686+0.0144522im     0.163132+0.297369im    -0.00767964-0.0511881im    0.0727434-0.0328222im    -0.0533354+0.153284im      0.251655-0.129963im      0.0986216-0.0701524im   -0.0293956-0.0323788im   -0.0520741-0.179049im     -0.276826-0.0843418im\n -0.00722615-0.0800897im   -0.00203126-0.0870282im     -0.052378+0.142117im        0.188327-0.0700303im     0.0352966-0.236861im      -0.146874-0.0225782im    0.0410207+0.201236im       -0.11453-0.0678211im     0.0671642+0.0359887im     0.0847268+0.102247im     -0.264909-0.0352926im     -0.255758+0.0465199im    0.0594728-0.0386847im    -0.0539062-0.0638208im  0.00371165-0.0525462im     -0.148102+0.101183im    -0.00284944-0.104167im      0.0861582-0.128814im      0.0523208+0.074978im     -0.0658246+0.0694982im    -0.0326755-0.166938im    0.00577601+0.176608im    -0.00817704+0.115622im    -0.0345123-0.112556im       0.311886-0.354845im      0.217331-0.0675923im     0.0573822-0.00902373im  -0.0219613+0.0544748im     -0.140515-0.162706im     -0.224483+0.0632843im    0.0783835-0.0627591im   -0.0335564-0.201072im\n    0.227424+0.130438im      -0.013883-0.0206532im      0.217362-0.0396711im      0.0572536+0.329246im     0.00101561+0.189158im      -0.057857+0.110247im     -0.127727+0.196081im     -0.0706014+0.090916im     -0.0276885+0.0670053im      0.170478+0.0696767im    0.0702534+0.110233im     -0.0505424+0.197615im     0.0217687-0.0670324im     -0.101023-0.132786im    -0.132874-0.144702im      0.0895278-0.0340957im      0.112986+0.142339im      -0.042213+0.0880181im      0.134649-0.185714im    -0.00212509+0.17805im       -0.220752-0.189035im     -0.118234-0.135462im       0.102527+0.0740411im   -0.0654061-0.0110624im      0.212916+0.0722459im    0.0279983-0.0644934im      0.129512-0.136443im    -0.0803581-0.0286502im      0.114762+0.241471im    -0.0388674-0.152098im    -0.0466109-0.0683857im   -0.0822528-0.0207477im\n   -0.120166-0.0153743im      0.152869-0.13462im       0.0533354-0.0124924im     -0.0248666-0.0938353im      0.180346-0.080207im       0.107965-0.0220382im     0.100233+0.045423im      0.0125456+0.239062im        -0.1971+0.0490536im     -0.210914-0.0987061im   -0.0700406+0.0580416im     0.0762224-0.0134031im    -0.359358+0.0345191im     -0.109318-0.0309248im    0.097931+0.273368im     -0.0815464-0.0128127im      0.228999+0.196301im      0.0841837+0.0530173im      0.119391+0.0170208im     0.0326653-0.0482391im    -0.0966158-0.17804im       0.233952-0.112517im      0.0875638+0.0382771im   -0.0658367+0.0941502im      0.196849+0.0013172im     0.042773-0.0111913im      0.116951+0.304008im     0.0444389+0.10234im      -0.0595132+0.0116184im      0.08703-0.0929663im   0.00158771-0.153072im    -0.0740641+0.0956003im\n   0.0415482-0.0890002im    -0.0322639-0.181072im      0.0534903+0.220796im       0.0761674+0.187456im      -0.163523-0.0554012im     0.0661175+0.101197im     0.0579276+0.133093im      -0.237003+0.041857im      -0.101495+0.126195im      -0.248792-0.137964im      0.170556+0.0302463im       0.32594-0.174628im     0.0975879+0.00573515im    -0.128748-0.0286409im   0.0715157-0.252742im      0.0392136+0.239658im      0.0259001+0.0686631im     0.0723129-0.0847719im    -0.0534342+0.0329049im    -0.0945883-0.0455032im    0.00792838+0.0835342im     0.160651+0.0628557im      0.035855+0.0984831im    0.0198474+0.136813im      0.0171303+0.0552018im    0.0389137-0.0594025im     0.0643591-0.126256im     0.0378639-0.0806488im      0.102822-0.133355im     0.0129939+0.0434764im     0.346916+0.156629im    -0.0192813+0.00411931im\n  -0.0192749+0.0217606im      0.138085-0.091174im    -0.00837168+0.251497im      -0.0111369+0.103948im      0.0655088-0.113246im      0.0392058+0.0378871im    0.0120696+0.066041im     -0.0470593+0.0276571im    -0.0708575-0.0604287im      0.143346+0.0504674im    -0.127847-0.142869im      0.0443287-0.0147301im    -0.133173-0.0795875im     0.0695549-0.0715737im   -0.156258-0.078893im       0.468591+0.106684im       0.122061-0.00260288im     0.135953+0.0128874im      -0.12132+0.0803814im      0.211505-0.0989044im      0.104577+0.179271im     0.0667993-0.0565883im     -0.198399-0.21745im     0.00595922-0.10376im       0.0223657-0.0843463im    -0.172031+0.207737im       0.146104-0.0123395im     0.228164+0.0303656im     -0.086444+0.189624im     -0.164144-0.0559202im   -0.0846762+0.00257328im  -0.0746062-0.0713403im\n   -0.298972-0.040745im      0.0646858+0.155412im       0.179102+0.0436628im      -0.209788-0.0350551im     0.0174464-0.104976im      -0.140268+0.166844im      -0.18199+0.271664im     -0.0292775-0.020775im     -0.0262273+0.0143585im     -0.177053-0.11936im      0.0460917-0.111781im      -0.058238-0.00488435im   -0.102823-0.202058im        0.21683-0.176612im    0.0514929-0.068168im      0.0177288-0.0840722im     0.0256606-0.157029im     -0.0222773-0.222614im     -0.0251871+0.0377598im      0.163037+0.0223168im     -0.230965-0.00323174im   -0.154121-0.216481im      0.0422961-0.0654757im    0.0599317+0.0645622im   -0.00783392-0.171809im     0.0151173+0.152904im      -0.063591-0.0699319im    -0.175509-0.0768382im     0.0956423-0.15998im       0.199334-0.020703im    -0.0167299+0.0661632im    0.0224665+0.0657488im\n -0.00610672-0.0370353im     0.0601569+0.136096im      -0.212725-0.123355im       -0.177246+0.109557im      -0.114163+0.0895227im   0.000767373+0.0240388im    0.0797335+0.0848504im    -0.0363603+0.249409im      -0.136708+0.201525im    -0.00875623-0.103469im   0.000945828+0.0783349im    -0.0395228+0.0405811im    0.0296514-0.0746043im     0.0507727+0.243773im   -0.0427503+0.143614im       -0.06969+0.0217604im     -0.194248-0.071205im       0.149941+0.197223im     0.00923312+0.156647im     0.00590687+0.0517044im     0.0283881+0.107973im     -0.013328+0.0285844im     -0.206342+0.115024im      0.076051-0.0702347im     0.0363927-0.14232im     -0.0623337+0.165714im       0.378638-0.188918im     -0.219843+0.05875im       0.0611923+0.057652im      0.102859+0.0714845im     0.119094-0.223945im     0.0878252-0.0901392im\n   0.0893765+0.0208632im      0.118252+0.0481187im     0.0205048+0.0131671im       -0.03098+0.0163333im      0.223999-0.0240377im     -0.037196-0.0114853im   -0.0316758-0.107651im      -0.059065+0.406674im       0.210245+0.0199581im     0.0262088+0.13038im      0.0375424+0.18396im       -0.174022+0.0646293im    0.0289528+0.180223im     -0.0694067-0.0568671im   0.0301589-0.096058im      0.0504204-0.0272021im    0.00911527-0.0432698im     0.0488013-0.0259115im   -0.00496551+0.117093im       0.161501+0.105026im      -0.200353-0.140293im       0.08157+0.122649im       -0.27673-0.0870154im     0.091979+0.232133im       -0.02665+0.217776im    -0.0409376+0.0986224im    -0.0286424-0.128165im    0.00883697+0.0969968im     -0.134979-0.247217im     0.0188134+0.206918im     0.0202319+0.228555im    -0.0534518+0.0691492im\n    0.121878-0.0967035im    -0.0593798-0.197183im     -0.0106232+0.0253971im      -0.245486-0.231588im       0.123387+0.0802134im      0.023577-0.112685im     0.0619926+0.115859im       0.160501+0.085302im      0.0913894-0.119997im     -0.0436034-0.064465im     -0.074158-0.0971174im      -0.18501+0.111377im     0.0130568+0.042231im     -0.0238247-0.0545783im  -0.0747487-0.189639im      -0.048439+0.0155893im      0.257308+0.330957im      0.0461994+0.0440139im    -0.0104019-0.0679856im      0.109898-0.0522808im      0.207307+0.136153im    -0.0438922-0.0854177im    -0.0866704+0.0629706im    -0.205388-0.0779856im     -0.157976-0.0614122im   -0.0196242-0.159662im       0.140747-0.100776im     -0.318061-0.157097im    -0.00524916-0.115451im     0.0102767-0.0551359im     0.111333+0.14044im      0.0668187-0.0132037im","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"and then generate the state ψ","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"psi = P[:, 3]","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"32-element Vector{ComplexF64}:\n  -0.017325481856264657 + 0.08168555241432594im\n   -0.23078032058455597 - 0.12474888334960958im\n    0.07151185441671679 - 0.127422476963497im\n   -0.22587291839648044 + 0.11473276547779737im\n   -0.06459242506975232 + 0.01897446319051947im\n   -0.20587863845159884 + 0.037630287053127195im\n   -0.07454568335277569 + 0.19006564592461372im\n    0.21629191825015984 - 0.05219432442290768im\n   0.020895294092724555 - 0.24235933722650943im\n    0.21406235495075232 + 0.12516093209793544im\n      0.181383574936397 - 0.14809164220516866im\n    0.07738394547445492 + 0.06050169576185876im\n    0.13756865982143937 - 0.06127776062090981im\n    0.12227909172123792 + 0.09403613205006835im\n -0.0013417520201980586 - 0.052450073855054485im\n    0.01839955043365913 - 0.03072853461437565im\n   0.020592882444413804 + 0.01521993003685129im\n    -0.1213963864333342 - 0.15363928240608068im\n   0.017574683523505406 - 0.07487254316995501im\n    -0.1766852120332357 - 0.02962274920017854im\n    0.34345974171122334 + 0.0im\n   -0.05312247091871818 - 0.030995290065180675im\n    0.06612613579650521 + 0.06635062467384292im\n     0.0869061507574627 - 0.19708007020745552im\n     0.0865550822577799 - 0.020610142761715907im\n  -0.054250852737877615 - 0.15130696316152778im\n   0.020708410455698767 + 0.020898111442440612im\n   -0.10286581753597028 - 0.10634408930218571im\n     0.3006483112166811 - 0.018892438194567828im\n  -0.020494349499672306 + 0.1099130062611588im\n    0.08664727272597382 - 0.038340705547129865im\n   -0.20185226822044433 - 0.009735291552007329im","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"In the phase estimation process, we will feed the state to circuit and measure the first n qubits processed by iQFT.","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"r = join(ArrayReg(psi), zero_state(N))\nr |> PE(N, M, U)","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"ArrayReg{1, ComplexF64, Array...}\n    active qubits: 8/8","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Since our phase can be represented by 3 qubits precisely, we only need to measure once","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"results = measure(r, 1:N; nshots=1)","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"1-element Vector{BitBasis.BitStr64{3}}:\n 011 ₍₂₎","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Recall that our QFT's bit numbering is reversed, let's reverse it back","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"using BitBasis\nestimated_phase = bfloat(results[]; nbits=N)","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"0.75","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"the phase is exactly 0.75!","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"","category":"page"},{"location":"generated/quick-start/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/quick-start/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"EditURL = \"https://github.com/QuantumBFS/Yao.jl/blob/master/docs/src/quick-start/4.shor-algorithm/main.jl\"","category":"page"},{"location":"generated/quick-start/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"generated/quick-start/4.shor-algorithm/index.html#Shor","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"","category":"section"},{"location":"generated/quick-start/4.shor-algorithm/index.html#References","page":"Shor's Algorithm","title":"References","text":"","category":"section"},{"location":"generated/quick-start/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"Neilsen\nAn Insightful Blog","category":"page"},{"location":"generated/quick-start/4.shor-algorithm/index.html#Main-Program","page":"Shor's Algorithm","title":"Main Program","text":"","category":"section"},{"location":"generated/quick-start/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"The main program of a Shor's algorithm can be summrized in several lines of code. For the theory part, please refer the reference materials above. It factorize an integer L, and returns one of the factors. Here, the input ver can be either Val(:quantum) or Val(:classical), where the classical version is for comparison.","category":"page"},{"location":"generated/quick-start/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"using Yao, BitBasis\nusing YaoExtensions: KMod, QFTCircuit\nusing QuAlgorithmZoo: NumberTheory\n\nfunction shor(L::Int, ver=Val(:quantum); maxtry=100)\n    L%2 == 0 && return 2\n\n    # find short cut solutions like `a^b`\n    res = NumberTheory.factor_a_power_b(L)\n    res !== nothing && return res[1]\n\n    for i in 1:maxtry\n        # step 1\n        x = NumberTheory.rand_primeto(L)\n\n        # step 2\n        r = get_order(ver, x, L; )\n        if r%2 == 0 && powermod(x, r÷2, L) != L-1\n            # step 3\n            f1, f2 = gcd(powermod(x, r÷2, L)-1, L), gcd(powermod(x, r÷2, L)+1, L)\n            if f1!=1\n                return f1\n            elseif f2!=1\n                return f2\n            else\n                error(\"Algorithm Fail!\")\n            end\n        end\n    end\nend","category":"page"},{"location":"generated/quick-start/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"shor (generic function with 2 methods)","category":"page"},{"location":"generated/quick-start/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"Except some shortcuts, in each try, the main program can be summarized in several steps","category":"page"},{"location":"generated/quick-start/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"randomly pick a number that prime to the input numebr L, i.e. gcd(x, L) = 1.","category":"page"},{"location":"generated/quick-start/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"The complexity of this algorithm is polynomial.","category":"page"},{"location":"generated/quick-start/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"get the order x, i.e. finding a number r that satisfies mod(x^r, L) = 1.","category":"page"},{"location":"generated/quick-start/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"If r is even and x^(r÷2) is non-trivial, go on, otherwise start another try. Here, trivial means equal to L-1 (mod L).","category":"page"},{"location":"generated/quick-start/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"According to Theorem 5.2 in Neilsen book,","category":"page"},{"location":"generated/quick-start/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"one of gcd(x^(r÷2)-1, L) and gcd(x^(r÷2)+1, L) must be a non-trivial (!=1) factor of L. Notice powermod(x, r÷2, L) must be -1 rather than 1, otherwise the order should be r/2 according to definition.","category":"page"},{"location":"generated/quick-start/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"The only difference between classical and quantum version is the order finding algorithm.","category":"page"},{"location":"generated/quick-start/4.shor-algorithm/index.html#Order-Finding","page":"Shor's Algorithm","title":"Order Finding","text":"","category":"section"},{"location":"generated/quick-start/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"We provided a classical order finding algorithm in NumberTheory, here we focus on the quantum version. The algorithm is consisted","category":"page"},{"location":"generated/quick-start/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"run the circuit to get a bitstring,\ninterpret this bitstring in output register as a rational number s/r.","category":"page"},{"location":"generated/quick-start/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"To achieve this, we first interpret it as a floating point number, then the continued fraction algorithm can find the best match for us.","category":"page"},{"location":"generated/quick-start/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"When using the quantum version, we have the flexibility to set key word arguments nshot, nbit (size of input data register) and ncbit (size of control register, or output register). nbit can be simply chosen as the minimum register size to store input, while ncbit can be estimated with the following function","category":"page"},{"location":"generated/quick-start/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"\"\"\"estimate the required size of the output register.\"\"\"\nestimate_ncbit(nbit::Int, ϵ::Real) = 2*nbit + 1 + ceil(Int,log2(2+1/2ϵ))\n\nget_order(::Val{:classical}, x::Int, L::Int; kwargs...) = NumberTheory.find_order(x, L)\nfunction get_order(::Val{:quantum}, x::Int, L::Int; nshots::Int=10,\n            nbit::Int=bit_length(L-1), ncbit::Int=estimate_ncbit(nbit, 0.25))\n    c = order_finding_circuit(x, L; nbit=nbit, ncbit=ncbit)\n    reg = join(product_state(nbit, 1), zero_state(ncbit))\n\n    res = measure(copy(reg) |> c; nshots=nshots)\n    for r in res\n        # split bit string b into lower bits `k` and higher bits `r`.\n        mask = bmask(1:ncbit)\n        k,i = r&mask, r>>ncbit\n        # get s/r\n        ϕ = bfloat(k)  #\n        ϕ == 0 && continue\n\n        # order_from_float: given a floating point number,\n        # return the closest rational number with bounded number of continued fraction steps.\n        order = NumberTheory.order_from_float(ϕ, x, L)\n        if order === nothing\n            continue\n        else\n            return order\n        end\n    end\n    return nothing\nend","category":"page"},{"location":"generated/quick-start/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"get_order (generic function with 2 methods)","category":"page"},{"location":"generated/quick-start/4.shor-algorithm/index.html#The-circuit-used-for-finding-order","page":"Shor's Algorithm","title":"The circuit used for finding order","text":"","category":"section"},{"location":"generated/quick-start/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"\"\"\"\n    order_finding_circuit(x::Int, L::Int; nbit::Int=bit_length(L-1), ncbit::Int=estimate_ncbit(nbit, 0.25)) -> AbstractBlock\n\nReturns the circuit for finding the order of `x` to `L`,\nfeeding input `|1>⊗|0>` will get the resulting quantum register with the desired \"phase\" information.\n\"\"\"\nfunction order_finding_circuit(x::Int, L::Int; nbit::Int, ncbit::Int)\n    N = nbit+ncbit\n    chain(N, repeat(N, H, 1:ncbit), KMod{N, ncbit}(x, L),\n        subroutine(N, QFTCircuit(ncbit)', 1:ncbit))\nend","category":"page"},{"location":"generated/quick-start/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"Main.##278.order_finding_circuit","category":"page"},{"location":"generated/quick-start/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"The circuit for order finding is consisted of three parts","category":"page"},{"location":"generated/quick-start/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"Hadamard gates,\nKMod that computes a classical function mod(a^k*x, L).","category":"page"},{"location":"generated/quick-start/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"k is the integer stored in first K (or ncbit) qubits and the rest N-K qubits stores a. Notice it is not a basic gate, it should have been compiled to multiple gates, which is not implemented in Yao for the moment. To learn more about implementing arithmatics on a quantum circuit, please read this paper.","category":"page"},{"location":"generated/quick-start/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"Inverse quantum fourier transformation.","category":"page"},{"location":"generated/quick-start/4.shor-algorithm/index.html#Run","page":"Shor's Algorithm","title":"Run","text":"","category":"section"},{"location":"generated/quick-start/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"Factorizing 15, you should see 3 or 5, please report a bug if it is not...","category":"page"},{"location":"generated/quick-start/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"shor(15, Val(:quantum))","category":"page"},{"location":"generated/quick-start/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"3","category":"page"},{"location":"generated/quick-start/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"","category":"page"},{"location":"generated/quick-start/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"This page was generated using Literate.jl.","category":"page"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"DocTestSetup = quote\n    using Yao\n    using Yao: YaoBase, YaoBlocks, YaoArrayRegister\n    using YaoBase\n    using YaoBlocks\n    using YaoArrayRegister\nend","category":"page"},{"location":"man/registers.html#abstract_registers","page":"Abstract Registers","title":"Abstract Registers","text":"","category":"section"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"Quantum circuits process quantum states. A quantum state being processing by a quantum circuit will be stored on a quantum register. In Yao we provide several types for registers. The default type for registers is the ArrayReg which is defined in YaoArrayRegister.jl.","category":"page"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"The registers can be extended by subtyping AbstractRegister and define correspinding register interfaces defined in YaoBase.jl, which includes:","category":"page"},{"location":"man/registers.html#Minimal-Required-Interfaces","page":"Abstract Registers","title":"Minimal Required Interfaces","text":"","category":"section"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"The following interfaces are the minial required interfaces to make a register's printing work and be able to accept certain gates/blocks.","category":"page"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"But if you don't want to work with our default printing, you could define your custom printing with Base.show.","category":"page"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"YaoBase.nqubits\nYaoBase.nactive","category":"page"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"you can define instruct!, to provide specialized instructions for the registers from plain storage types.","category":"page"},{"location":"man/registers.html#Qubit-Management-Interfaces","page":"Abstract Registers","title":"Qubit Management Interfaces","text":"","category":"section"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"YaoBase.addbits!\nYaoBase.reorder!","category":"page"},{"location":"man/registers.html#Qubit-Scope-Management-Interfaces","page":"Abstract Registers","title":"Qubit Scope Management Interfaces","text":"","category":"section"},{"location":"man/registers.html#LDT-format","page":"Abstract Registers","title":"LDT format","text":"","category":"section"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"Concepturely, a wave function psirangle can be represented in a low dimentional tensor (LDT) format of order-3, L(f, r, b).","category":"page"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"f: focused (i.e. operational) dimensions\nr: remaining dimensions\nb: batch dimension.","category":"page"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"For simplicity, let's ignore batch dimension for the now, we have","category":"page"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"psirangle = sumlimits_xy L(x y ) jrangleirangle","category":"page"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"Given a configuration x (in operational space), we want get the i-th bit using (x<<i) & 0x1, which means putting the small end the qubit with smaller index. In this representation L(x) will get return langle xpsirangle.","category":"page"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"note: Note\nWhy not the other convension: Using the convention of putting 1st bit on the big end will need to know the total number of qubits n in order to know such positional information.","category":"page"},{"location":"man/registers.html#HDT-format","page":"Abstract Registers","title":"HDT format","text":"","category":"section"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"Julia storage is column major, if we reshape the wave function to a shape of 2times2times  times2 and get the HDT (high dimensional tensor) format representation H, we can use H(x_1 x_2  x_3) to get langle xpsirangle.","category":"page"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"YaoBase.focus!\nYaoBase.relax!","category":"page"},{"location":"man/registers.html#YaoAPI.focus!","page":"Abstract Registers","title":"YaoAPI.focus!","text":"focus(f, register, locs...)\n\nCall a callable f under the context of focus. See also focus!.\n\nExample\n\nprint the focused register\n\njulia> r = ArrayReg(bit\"101100\")\nArrayReg{1,Complex{Float64},Array...}\n    active qubits: 6/6\n\njulia> focus(x->(println(x);x), r, 1, 2);\nArrayReg{1,Complex{Float64},Array...}\n    active qubits: 2/6\n\n\n\n\n\nfocus!(locs...) -> f(register) -> register\n\nLazy version of focus!, this returns a lambda which requires a register.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.relax!","page":"Abstract Registers","title":"YaoAPI.relax!","text":"relax!(locs::Int...; to_nactive=nqubits(register)) -> f(register) -> register\n\nLazy version of relax!, it will be evaluated once you feed a register to its output lambda.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#Measurement-Interfaces","page":"Abstract Registers","title":"Measurement Interfaces","text":"","category":"section"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"YaoBase.measure\nYaoBase.measure!\nYaoBase.measure_remove!\nYaoBase.measure_collapseto!\nYaoBase.select!","category":"page"},{"location":"man/registers.html#YaoAPI.select!","page":"Abstract Registers","title":"YaoAPI.select!","text":"select!(b::Integer) -> f(register)\n\nLazy version of select!. See also select.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#Others","page":"Abstract Registers","title":"Others","text":"","category":"section"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"YaoBase.fidelity\nYaoBase.tracedist\nYaoBase.density_matrix\nYaoBase.viewbatch","category":"page"},{"location":"man/registers.html#YaoAPI.fidelity","page":"Abstract Registers","title":"YaoAPI.fidelity","text":"fidelity(r1::ArrayReg, r2::ArrayReg)\n\nCalcuate the fidelity between r1 and r2, if r1 or r2 is not pure state (nactive(r) != nqubits(r)), the fidelity is calcuated by purification. See also pure_state_fidelity, purification_fidelity.\n\nfidelity'(pair_or_reg1, pair_or_reg2) -> (g1, g2)\n\nObtain the gradient with respect to registers and circuit parameters. For pair input ψ=>circuit, the returned gradient is a pair of gψ=>gparams, with gψ the gradient of input state and gparams the gradients of circuit parameters. For register input, the return value is a register.\n\n\n\n\n\n","category":"function"},{"location":"man/base.html","page":"Base","title":"Base","text":"DocTestSetup = quote\n    using Yao\n    using Yao: YaoBase, YaoBlocks, YaoArrayRegister\n    using YaoBase\n    using YaoBlocks\n    using YaoArrayRegister\nend","category":"page"},{"location":"man/base.html#Base","page":"Base","title":"Base","text":"","category":"section"},{"location":"man/base.html","page":"Base","title":"Base","text":"The Base module of Yao is defined in YaoBase.jl, it provides:","category":"page"},{"location":"man/base.html","page":"Base","title":"Base","text":"the basic abstract register and its interface\nquantum information related math functions\n@interface macro for drier interface definition in Yao ecosystem\ncustom errors and assertion handling\ngeneral properties, e.g ishermitian, isunitary, etc.\ncommon constants in quantum information","category":"page"},{"location":"man/base.html#Math-Functions","page":"Base","title":"Math Functions","text":"","category":"section"},{"location":"man/base.html","page":"Base","title":"Base","text":"Modules = [YaoBase]\nPages = [\"utils/math.jl\"]","category":"page"},{"location":"man/base.html#YaoBase.autostatic-Tuple{AbstractVecOrMat}","page":"Base","title":"YaoBase.autostatic","text":"autostatic(A[; threshold=8])\n\nStaticize dynamic array A by a threshold.\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#YaoBase.batch_normalize","page":"Base","title":"YaoBase.batch_normalize","text":"batch_normalize\n\nnormalize a batch of vector.\n\n\n\n\n\n","category":"function"},{"location":"man/base.html#YaoBase.batch_normalize!","page":"Base","title":"YaoBase.batch_normalize!","text":"batch_normalize!(matrix)\n\nnormalize a batch of vector.\n\n\n\n\n\n","category":"function"},{"location":"man/base.html#YaoBase.density_fidelity-Tuple{AbstractMatrix, AbstractMatrix}","page":"Base","title":"YaoBase.density_fidelity","text":"density_fidelity(ρ1, ρ2)\n\nGeneral fidelity (including mixed states) between two density matrix for qubits.\n\nDefinition\n\nF(ρ σ)^2 = tr(ρσ) + 2 sqrtdet(ρ)det(σ)\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#YaoBase.general_c1_gates-Union{Tuple{Tp}, Tuple{Tg}, Tuple{Int64, Tp, Int64, Vector{Tg}, Vector{Int64}}} where {Tg<:(AbstractMatrix), Tp<:(AbstractMatrix)}","page":"Base","title":"YaoBase.general_c1_gates","text":"general_c1_gates(num_bit::Int, projector::AbstractMatrix, cbit::Int, gates::Vector{AbstractMatrix}, locs::Vector{Int}) -> AbstractMatrix\n\ngeneral (low performance) construction method for control gate on different lines.\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#YaoBase.general_controlled_gates-Tuple{Int64, Vector{<:AbstractMatrix}, Vector{Int64}, Vector{<:AbstractMatrix}, Vector{Int64}}","page":"Base","title":"YaoBase.general_controlled_gates","text":"general_controlled_gates(num_bit::Int, projectors::Vector{Tp}, cbits::Vector{Int}, gates::Vector{AbstractMatrix}, locs::Vector{Int}) -> AbstractMatrix\n\nReturn general multi-controlled gates in hilbert space of num_bit qubits,\n\nprojectors are often chosen as P0 and P1 for inverse-Control and Control at specific position.\ncbits should have the same length as projectors, specifing the controling positions.\ngates are a list of controlled single qubit gates.\nlocs should have the same length as gates, specifing the gates positions.\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#YaoBase.hilbertkron-Tuple{Int64, Vector{<:AbstractMatrix}, Vector{Int64}}","page":"Base","title":"YaoBase.hilbertkron","text":"hilbertkron(num_bit::Int, gates::Vector{AbstractMatrix}, locs::Vector{Int}) -> AbstractMatrix\n\nReturn general kronecher product form of gates in Hilbert space of num_bit qubits.\n\ngates are a list of matrices.\nstart_locs should have the same length as gates, specifing the gates starting positions.\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#YaoBase.linop2dense-Tuple{Function, Int64}","page":"Base","title":"YaoBase.linop2dense","text":"linop2dense([T=ComplexF64], linear_map!::Function, n::Int) -> Matrix\n\nReturns the dense matrix representation given linear map function.\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#YaoBase.nucnorm-Tuple{AbstractMatrix}","page":"Base","title":"YaoBase.nucnorm","text":"nucnorm(m)\n\nComputes the nuclear norm of a matrix m.\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#YaoBase.pure_state_fidelity-Tuple{Vector, Vector}","page":"Base","title":"YaoBase.pure_state_fidelity","text":"pure_state_fidelity(v1::Vector, v2::Vector)\n\nfidelity for pure states.\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#YaoBase.purification_fidelity-Tuple{Matrix, Matrix}","page":"Base","title":"YaoBase.purification_fidelity","text":"purification_fidelity(m1::Matrix, m2::Matrix)\n\nFidelity for mixed states via purification.\n\nReference:     http://iopscience.iop.org/article/10.1088/1367-2630/aa6a4b/meta\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#YaoBase.rand_hermitian-Tuple{Int64}","page":"Base","title":"YaoBase.rand_hermitian","text":"rand_hermitian([T=ComplexF64], N::Int) -> Matrix\n\nCreate a random hermitian matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#YaoBase.rand_unitary-Tuple{Int64}","page":"Base","title":"YaoBase.rand_unitary","text":"rand_unitary([T=ComplexF64], N::Int) -> Matrix\n\nCreate a random unitary matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#YaoBase.rotmat-Tuple{AbstractMatrix, Real}","page":"Base","title":"YaoBase.rotmat","text":"rotmat(M::AbstractMatrix, θ::Real)\n\nReturns rotated M: exp(-fracimθ2 M).\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#YaoBase.sprand_hermitian-Tuple{Int64, Any}","page":"Base","title":"YaoBase.sprand_hermitian","text":"sprand_hermitian([T=ComplexF64], N, density)\n\nCreate a sparse random hermitian matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#YaoBase.sprand_unitary-Tuple{Int64, Real}","page":"Base","title":"YaoBase.sprand_unitary","text":"sprand_unitary([T=ComplexF64], N::Int, density) -> SparseMatrixCSC\n\nCreate a random sparse unitary matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#YaoBase.trnorm-Tuple{AbstractMatrix}","page":"Base","title":"YaoBase.trnorm","text":"trnorm(m)\n\nComputes the trace norm of a matrix m.\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#General-Properties","page":"Base","title":"General Properties","text":"","category":"section"},{"location":"man/base.html","page":"Base","title":"Base","text":"Modules = [YaoBase]\nPages = [\"inspect.jl\"]","category":"page"},{"location":"man/base.html#LinearAlgebra.ishermitian-Tuple{Any}","page":"Base","title":"LinearAlgebra.ishermitian","text":"ishermitian(op) -> Bool\n\ncheck if this operator is hermitian.\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#Error-and-Exceptions","page":"Base","title":"Error and Exceptions","text":"","category":"section"},{"location":"man/base.html","page":"Base","title":"Base","text":"Modules = [YaoBase]\nPages = [\"error.jl\"]","category":"page"},{"location":"man/base.html#YaoBase.islocs_conflict-Tuple{Union{Vector{T}, Tuple{Vararg{T, N}} where N} where T}","page":"Base","title":"YaoBase.islocs_conflict","text":"islocs_conflict(locs) -> Bool\n\nCheck if the input locations has conflicts.\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#YaoBase.islocs_inbounds-Tuple{Int64, Union{Vector{T}, Tuple{Vararg{T, N}} where N} where T}","page":"Base","title":"YaoBase.islocs_inbounds","text":"islocs_inbounds(n, locs) -> Bool\n\nCheck if the input locations are inside given bounds n.\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#YaoBase.@assert_locs_inbounds-Tuple{Any, Any, Vararg{Any}}","page":"Base","title":"YaoBase.@assert_locs_inbounds","text":"@assert_locs_inbounds <number of total qubits> <locations list> [<msg>]\n\nAssert if all the locations are inbounds.\n\n\n\n\n\n","category":"macro"},{"location":"man/base.html#YaoBase.@assert_locs_safe-Tuple{Any, Any, Vararg{Any}}","page":"Base","title":"YaoBase.@assert_locs_safe","text":"@assert_locs_safe <number of total qubits> <locations list> [<msg>]\n\nAssert if all the locations are:     - inbounds.     - do not have any conflict.\n\n\n\n\n\n","category":"macro"},{"location":"man/base.html#Constants","page":"Base","title":"Constants","text":"","category":"section"},{"location":"man/base.html","page":"Base","title":"Base","text":"using Latexify, YaoBase\nconst_list = filter(x->x!==:Const, names(Const))\nname_list = map(string, const_list)\nmdtable(name_list; head=[\"defined constants\"])","category":"page"},{"location":"man/bitbasis.html","page":"BitBasis","title":"BitBasis","text":"DocTestSetup = quote\n    using Yao\n    using Yao: YaoBase, YaoBlocks, YaoArrayRegister\n    using YaoBase\n    using YaoBlocks\n    using YaoArrayRegister\nend","category":"page"},{"location":"man/bitbasis.html#BitBasis","page":"BitBasis","title":"BitBasis","text":"","category":"section"},{"location":"man/bitbasis.html","page":"BitBasis","title":"BitBasis","text":"Types and operations for basis represented by bits in linear algebra.","category":"page"},{"location":"man/bitbasis.html","page":"BitBasis","title":"BitBasis","text":"For more details please ref to BitBasis.jl.","category":"page"},{"location":"man/bitbasis.html","page":"BitBasis","title":"BitBasis","text":"Modules = [BitBasis]\nOrder = [:macro, :function, :type, :module]","category":"page"},{"location":"man/bitbasis.html#BitBasis.@bit_str-Tuple{Any}","page":"BitBasis","title":"BitBasis.@bit_str","text":"@bit_str -> BitStr64\n\nConstruct a bit string. such as bit\"0000\". The bit strings also supports string bcat. Just use it like normal strings.\n\nExample\n\njulia> bit\"10001\"\n10001 ₍₂₎\n\njulia> bit\"100_111_101\"\n100111101 ₍₂₎\n\njulia> bcat(bit\"1001\", bit\"11\", bit\"1110\")\n1001111110 ₍₂₎\n\njulia> onehot(bit\"1001\")\n16-element Array{Float64,1}:\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 1.0\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n\n\n\n\n\n\n","category":"macro"},{"location":"man/bitbasis.html#BitBasis.@lbit_str-Tuple{Any}","page":"BitBasis","title":"BitBasis.@lbit_str","text":"@bit_str -> LongBitStr\n\nLong bit string version of @bit_str macro.\n\n\n\n\n\n","category":"macro"},{"location":"man/bitbasis.html#BitBasis.allone-Union{Tuple{T}, Tuple{T, T}} where T<:Integer","page":"BitBasis","title":"BitBasis.allone","text":"allone(index::Integer, mask::Integer) -> Bool\n\nReturn true if all masked position of index is 1.\n\nExample\n\ntrue if all masked positions are 1.\n\njulia> allone(0b1011, 0b1011)\ntrue\n\njulia> allone(0b1011, 0b1001)\ntrue\n\njulia> allone(0b1011, 0b0100)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.anyone-Union{Tuple{T}, Tuple{T, T}} where T<:Integer","page":"BitBasis","title":"BitBasis.anyone","text":"anyone(index::Integer, mask::Integer) -> Bool\n\nReturn true if any masked position of index is 1.\n\nExample\n\ntrue if any masked positions is 1.\n\njulia> anyone(0b1011, 0b1001)\ntrue\n\njulia> anyone(0b1011, 0b1100)\ntrue\n\njulia> anyone(0b1011, 0b0100)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.baddrs-Tuple{Integer}","page":"BitBasis","title":"BitBasis.baddrs","text":"baddrs(b::Integer) -> Vector\n\nget the locations of nonzeros bits, i.e. the inverse operation of bmask.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.basis-Tuple{Union{Int64, AbstractArray}}","page":"BitBasis","title":"BitBasis.basis","text":"basis([IntType], nbits::Int) -> UnitRange{IntType}\nbasis([IntType], state::AbstractArray) -> UnitRange{IntType}\n\nReturns the UnitRange for basis in Hilbert Space of nbits qubits. If an array is supplied, it will return a basis having the same size with the first diemension of array.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bdistance-Union{Tuple{Ti}, Tuple{Ti, Ti}} where Ti<:Integer","page":"BitBasis","title":"BitBasis.bdistance","text":"bdistance(i::Integer, j::Integer) -> Int\n\nReturn number of different bits.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bfloat-Tuple{Integer}","page":"BitBasis","title":"BitBasis.bfloat","text":"bfloat(b::Integer; nbits::Int=bit_length(b)) -> Float64\n\nfloat view, with current bit numbering. See also bfloat_r.\n\nRef: wiki: bit numbering\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bfloat-Union{Tuple{BitBasis.BitStr{N}}, Tuple{N}} where N","page":"BitBasis","title":"BitBasis.bfloat","text":"bfloat(b::BitStr) -> Float64\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bfloat_r-Tuple{Integer}","page":"BitBasis","title":"BitBasis.bfloat_r","text":"bfloat_r(b::Integer; nbits::Int=bit_length(b)) -> Float64\n\nfloat view, with reversed bit numbering. See also bfloat.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bfloat_r-Union{Tuple{BitBasis.BitStr{N}}, Tuple{N}} where N","page":"BitBasis","title":"BitBasis.bfloat_r","text":"bfloat_r(b::BitStr) -> Float64\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bint-Tuple{BitBasis.BitStr}","page":"BitBasis","title":"BitBasis.bint","text":"bint(b::BitStr) -> Integer\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bint-Tuple{Integer}","page":"BitBasis","title":"BitBasis.bint","text":"bint(b; nbits=nothing) -> Int\n\ninteger view, with LSB 0 bit numbering. See also wiki: bit numbering\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bint_r-Tuple{Integer}","page":"BitBasis","title":"BitBasis.bint_r","text":"bint_r(b; nbits::Int) -> Integer\n\ninteger read in inverse order.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bint_r-Union{Tuple{BitBasis.BitStr{N}}, Tuple{N}} where N","page":"BitBasis","title":"BitBasis.bint_r","text":"bint_r(b::BitStr) -> Integer\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bit_length-Tuple{Integer}","page":"BitBasis","title":"BitBasis.bit_length","text":"bit_length(x::Integer) -> Int\n\nReturn the number of bits required to represent input integer x.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bit_literal-Tuple{Int64, Vararg{Int64}}","page":"BitBasis","title":"BitBasis.bit_literal","text":"bit_literal(xs...)\n\nCreate a BitStr by input bits xs.\n\nExample\n\njulia> bit_literal(1, 0, 1, 0, 1, 1)\n110101 ₍₂₎\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bitarray-Union{Tuple{T}, Tuple{Vector{T}, Int64}} where T<:Number","page":"BitBasis","title":"BitBasis.bitarray","text":"bitarray(v::Vector, [nbits::Int]) -> BitArray\nbitarray(v::Int, nbits::Int) -> BitArray\nbitarray(nbits::Int) -> Function\n\nConstruct BitArray from an integer vector, if nbits not supplied, it is 64. If an integer is supplied, it returns a function mapping a Vector/Int to bitarray.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bmask","page":"BitBasis","title":"BitBasis.bmask","text":"bmask(::Type{T}) where T <: Integer -> zero(T)\nbmask([T::Type], positions::Int...) -> T\nbmask([T::Type], range::UnitRange{Int}) -> T\n\nReturn an integer mask of type T where 1 is the position masked according to positions or range. Directly use T will return an empty mask 0.\n\n\n\n\n\n","category":"function"},{"location":"man/bitbasis.html#BitBasis.breflect","page":"BitBasis","title":"BitBasis.breflect","text":"breflect(b::Integer[, masks::Vector{Integer}]; nbits) -> Integer\n\nReturn left-right reflected integer.\n\nExample\n\nReflect the order of bits.\n\njulia> breflect(0b1011; nbits=4) == 0b1101\ntrue\n\n\n\n\n\n","category":"function"},{"location":"man/bitbasis.html#BitBasis.breflect-Union{Tuple{BitBasis.BitStr{N}}, Tuple{N}} where N","page":"BitBasis","title":"BitBasis.breflect","text":"breflect(bit_str[, masks])\n\nReturn left-right reflected bit string.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bsizeof-Union{Tuple{Type{T}}, Tuple{T}} where T","page":"BitBasis","title":"BitBasis.bsizeof","text":"bsizeof(::Type)\n\nReturns the size of given type in number of binary digits.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.btruncate-Tuple{Integer, Any}","page":"BitBasis","title":"BitBasis.btruncate","text":"btruncate(b, n)\n\nTruncate bits b to given length n.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.controldo-Union{Tuple{S}, Tuple{Union{Function, Type}, BitBasis.IterControl{S}}} where S","page":"BitBasis","title":"BitBasis.controldo","text":"controldo(f, itr::IterControl)\n\nExecute f while iterating itr.\n\nnote: Note\nthis is faster but equivalent than using itr as an iterator. See also itercontrol.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.controller-Tuple{Union{UnitRange{Int64}, Int64, Tuple{Vararg{Int64, var\"#s3\"}} where var\"#s3\", Vector{Int64}}, Union{UnitRange{Int64}, Int64, Tuple{Vararg{Int64, var\"#s3\"}} where var\"#s3\", Vector{Int64}}}","page":"BitBasis","title":"BitBasis.controller","text":"controller(cbits, cvals) -> Function\n\nReturn a function that checks whether a basis at cbits takes specific value cvals.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.flip-Union{Tuple{T}, Tuple{T, T}} where T<:Integer","page":"BitBasis","title":"BitBasis.flip","text":"flip(index::Integer, mask::Integer) -> Integer\n\nReturn an Integer with bits at masked position flipped.\n\nExample\n\njulia> flip(0b1011, 0b1011) |> bit(len=4)\n0000 (0)\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.group_shift!-Tuple{Int64, AbstractVector{Int64}}","page":"BitBasis","title":"BitBasis.group_shift!","text":"group_shift!(nbits, positions)\n\nShift bits on positions together.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.hypercubic-Tuple{Array}","page":"BitBasis","title":"BitBasis.hypercubic","text":"hypercubic(A::Array) -> Array\n\nget the hypercubic representation for an array.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.indices_with-Tuple{Int64, Vector{Int64}, Vector{Int64}}","page":"BitBasis","title":"BitBasis.indices_with","text":"indices_with(n::Int, locs::Vector{Int}, vals::Vector{Int}) -> Vector{Int}\n\nReturn indices with specific positions locs with value vals in a hilbert space of n qubits.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.invorder-Tuple{AbstractVecOrMat}","page":"BitBasis","title":"BitBasis.invorder","text":"invorder(X::AbstractVecOrMat)\n\nInverse the order of given vector/matrix X.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.ismatch-Union{Tuple{T}, Tuple{T, T, T}} where T<:Integer","page":"BitBasis","title":"BitBasis.ismatch","text":"ismatch(index::Integer, mask::Integer, target::Integer) -> Bool\n\nReturn true if bits at positions masked by mask equal to 1 are equal to target.\n\nExample\n\njulia> n = 0b11001; mask = 0b10100; target = 0b10000;\n\njulia> ismatch(n, mask, target)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.log2dim1-Tuple{Any}","page":"BitBasis","title":"BitBasis.log2dim1","text":"log2dim1(X)\n\nReturns the log2 of the first dimension's size.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.log2i","page":"BitBasis","title":"BitBasis.log2i","text":"log2i(x::Integer) -> Integer\n\nReturn log2(x), this integer version of log2 is fast but only valid for number equal to 2^n.\n\n\n\n\n\n","category":"function"},{"location":"man/bitbasis.html#BitBasis.neg-Union{Tuple{BitBasis.BitStr{N}}, Tuple{N}} where N","page":"BitBasis","title":"BitBasis.neg","text":"neg(b::BitStr) -> BitStr\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.neg-Union{Tuple{T}, Tuple{T, Int64}} where T<:Integer","page":"BitBasis","title":"BitBasis.neg","text":"neg(index::Integer, nbits::Int) -> Integer\n\nReturn an integer with all bits flipped (with total number of bit nbits).\n\nExample\n\njulia> neg(0b1111, 4) |> bit(len=4)\n0000 (0)\n\njulia> neg(0b0111, 4) |> bit(len=4)\n1000 (8)\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.next_reordered_basis-Union{Tuple{T}, Tuple{N}, Tuple{T, Tuple{Vararg{T, N}}, Tuple{Vararg{T, N}}}} where {N, T}","page":"BitBasis","title":"BitBasis.next_reordered_basis","text":"next_reordered_basis(basis, takers, differ)\n\nReturns the next reordered basis accroding to current basis.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.onehot-Union{Tuple{N}, Tuple{T}, Tuple{Type{T}, BitBasis.BitStr{N}}} where {T, N}","page":"BitBasis","title":"BitBasis.onehot","text":"onehot([T=Float64], bit_str[, nbatch])\n\nReturns an onehot vector in type Vector{T}, or a batch of onehot vector in type Matrix{T}, where the bit_str-th element is one.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.onehot-Union{Tuple{T}, Tuple{Type{T}, Int64, Integer}} where T","page":"BitBasis","title":"BitBasis.onehot","text":"onehot([T=Float64], nbits, x::Integer; nbatch::Int])\n\nCreate an onehot vector in type Vector{T} or a batch of onehot vector in type Matrix{T}, where index x + 1 is one.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.packbits-Tuple{AbstractVector}","page":"BitBasis","title":"BitBasis.packbits","text":"packbits(arr::AbstractArray) -> AbstractArray\n\npack bits to integers, usually take a BitArray as input.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.readbit-Union{Tuple{T}, Tuple{T, Int64}} where T<:Integer","page":"BitBasis","title":"BitBasis.readbit","text":"readbit(x, loc...)\n\nRead the bit config at given location.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.reorder","page":"BitBasis","title":"BitBasis.reorder","text":"reorder(X::AbstractArray, orders)\n\nReorder X according to orders.\n\ntip: Tip\nAlthough orders can be any iterable, Tuple is preferred inorder to gain as much performance as possible. But the conversion won't take much anyway.\n\n\n\n\n\n","category":"function"},{"location":"man/bitbasis.html#BitBasis.setbit-Union{Tuple{T}, Tuple{T, T}} where T<:Integer","page":"BitBasis","title":"BitBasis.setbit","text":"setbit(index::Integer, mask::Integer) -> Integer\n\nset the bit at masked position to 1.\n\nExample\n\njulia> setbit(0b1011, 0b1100) |> bit(len=4)\n1111 (15)\n\njulia> setbit(0b1011, 0b0100) |> bit(len=4)\n1111 (15)\n\njulia> setbit(0b1011, 0b0000) |> bit(len=4)\n1011 (11)\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.swapbits-Union{Tuple{T}, Tuple{T, Int64, Int64}} where T<:Integer","page":"BitBasis","title":"BitBasis.swapbits","text":"swapbits(n::Integer, mask_ij::Integer) -> Integer\nswapbits(n::Integer, i::Int, j::Int) -> Integer\n\nReturn an integer with bits at i and j flipped.\n\nExample\n\njulia> swapbits(0b1011, 0b1100) == 0b0111\ntrue\n\ntip: Tip\nlocations i and j specified by mask could be faster when bmask is not straight forward but known by constant.\n\nwarning: Warning\nmask_ij should only contain two 1, swapbits will not check it, use at your own risk.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.unsafe_reorder","page":"BitBasis","title":"BitBasis.unsafe_reorder","text":"unsafe_reorder(X::AbstractArray, orders)\n\nReorder X according to orders.\n\nwarning: Warning\nunsafe_reorder won't check whether the length of orders and the size of first dimension of X match, use at your own risk.\n\n\n\n\n\n","category":"function"},{"location":"man/bitbasis.html#BitBasis.unsafe_sub-Union{Tuple{T}, Tuple{N}, Tuple{UnitRange{T}, Tuple{Vararg{T, N}}}} where {N, T}","page":"BitBasis","title":"BitBasis.unsafe_sub","text":"unsafe_sub(a::UnitRange, b::NTuple{N}) -> NTuple{N}\n\nReturns result in type Tuple of a .- b. This will not check the length of a and b, use at your own risk.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.unsafe_sub-Union{Tuple{T}, Tuple{UnitRange{T}, Vector{T}}} where T","page":"BitBasis","title":"BitBasis.unsafe_sub","text":"unsafe_sub(a::UnitRange{T}, b::Vector{T}) where T\n\nReturns a .- b, fallback version when b is a Vector.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.BitStr","page":"BitBasis","title":"BitBasis.BitStr","text":"BitStr{N,T} <: Integer\n\nstruct for bit string with fixed length N, the storage type is T.\n\nBitStr{N,T}(value)\nBitStr64{N}(value)\nLongBitStr{N}(value)\n\nReturns a BitStr.\n\nExample\n\nBitStr supports some basic arithmetic operations. It acts like an integer, but supports some frequently used methods for binary basis.\n\njulia> bit\"0101\" * 2\n1010 ₍₂₎\n\njulia> bcat(bit\"101\" for i in 1:10)\n101101101101101101101101101101 (766958445)\n\njulia> repeat(bit\"101\", 2)\n101101 ₍₂₎\n\njulia> bit\"1101\"[2]\n0\n\n\n\n\n\n","category":"type"},{"location":"man/bitbasis.html#BitBasis.IterControl","page":"BitBasis","title":"BitBasis.IterControl","text":"IterControl{S}\nIterControl(n::Int, base::Int, masks, ks) -> IterControl\n\nIterator to iterate through controlled subspace. See also itercontrol.  S is the number of shifts,  n is the size of Hilbert space,  base is the base of counter,  masks and ks are helpers for enumerating over the target Hilbert Space.\n\n\n\n\n\n","category":"type"},{"location":"man/bitbasis.html#BitBasis.ReorderedBasis","page":"BitBasis","title":"BitBasis.ReorderedBasis","text":"ReorderedBasis{N, T}\n\nLazy reorderd basis.\n\n\n\n\n\n","category":"type"},{"location":"man/bitbasis.html#BitBasis.ReorderedBasis-Union{Tuple{Tuple{T, Vararg{T, N}}}, Tuple{T}, Tuple{N}} where {N, T<:Integer}","page":"BitBasis","title":"BitBasis.ReorderedBasis","text":"ReorderedBasis(orders::NTuple{N, <:Integer})\n\nReturns a lazy set of reordered basis.\n\n\n\n\n\n","category":"method"},{"location":"index.html","page":"Home","title":"Home","text":"CurrentModule = Yao","category":"page"},{"location":"index.html#Yao","page":"Home","title":"Yao","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"A General Purpose Quantum Computation Simulation Framework","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Welcome to Yao, a Flexible, Extensible, Efficient Framework for Quantum Algorithm Design. Yao (幺) is the Chinese character for normalized but not orthogonal.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"We aim to provide a powerful tool for researchers, students to study and explore quantum computing in near term future, before quantum computer being used in large-scale.","category":"page"},{"location":"index.html#Quick-Starts","page":"Home","title":"Quick Starts","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"You can learn how to use Yao with some quick examples in this section. There are three badges on the top of each tutorial that allows you to open it in mybinder, preview it in nbviewer or download the tutorial as .zip file, which includes the notebook and the scripts and other related materials.","category":"page"},{"location":"index.html#Contribution","page":"Home","title":"Contribution","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"If you are interesting in polishing or contributing our tutorial, you can just open a PR in our tutorial repo.","category":"page"},{"location":"index.html#Syntax","page":"Home","title":"Syntax","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"The tutorials are written with Literate.","category":"page"},{"location":"index.html#Pluto-Notebooks","page":"Home","title":"Pluto Notebooks","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"There is also a set of Pluto notebooks available in the notebooks folder","category":"page"},{"location":"index.html#Manual","page":"Home","title":"Manual","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Pages = [\n    \"man/array_registers.md\",\n    \"man/blocks.md\",\n    \"man/base.md\",\n    \"man/registers.md\",\n    \"man/extending_blocks.md\",\n]\nDepth = 1","category":"page"},{"location":"man/simplification.html#Simplification","page":"Simplification","title":"Simplification","text":"","category":"section"},{"location":"man/simplification.html","page":"Simplification","title":"Simplification","text":"The simplification for YaoBlocks is currently implemented in a limited and straightforward fashion, there is only one interface simplify to call.","category":"page"},{"location":"man/simplification.html#APIs","page":"Simplification","title":"APIs","text":"","category":"section"},{"location":"man/simplification.html","page":"Simplification","title":"Simplification","text":"Modules = [YaoBlocks.Optimise]\nOrder = [:function, :macro]","category":"page"},{"location":"man/simplification.html#YaoBlocks.Optimise.is_pauli-Tuple{T} where T","page":"Simplification","title":"YaoBlocks.Optimise.is_pauli","text":"is_pauli(x)\n\nCheck if x is an element of pauli group.\n\nnote: Note\nthis function is just a binding of SimpleTraits.istrait, it will not work if the type is not registered as a trait with @traitimpl.\n\n\n\n\n\n","category":"method"},{"location":"man/simplification.html#YaoBlocks.Optimise.replace_block-Tuple{Any, AbstractBlock}","page":"Simplification","title":"YaoBlocks.Optimise.replace_block","text":"replace_block(actor, tree::AbstractBlock) -> AbstractBlock\nreplace_block(pair::Pair{Type{ST}, TT}, tree::AbstractBlock) -> AbstractBlock\n\nreplace blocks in a circuit, where actor is a function that given input block, returns the block to replace, or nothing for skip replacing and visit sibling. If pair is provided, then replace original block with type ST with new block (pair.second).\n\n\n\n\n\n","category":"method"},{"location":"man/simplification.html#YaoBlocks.Optimise.simplify-Tuple{AbstractBlock}","page":"Simplification","title":"YaoBlocks.Optimise.simplify","text":"simplify(block[; rules=__default_simplification_rules__])\n\nSimplify a block tree accroding to given rules, default to use __default_simplification_rules__.\n\n\n\n\n\n","category":"method"},{"location":"man/simplification.html#YaoBlocks.Optimise.to_basictypes","page":"Simplification","title":"YaoBlocks.Optimise.to_basictypes","text":"to_basictypes(block::AbstractBlock{N}) where N\n\nconvert gates to basic types\n\n* ChainBlock\n* PutBlock\n* PrimitiveBlock\n\n\n\n\n\n","category":"function"}]
}
